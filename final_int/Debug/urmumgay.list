
urmumgay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ff4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000133c0  0800a188  0800a188  0000b188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d548  0801d548  0001f1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d548  0801d548  0001e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d550  0801d550  0001f1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d550  0801d550  0001e550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801d554  0801d554  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0801d558  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d0  200001d4  0801d72c  0001f1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200044a4  0801d72c  0001f4a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001f1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d2b  00000000  00000000  0001f204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003789  00000000  00000000  00038f2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f80  00000000  00000000  0003c6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ad8  00000000  00000000  0003d638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ccb  00000000  00000000  0003e110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f61  00000000  00000000  00066ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fefda  00000000  00000000  0007ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b8  00000000  00000000  00179d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005070  00000000  00000000  00179dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017ee40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00003c05  00000000  00000000  0017eeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000001a8  00000000  00000000  00182ab1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a16c 	.word	0x0800a16c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a16c 	.word	0x0800a16c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08e      	sub	sp, #56	@ 0x38
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3e:	f000 fc85 	bl	800184c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f42:	f000 f899 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 f9af 	bl	80012a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4a:	f000 f98f 	bl	800126c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 f95d 	bl	800120c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f52:	f000 f8e3 	bl	800111c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  struct ADC_param ADC_val={0};
 8000f56:	f107 031c 	add.w	r3, r7, #28
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]
 8000f66:	615a      	str	r2, [r3, #20]
  struct FFT_res FFT_val={0};
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]
 8000f76:	615a      	str	r2, [r3, #20]

  ADC_val.bit=12;
 8000f78:	230c      	movs	r3, #12
 8000f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_val.prescaler=64;
 8000f7c:	2340      	movs	r3, #64	@ 0x40
 8000f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_val.sampling_time=24.5;
 8000f80:	4b32      	ldr	r3, [pc, #200]	@ (800104c <main+0x114>)
 8000f82:	633b      	str	r3, [r7, #48]	@ 0x30
  ADC_val.speed=64000000;					//clock speed on .ioc file
 8000f84:	4b32      	ldr	r3, [pc, #200]	@ (8001050 <main+0x118>)
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
  ADC_val.adc_buf_len=ADC_BUF_LEN;				//buffer length
 8000f88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8c:	623b      	str	r3, [r7, #32]
  ADC_val.adc_buf=adc_buf;				//store the value of buffer array pointer
 8000f8e:	4b31      	ldr	r3, [pc, #196]	@ (8001054 <main+0x11c>)
 8000f90:	61fb      	str	r3, [r7, #28]

  float fw=10250000000, velo=0;
 8000f92:	4b31      	ldr	r3, [pc, #196]	@ (8001058 <main+0x120>)
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	603b      	str	r3, [r7, #0]

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf,ADC_val.adc_buf_len);
 8000f9c:	6a3b      	ldr	r3, [r7, #32]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	492c      	ldr	r1, [pc, #176]	@ (8001054 <main+0x11c>)
 8000fa2:	482e      	ldr	r0, [pc, #184]	@ (800105c <main+0x124>)
 8000fa4:	f001 f866 	bl	8002074 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag){
 8000fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8001060 <main+0x128>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0fb      	beq.n	8000fa8 <main+0x70>
		  velo=0;
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
		  start_FFT(&flag,&ADC_val,&FFT_val);
 8000fb6:	1d3a      	adds	r2, r7, #4
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4828      	ldr	r0, [pc, #160]	@ (8001060 <main+0x128>)
 8000fc0:	f005 f834 	bl	800602c <start_FFT>
		  get_velocity(FFT_val.fdominant,fw,&velo);
 8000fc4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	edd7 0a0d 	vldr	s1, [r7, #52]	@ 0x34
 8000fd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fd4:	f005 f850 	bl	8006078 <get_velocity>
		  HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 8000fd8:	2120      	movs	r1, #32
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fde:	f002 fd83 	bl	8003ae8 <HAL_GPIO_TogglePin>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf,ADC_val.adc_buf_len);
 8000fe2:	6a3b      	ldr	r3, [r7, #32]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	491b      	ldr	r1, [pc, #108]	@ (8001054 <main+0x11c>)
 8000fe8:	481c      	ldr	r0, [pc, #112]	@ (800105c <main+0x124>)
 8000fea:	f001 f843 	bl	8002074 <HAL_ADC_Start_DMA>
		  sprintf(msg1,"Freq: %f     ", FFT_val.fdominant);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff faa9 	bl	8000548 <__aeabi_f2d>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	491a      	ldr	r1, [pc, #104]	@ (8001064 <main+0x12c>)
 8000ffc:	481a      	ldr	r0, [pc, #104]	@ (8001068 <main+0x130>)
 8000ffe:	f006 ff67 	bl	8007ed0 <siprintf>
		  HAL_UART_Transmit(&huart2,(uint8_t *)msg1,strlen(msg1),HAL_MAX_DELAY);
 8001002:	4819      	ldr	r0, [pc, #100]	@ (8001068 <main+0x130>)
 8001004:	f7ff f934 	bl	8000270 <strlen>
 8001008:	4603      	mov	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	4915      	ldr	r1, [pc, #84]	@ (8001068 <main+0x130>)
 8001012:	4816      	ldr	r0, [pc, #88]	@ (800106c <main+0x134>)
 8001014:	f004 f8f0 	bl	80051f8 <HAL_UART_Transmit>
		  sprintf(msg2,"Speed: %f \r\n", velo);
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa94 	bl	8000548 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4912      	ldr	r1, [pc, #72]	@ (8001070 <main+0x138>)
 8001026:	4813      	ldr	r0, [pc, #76]	@ (8001074 <main+0x13c>)
 8001028:	f006 ff52 	bl	8007ed0 <siprintf>
		 HAL_UART_Transmit(&huart2,(uint8_t *)msg2,strlen(msg2),HAL_MAX_DELAY);
 800102c:	4811      	ldr	r0, [pc, #68]	@ (8001074 <main+0x13c>)
 800102e:	f7ff f91f 	bl	8000270 <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	b29a      	uxth	r2, r3
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	490e      	ldr	r1, [pc, #56]	@ (8001074 <main+0x13c>)
 800103c:	480b      	ldr	r0, [pc, #44]	@ (800106c <main+0x134>)
 800103e:	f004 f8db 	bl	80051f8 <HAL_UART_Transmit>
		 HAL_Delay(10);
 8001042:	200a      	movs	r0, #10
 8001044:	f000 fc7e 	bl	8001944 <HAL_Delay>
	  if (flag){
 8001048:	e7ae      	b.n	8000fa8 <main+0x70>
 800104a:	bf00      	nop
 800104c:	41c40000 	.word	0x41c40000
 8001050:	03d09000 	.word	0x03d09000
 8001054:	20000324 	.word	0x20000324
 8001058:	5018bca6 	.word	0x5018bca6
 800105c:	200001f0 	.word	0x200001f0
 8001060:	20004324 	.word	0x20004324
 8001064:	0800a188 	.word	0x0800a188
 8001068:	20004328 	.word	0x20004328
 800106c:	2000029c 	.word	0x2000029c
 8001070:	0800a198 	.word	0x0800a198
 8001074:	2000433c 	.word	0x2000433c

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b096      	sub	sp, #88	@ 0x58
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	2244      	movs	r2, #68	@ 0x44
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f006 ff85 	bl	8007f96 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800109a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800109e:	f002 fd4b 	bl	8003b38 <HAL_PWREx_ControlVoltageScaling>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010a8:	f000 f976 	bl	8001398 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ac:	2302      	movs	r3, #2
 80010ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010b4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	2310      	movs	r3, #16
 80010b8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ba:	2302      	movs	r3, #2
 80010bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010be:	2302      	movs	r3, #2
 80010c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010c2:	2301      	movs	r3, #1
 80010c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80010c6:	230a      	movs	r3, #10
 80010c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80010ca:	2307      	movs	r3, #7
 80010cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ce:	2302      	movs	r3, #2
 80010d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010d2:	2302      	movs	r3, #2
 80010d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4618      	mov	r0, r3
 80010dc:	f002 fd82 	bl	8003be4 <HAL_RCC_OscConfig>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0x72>
  {
    Error_Handler();
 80010e6:	f000 f957 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2303      	movs	r3, #3
 80010f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f6:	2300      	movs	r3, #0
 80010f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010fe:	463b      	mov	r3, r7
 8001100:	2104      	movs	r1, #4
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f94a 	bl	800439c <HAL_RCC_ClockConfig>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110e:	f000 f943 	bl	8001398 <Error_Handler>
  }
}
 8001112:	bf00      	nop
 8001114:	3758      	adds	r7, #88	@ 0x58
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001122:	f107 031c 	add.w	r3, r7, #28
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]
 800112c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	611a      	str	r2, [r3, #16]
 800113c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800113e:	4b30      	ldr	r3, [pc, #192]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001140:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_ADC1_Init+0xe8>)
 8001142:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV64;
 8001144:	4b2e      	ldr	r3, [pc, #184]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001146:	f44f 1210 	mov.w	r2, #2359296	@ 0x240000
 800114a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800114c:	4b2c      	ldr	r3, [pc, #176]	@ (8001200 <MX_ADC1_Init+0xe4>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001158:	4b29      	ldr	r3, [pc, #164]	@ (8001200 <MX_ADC1_Init+0xe4>)
 800115a:	2200      	movs	r2, #0
 800115c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800115e:	4b28      	ldr	r3, [pc, #160]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001160:	2204      	movs	r2, #4
 8001162:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001164:	4b26      	ldr	r3, [pc, #152]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800116a:	4b25      	ldr	r3, [pc, #148]	@ (8001200 <MX_ADC1_Init+0xe4>)
 800116c:	2201      	movs	r2, #1
 800116e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001170:	4b23      	ldr	r3, [pc, #140]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001172:	2201      	movs	r2, #1
 8001174:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b22      	ldr	r3, [pc, #136]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117e:	4b20      	ldr	r3, [pc, #128]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001180:	2200      	movs	r2, #0
 8001182:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001186:	2200      	movs	r2, #0
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800118a:	4b1d      	ldr	r3, [pc, #116]	@ (8001200 <MX_ADC1_Init+0xe4>)
 800118c:	2201      	movs	r2, #1
 800118e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001192:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_ADC1_Init+0xe4>)
 8001194:	2200      	movs	r2, #0
 8001196:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	@ (8001200 <MX_ADC1_Init+0xe4>)
 800119a:	2200      	movs	r2, #0
 800119c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a0:	4817      	ldr	r0, [pc, #92]	@ (8001200 <MX_ADC1_Init+0xe4>)
 80011a2:	f000 fe17 	bl	8001dd4 <HAL_ADC_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80011ac:	f000 f8f4 	bl	8001398 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011b4:	f107 031c 	add.w	r3, r7, #28
 80011b8:	4619      	mov	r1, r3
 80011ba:	4811      	ldr	r0, [pc, #68]	@ (8001200 <MX_ADC1_Init+0xe4>)
 80011bc:	f001 feda 	bl	8002f74 <HAL_ADCEx_MultiModeConfigChannel>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80011c6:	f000 f8e7 	bl	8001398 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001208 <MX_ADC1_Init+0xec>)
 80011cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011ce:	2306      	movs	r3, #6
 80011d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80011d2:	2303      	movs	r3, #3
 80011d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011d6:	237f      	movs	r3, #127	@ 0x7f
 80011d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011da:	2304      	movs	r3, #4
 80011dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <MX_ADC1_Init+0xe4>)
 80011e8:	f001 f876 	bl	80022d8 <HAL_ADC_ConfigChannel>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80011f2:	f000 f8d1 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011f6:	bf00      	nop
 80011f8:	3728      	adds	r7, #40	@ 0x28
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001f0 	.word	0x200001f0
 8001204:	50040000 	.word	0x50040000
 8001208:	10c00010 	.word	0x10c00010

0800120c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001212:	4a15      	ldr	r2, [pc, #84]	@ (8001268 <MX_USART2_UART_Init+0x5c>)
 8001214:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001218:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800121c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001232:	220c      	movs	r2, #12
 8001234:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001238:	2200      	movs	r2, #0
 800123a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800123c:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 800123e:	2200      	movs	r2, #0
 8001240:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001244:	2200      	movs	r2, #0
 8001246:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001248:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 800124a:	2200      	movs	r2, #0
 800124c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800124e:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_USART2_UART_Init+0x58>)
 8001250:	f003 ff84 	bl	800515c <HAL_UART_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800125a:	f000 f89d 	bl	8001398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	2000029c 	.word	0x2000029c
 8001268:	40004400 	.word	0x40004400

0800126c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001272:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <MX_DMA_Init+0x38>)
 8001274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001276:	4a0b      	ldr	r2, [pc, #44]	@ (80012a4 <MX_DMA_Init+0x38>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6493      	str	r3, [r2, #72]	@ 0x48
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <MX_DMA_Init+0x38>)
 8001280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	200b      	movs	r0, #11
 8001290:	f001 fffb 	bl	800328a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001294:	200b      	movs	r0, #11
 8001296:	f002 f814 	bl	80032c2 <HAL_NVIC_EnableIRQ>

}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000

080012a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
 80012bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c2:	4a2a      	ldr	r2, [pc, #168]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ce:	f003 0304 	and.w	r3, r3, #4
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d6:	4b25      	ldr	r3, [pc, #148]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012da:	4a24      	ldr	r2, [pc, #144]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012e2:	4b22      	ldr	r3, [pc, #136]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b1f      	ldr	r3, [pc, #124]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012f2:	4a1e      	ldr	r2, [pc, #120]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_GPIO_Init+0xc4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_GPIO_Init+0xc4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800130a:	4a18      	ldr	r2, [pc, #96]	@ (800136c <MX_GPIO_Init+0xc4>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001312:	4b16      	ldr	r3, [pc, #88]	@ (800136c <MX_GPIO_Init+0xc4>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	2120      	movs	r1, #32
 8001322:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001326:	f002 fbc7 	bl	8003ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800132a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800132e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001330:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800133a:	f107 0314 	add.w	r3, r7, #20
 800133e:	4619      	mov	r1, r3
 8001340:	480b      	ldr	r0, [pc, #44]	@ (8001370 <MX_GPIO_Init+0xc8>)
 8001342:	f002 fa0f 	bl	8003764 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001346:	2320      	movs	r3, #32
 8001348:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001360:	f002 fa00 	bl	8003764 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001364:	bf00      	nop
 8001366:	3728      	adds	r7, #40	@ 0x28
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	48000800 	.word	0x48000800

08001374 <HAL_ADC_ConvCpltCallback>:
/*
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
	//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_SET);
}*/

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	flag=1;
 800137c:	4b04      	ldr	r3, [pc, #16]	@ (8001390 <HAL_ADC_ConvCpltCallback+0x1c>)
 800137e:	2201      	movs	r2, #1
 8001380:	601a      	str	r2, [r3, #0]
	HAL_ADC_Stop_DMA(&hadc1);
 8001382:	4804      	ldr	r0, [pc, #16]	@ (8001394 <HAL_ADC_ConvCpltCallback+0x20>)
 8001384:	f000 ff32 	bl	80021ec <HAL_ADC_Stop_DMA>
	//HAL_GPIO_WritePin(LD2_GPIO_Port,LD2_Pin,GPIO_PIN_RESET);
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20004324 	.word	0x20004324
 8001394:	200001f0 	.word	0x200001f0

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	bf00      	nop
 80013a2:	e7fd      	b.n	80013a0 <Error_Handler+0x8>

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	@ (80013e8 <HAL_MspInit+0x44>)
 80013ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ae:	4a0e      	ldr	r2, [pc, #56]	@ (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80013b6:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <HAL_MspInit+0x44>)
 80013b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_MspInit+0x44>)
 80013c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013c6:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_MspInit+0x44>)
 80013d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ac      	sub	sp, #176	@ 0xb0
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	2288      	movs	r2, #136	@ 0x88
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f006 fdc2 	bl	8007f96 <memset>
  if(hadc->Instance==ADC1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a3c      	ldr	r2, [pc, #240]	@ (8001508 <HAL_ADC_MspInit+0x11c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d171      	bne.n	8001500 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800141c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001420:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001422:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001426:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800142a:	2302      	movs	r3, #2
 800142c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800142e:	2301      	movs	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001432:	2308      	movs	r3, #8
 8001434:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001436:	2307      	movs	r3, #7
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800143a:	2302      	movs	r3, #2
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800143e:	2302      	movs	r3, #2
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001442:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001446:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4618      	mov	r0, r3
 800144e:	f003 f9c9 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001458:	f7ff ff9e 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800145c:	4b2b      	ldr	r3, [pc, #172]	@ (800150c <HAL_ADC_MspInit+0x120>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001460:	4a2a      	ldr	r2, [pc, #168]	@ (800150c <HAL_ADC_MspInit+0x120>)
 8001462:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001466:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001468:	4b28      	ldr	r3, [pc, #160]	@ (800150c <HAL_ADC_MspInit+0x120>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800146c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	4b25      	ldr	r3, [pc, #148]	@ (800150c <HAL_ADC_MspInit+0x120>)
 8001476:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001478:	4a24      	ldr	r2, [pc, #144]	@ (800150c <HAL_ADC_MspInit+0x120>)
 800147a:	f043 0304 	orr.w	r3, r3, #4
 800147e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_ADC_MspInit+0x120>)
 8001482:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148c:	2308      	movs	r3, #8
 800148e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001492:	230b      	movs	r3, #11
 8001494:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80014a2:	4619      	mov	r1, r3
 80014a4:	481a      	ldr	r0, [pc, #104]	@ (8001510 <HAL_ADC_MspInit+0x124>)
 80014a6:	f002 f95d 	bl	8003764 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001518 <HAL_ADC_MspInit+0x12c>)
 80014ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80014b0:	4b18      	ldr	r3, [pc, #96]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b6:	4b17      	ldr	r3, [pc, #92]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014bc:	4b15      	ldr	r3, [pc, #84]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014d6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014da:	2200      	movs	r2, #0
 80014dc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014e4:	480b      	ldr	r0, [pc, #44]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014e6:	f001 ff07 	bl	80032f8 <HAL_DMA_Init>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <HAL_ADC_MspInit+0x108>
    {
      Error_Handler();
 80014f0:	f7ff ff52 	bl	8001398 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a07      	ldr	r2, [pc, #28]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014f8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80014fa:	4a06      	ldr	r2, [pc, #24]	@ (8001514 <HAL_ADC_MspInit+0x128>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001500:	bf00      	nop
 8001502:	37b0      	adds	r7, #176	@ 0xb0
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	50040000 	.word	0x50040000
 800150c:	40021000 	.word	0x40021000
 8001510:	48000800 	.word	0x48000800
 8001514:	20000254 	.word	0x20000254
 8001518:	40020008 	.word	0x40020008

0800151c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b0ac      	sub	sp, #176	@ 0xb0
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001524:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	605a      	str	r2, [r3, #4]
 800152e:	609a      	str	r2, [r3, #8]
 8001530:	60da      	str	r2, [r3, #12]
 8001532:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001534:	f107 0314 	add.w	r3, r7, #20
 8001538:	2288      	movs	r2, #136	@ 0x88
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f006 fd2a 	bl	8007f96 <memset>
  if(huart->Instance==USART2)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a21      	ldr	r2, [pc, #132]	@ (80015cc <HAL_UART_MspInit+0xb0>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d13b      	bne.n	80015c4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800154c:	2302      	movs	r3, #2
 800154e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001550:	2300      	movs	r3, #0
 8001552:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4618      	mov	r0, r3
 800155a:	f003 f943 	bl	80047e4 <HAL_RCCEx_PeriphCLKConfig>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001564:	f7ff ff18 	bl	8001398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	4b19      	ldr	r3, [pc, #100]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800156c:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 800156e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001572:	6593      	str	r3, [r2, #88]	@ 0x58
 8001574:	4b16      	ldr	r3, [pc, #88]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 8001576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800158c:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <HAL_UART_MspInit+0xb4>)
 800158e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001598:	230c      	movs	r3, #12
 800159a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80015ba:	4619      	mov	r1, r3
 80015bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015c0:	f002 f8d0 	bl	8003764 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80015c4:	bf00      	nop
 80015c6:	37b0      	adds	r7, #176	@ 0xb0
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40004400 	.word	0x40004400
 80015d0:	40021000 	.word	0x40021000

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160a:	b480      	push	{r7}
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr

08001618 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162a:	f000 f96b 	bl	8001904 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
	...

08001634 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001638:	4802      	ldr	r0, [pc, #8]	@ (8001644 <DMA1_Channel1_IRQHandler+0x10>)
 800163a:	f001 ffb3 	bl	80035a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000254 	.word	0x20000254

08001648 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return 1;
 800164c:	2301      	movs	r3, #1
}
 800164e:	4618      	mov	r0, r3
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_kill>:

int _kill(int pid, int sig)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001662:	f006 fceb 	bl	800803c <__errno>
 8001666:	4603      	mov	r3, r0
 8001668:	2216      	movs	r2, #22
 800166a:	601a      	str	r2, [r3, #0]
  return -1;
 800166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <_exit>:

void _exit (int status)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001680:	f04f 31ff 	mov.w	r1, #4294967295
 8001684:	6878      	ldr	r0, [r7, #4]
 8001686:	f7ff ffe7 	bl	8001658 <_kill>
  while (1) {}    /* Make sure we hang here */
 800168a:	bf00      	nop
 800168c:	e7fd      	b.n	800168a <_exit+0x12>

0800168e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b086      	sub	sp, #24
 8001692:	af00      	add	r7, sp, #0
 8001694:	60f8      	str	r0, [r7, #12]
 8001696:	60b9      	str	r1, [r7, #8]
 8001698:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e00a      	b.n	80016b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016a0:	f3af 8000 	nop.w
 80016a4:	4601      	mov	r1, r0
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	60ba      	str	r2, [r7, #8]
 80016ac:	b2ca      	uxtb	r2, r1
 80016ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	3301      	adds	r3, #1
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dbf0      	blt.n	80016a0 <_read+0x12>
  }

  return len;
 80016be:	687b      	ldr	r3, [r7, #4]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b086      	sub	sp, #24
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	e009      	b.n	80016ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1c5a      	adds	r2, r3, #1
 80016de:	60ba      	str	r2, [r7, #8]
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	697a      	ldr	r2, [r7, #20]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	dbf1      	blt.n	80016da <_write+0x12>
  }
  return len;
 80016f6:	687b      	ldr	r3, [r7, #4]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}

08001700 <_close>:

int _close(int file)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001728:	605a      	str	r2, [r3, #4]
  return 0;
 800172a:	2300      	movs	r3, #0
}
 800172c:	4618      	mov	r0, r3
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <_isatty>:

int _isatty(int file)
{
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001740:	2301      	movs	r3, #1
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800174e:	b480      	push	{r7}
 8001750:	b085      	sub	sp, #20
 8001752:	af00      	add	r7, sp, #0
 8001754:	60f8      	str	r0, [r7, #12]
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b086      	sub	sp, #24
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001770:	4a14      	ldr	r2, [pc, #80]	@ (80017c4 <_sbrk+0x5c>)
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <_sbrk+0x60>)
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800177c:	4b13      	ldr	r3, [pc, #76]	@ (80017cc <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d102      	bne.n	800178a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <_sbrk+0x64>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <_sbrk+0x68>)
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <_sbrk+0x64>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4413      	add	r3, r2
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	429a      	cmp	r2, r3
 8001796:	d207      	bcs.n	80017a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001798:	f006 fc50 	bl	800803c <__errno>
 800179c:	4603      	mov	r3, r0
 800179e:	220c      	movs	r2, #12
 80017a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295
 80017a6:	e009      	b.n	80017bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a8:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <_sbrk+0x64>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ae:	4b07      	ldr	r3, [pc, #28]	@ (80017cc <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	4a05      	ldr	r2, [pc, #20]	@ (80017cc <_sbrk+0x64>)
 80017b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ba:	68fb      	ldr	r3, [r7, #12]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	20018000 	.word	0x20018000
 80017c8:	00000400 	.word	0x00000400
 80017cc:	20004350 	.word	0x20004350
 80017d0:	200044a8 	.word	0x200044a8

080017d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017d8:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <SystemInit+0x20>)
 80017da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017de:	4a05      	ldr	r2, [pc, #20]	@ (80017f4 <SystemInit+0x20>)
 80017e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80017e8:	bf00      	nop
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001830 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017fc:	f7ff ffea 	bl	80017d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001800:	480c      	ldr	r0, [pc, #48]	@ (8001834 <LoopForever+0x6>)
  ldr r1, =_edata
 8001802:	490d      	ldr	r1, [pc, #52]	@ (8001838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001804:	4a0d      	ldr	r2, [pc, #52]	@ (800183c <LoopForever+0xe>)
  movs r3, #0
 8001806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001808:	e002      	b.n	8001810 <LoopCopyDataInit>

0800180a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800180a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800180c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800180e:	3304      	adds	r3, #4

08001810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001814:	d3f9      	bcc.n	800180a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001818:	4c0a      	ldr	r4, [pc, #40]	@ (8001844 <LoopForever+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800181c:	e001      	b.n	8001822 <LoopFillZerobss>

0800181e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800181e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001820:	3204      	adds	r2, #4

08001822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001824:	d3fb      	bcc.n	800181e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001826:	f006 fc0f 	bl	8008048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800182a:	f7ff fb85 	bl	8000f38 <main>

0800182e <LoopForever>:

LoopForever:
    b LoopForever
 800182e:	e7fe      	b.n	800182e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001830:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001838:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800183c:	0801d558 	.word	0x0801d558
  ldr r2, =_sbss
 8001840:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001844:	200044a4 	.word	0x200044a4

08001848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001848:	e7fe      	b.n	8001848 <ADC1_2_IRQHandler>
	...

0800184c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001852:	2300      	movs	r3, #0
 8001854:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <HAL_Init+0x3c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a0b      	ldr	r2, [pc, #44]	@ (8001888 <HAL_Init+0x3c>)
 800185c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001860:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001862:	2003      	movs	r0, #3
 8001864:	f001 fd06 	bl	8003274 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001868:	2000      	movs	r0, #0
 800186a:	f000 f80f 	bl	800188c <HAL_InitTick>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	71fb      	strb	r3, [r7, #7]
 8001878:	e001      	b.n	800187e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800187a:	f7ff fd93 	bl	80013a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800187e:	79fb      	ldrb	r3, [r7, #7]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40022000 	.word	0x40022000

0800188c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <HAL_InitTick+0x6c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d023      	beq.n	80018e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80018a0:	4b16      	ldr	r3, [pc, #88]	@ (80018fc <HAL_InitTick+0x70>)
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <HAL_InitTick+0x6c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fd11 	bl	80032de <HAL_SYSTICK_Config>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10f      	bne.n	80018e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d809      	bhi.n	80018dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295
 80018d0:	f001 fcdb 	bl	800328a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <HAL_InitTick+0x74>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e007      	b.n	80018ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e004      	b.n	80018ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	73fb      	strb	r3, [r7, #15]
 80018e6:	e001      	b.n	80018ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000008 	.word	0x20000008
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x20>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	461a      	mov	r2, r3
 800190e:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <HAL_IncTick+0x24>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4413      	add	r3, r2
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_IncTick+0x24>)
 8001916:	6013      	str	r3, [r2, #0]
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000008 	.word	0x20000008
 8001928:	20004354 	.word	0x20004354

0800192c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  return uwTick;
 8001930:	4b03      	ldr	r3, [pc, #12]	@ (8001940 <HAL_GetTick+0x14>)
 8001932:	681b      	ldr	r3, [r3, #0]
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20004354 	.word	0x20004354

08001944 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800194c:	f7ff ffee 	bl	800192c <HAL_GetTick>
 8001950:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800195c:	d005      	beq.n	800196a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800195e:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_Delay+0x44>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4413      	add	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800196a:	bf00      	nop
 800196c:	f7ff ffde 	bl	800192c <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	429a      	cmp	r2, r3
 800197a:	d8f7      	bhi.n	800196c <HAL_Delay+0x28>
  {
  }
}
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20000008 	.word	0x20000008

0800198c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	609a      	str	r2, [r3, #8]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
 8001a00:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3360      	adds	r3, #96	@ 0x60
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b08      	ldr	r3, [pc, #32]	@ (8001a38 <LL_ADC_SetOffset+0x44>)
 8001a16:	4013      	ands	r3, r2
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	430a      	orrs	r2, r1
 8001a22:	4313      	orrs	r3, r2
 8001a24:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a2c:	bf00      	nop
 8001a2e:	371c      	adds	r7, #28
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	03fff000 	.word	0x03fff000

08001a3c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3360      	adds	r3, #96	@ 0x60
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3360      	adds	r3, #96	@ 0x60
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a92:	bf00      	nop
 8001a94:	371c      	adds	r7, #28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e000      	b.n	8001ab8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3330      	adds	r3, #48	@ 0x30
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	f003 030c 	and.w	r3, r3, #12
 8001ae0:	4413      	add	r3, r2
 8001ae2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	211f      	movs	r1, #31
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	43db      	mvns	r3, r3
 8001af6:	401a      	ands	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	0e9b      	lsrs	r3, r3, #26
 8001afc:	f003 011f 	and.w	r1, r3, #31
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f003 031f 	and.w	r3, r3, #31
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b10:	bf00      	nop
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr

08001b1c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b087      	sub	sp, #28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3314      	adds	r3, #20
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	0e5b      	lsrs	r3, r3, #25
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	4413      	add	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	0d1b      	lsrs	r3, r3, #20
 8001b44:	f003 031f 	and.w	r3, r3, #31
 8001b48:	2107      	movs	r1, #7
 8001b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	401a      	ands	r2, r3
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	0d1b      	lsrs	r3, r3, #20
 8001b56:	f003 031f 	and.w	r3, r3, #31
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b60:	431a      	orrs	r2, r3
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b66:	bf00      	nop
 8001b68:	371c      	adds	r7, #28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	401a      	ands	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f003 0318 	and.w	r3, r3, #24
 8001b96:	4908      	ldr	r1, [pc, #32]	@ (8001bb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b98:	40d9      	lsrs	r1, r3
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	400b      	ands	r3, r1
 8001b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	0007ffff 	.word	0x0007ffff

08001bbc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 031f 	and.w	r3, r3, #31
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001be8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6093      	str	r3, [r2, #8]
}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c10:	d101      	bne.n	8001c16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c12:	2301      	movs	r3, #1
 8001c14:	e000      	b.n	8001c18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c16:	2300      	movs	r3, #0
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001c34:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c38:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c60:	d101      	bne.n	8001c66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001cac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cb0:	f043 0202 	orr.w	r2, r3, #2
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <LL_ADC_IsEnabled+0x18>
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e000      	b.n	8001cde <LL_ADC_IsEnabled+0x1a>
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d101      	bne.n	8001d02 <LL_ADC_IsDisableOngoing+0x18>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <LL_ADC_IsDisableOngoing+0x1a>
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d20:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d24:	f043 0204 	orr.w	r2, r3, #4
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d4c:	f043 0210 	orr.w	r2, r3, #16
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b04      	cmp	r3, #4
 8001d72:	d101      	bne.n	8001d78 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001d96:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d9a:	f043 0220 	orr.w	r2, r3, #32
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr

08001dae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001dae:	b480      	push	{r7}
 8001db0:	b083      	sub	sp, #12
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b08      	cmp	r3, #8
 8001dc0:	d101      	bne.n	8001dc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001dd4:	b590      	push	{r4, r7, lr}
 8001dd6:	b089      	sub	sp, #36	@ 0x24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e130      	b.n	8002050 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691b      	ldr	r3, [r3, #16]
 8001df2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff faf5 	bl	80013ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff fef1 	bl	8001bfc <LL_ADC_IsDeepPowerDownEnabled>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fed7 	bl	8001bd8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff ff0c 	bl	8001c4c <LL_ADC_IsInternalRegulatorEnabled>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d115      	bne.n	8001e66 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fef0 	bl	8001c24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e44:	4b84      	ldr	r3, [pc, #528]	@ (8002058 <HAL_ADC_Init+0x284>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	099b      	lsrs	r3, r3, #6
 8001e4a:	4a84      	ldr	r2, [pc, #528]	@ (800205c <HAL_ADC_Init+0x288>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	099b      	lsrs	r3, r3, #6
 8001e52:	3301      	adds	r3, #1
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e58:	e002      	b.n	8001e60 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f9      	bne.n	8001e5a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff feee 	bl	8001c4c <LL_ADC_IsInternalRegulatorEnabled>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10d      	bne.n	8001e92 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e7a:	f043 0210 	orr.w	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff62 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 8001e9c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea2:	f003 0310 	and.w	r3, r3, #16
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f040 80c9 	bne.w	800203e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80c5 	bne.w	800203e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eb8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001ebc:	f043 0202 	orr.w	r2, r3, #2
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fefb 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001ed4:	4862      	ldr	r0, [pc, #392]	@ (8002060 <HAL_ADC_Init+0x28c>)
 8001ed6:	f7ff fef5 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001eda:	4604      	mov	r4, r0
 8001edc:	4861      	ldr	r0, [pc, #388]	@ (8002064 <HAL_ADC_Init+0x290>)
 8001ede:	f7ff fef1 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	431c      	orrs	r4, r3
 8001ee6:	4860      	ldr	r0, [pc, #384]	@ (8002068 <HAL_ADC_Init+0x294>)
 8001ee8:	f7ff feec 	bl	8001cc4 <LL_ADC_IsEnabled>
 8001eec:	4603      	mov	r3, r0
 8001eee:	4323      	orrs	r3, r4
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	485c      	ldr	r0, [pc, #368]	@ (800206c <HAL_ADC_Init+0x298>)
 8001efc:	f7ff fd46 	bl	800198c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	7e5b      	ldrb	r3, [r3, #25]
 8001f04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001f10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001f16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d106      	bne.n	8001f3c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	3b01      	subs	r3, #1
 8001f34:	045b      	lsls	r3, r3, #17
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	4b44      	ldr	r3, [pc, #272]	@ (8002070 <HAL_ADC_Init+0x29c>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	69b9      	ldr	r1, [r7, #24]
 8001f68:	430b      	orrs	r3, r1
 8001f6a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff1c 	bl	8001dae <LL_ADC_INJ_IsConversionOngoing>
 8001f76:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d13d      	bne.n	8001ffa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d13a      	bne.n	8001ffa <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f88:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f90:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001fa0:	f023 0302 	bic.w	r3, r3, #2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	69b9      	ldr	r1, [r7, #24]
 8001faa:	430b      	orrs	r3, r1
 8001fac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d118      	bne.n	8001fea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001fc2:	f023 0304 	bic.w	r3, r3, #4
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001fce:	4311      	orrs	r1, r2
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001fd4:	4311      	orrs	r1, r2
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0201 	orr.w	r2, r2, #1
 8001fe6:	611a      	str	r2, [r3, #16]
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 0201 	bic.w	r2, r2, #1
 8001ff8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10c      	bne.n	800201c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	f023 010f 	bic.w	r1, r3, #15
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	1e5a      	subs	r2, r3, #1
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	631a      	str	r2, [r3, #48]	@ 0x30
 800201a:	e007      	b.n	800202c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 020f 	bic.w	r2, r2, #15
 800202a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002030:	f023 0303 	bic.w	r3, r3, #3
 8002034:	f043 0201 	orr.w	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
 800203c:	e007      	b.n	800204e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800204e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3724      	adds	r7, #36	@ 0x24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	20000000 	.word	0x20000000
 800205c:	053e2d63 	.word	0x053e2d63
 8002060:	50040000 	.word	0x50040000
 8002064:	50040100 	.word	0x50040100
 8002068:	50040200 	.word	0x50040200
 800206c:	50040300 	.word	0x50040300
 8002070:	fff0c007 	.word	0xfff0c007

08002074 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002080:	4853      	ldr	r0, [pc, #332]	@ (80021d0 <HAL_ADC_Start_DMA+0x15c>)
 8002082:	f7ff fd9b 	bl	8001bbc <LL_ADC_GetMultimode>
 8002086:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fe67 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 8093 	bne.w	80021c0 <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_Start_DMA+0x34>
 80020a4:	2302      	movs	r3, #2
 80020a6:	e08e      	b.n	80021c6 <HAL_ADC_Start_DMA+0x152>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a47      	ldr	r2, [pc, #284]	@ (80021d4 <HAL_ADC_Start_DMA+0x160>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d008      	beq.n	80020cc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d005      	beq.n	80020cc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b05      	cmp	r3, #5
 80020c4:	d002      	beq.n	80020cc <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b09      	cmp	r3, #9
 80020ca:	d172      	bne.n	80021b2 <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80020cc:	68f8      	ldr	r0, [r7, #12]
 80020ce:	f000 fdb1 	bl	8002c34 <ADC_Enable>
 80020d2:	4603      	mov	r3, r0
 80020d4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80020d6:	7dfb      	ldrb	r3, [r7, #23]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d165      	bne.n	80021a8 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a38      	ldr	r2, [pc, #224]	@ (80021d8 <HAL_ADC_Start_DMA+0x164>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d002      	beq.n	8002100 <HAL_ADC_Start_DMA+0x8c>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e000      	b.n	8002102 <HAL_ADC_Start_DMA+0x8e>
 8002100:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_ADC_Start_DMA+0x168>)
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	4293      	cmp	r3, r2
 8002108:	d002      	beq.n	8002110 <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d105      	bne.n	800211c <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002114:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800212c:	f023 0206 	bic.w	r2, r3, #6
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	659a      	str	r2, [r3, #88]	@ 0x58
 8002134:	e002      	b.n	800213c <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002140:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_ADC_Start_DMA+0x16c>)
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002148:	4a26      	ldr	r2, [pc, #152]	@ (80021e4 <HAL_ADC_Start_DMA+0x170>)
 800214a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002150:	4a25      	ldr	r2, [pc, #148]	@ (80021e8 <HAL_ADC_Start_DMA+0x174>)
 8002152:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	221c      	movs	r2, #28
 800215a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0210 	orr.w	r2, r2, #16
 8002172:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	3340      	adds	r3, #64	@ 0x40
 800218e:	4619      	mov	r1, r3
 8002190:	68ba      	ldr	r2, [r7, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f001 f968 	bl	8003468 <HAL_DMA_Start_IT>
 8002198:	4603      	mov	r3, r0
 800219a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff fdb5 	bl	8001d10 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80021a6:	e00d      	b.n	80021c4 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80021b0:	e008      	b.n	80021c4 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80021be:	e001      	b.n	80021c4 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021c0:	2302      	movs	r3, #2
 80021c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	50040300 	.word	0x50040300
 80021d4:	50040200 	.word	0x50040200
 80021d8:	50040100 	.word	0x50040100
 80021dc:	50040000 	.word	0x50040000
 80021e0:	08002dff 	.word	0x08002dff
 80021e4:	08002ed7 	.word	0x08002ed7
 80021e8:	08002ef3 	.word	0x08002ef3

080021ec <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d101      	bne.n	8002202 <HAL_ADC_Stop_DMA+0x16>
 80021fe:	2302      	movs	r3, #2
 8002200:	e051      	b.n	80022a6 <HAL_ADC_Stop_DMA+0xba>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800220a:	2103      	movs	r1, #3
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fc55 	bl	8002abc <ADC_ConversionStop>
 8002212:	4603      	mov	r3, r0
 8002214:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d13f      	bne.n	800229c <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0201 	bic.w	r2, r2, #1
 800222a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d10f      	bne.n	800225a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223e:	4618      	mov	r0, r3
 8002240:	f001 f972 	bl	8003528 <HAL_DMA_Abort>
 8002244:	4603      	mov	r3, r0
 8002246:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002248:	7bfb      	ldrb	r3, [r7, #15]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002252:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685a      	ldr	r2, [r3, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f022 0210 	bic.w	r2, r2, #16
 8002268:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d105      	bne.n	800227c <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fd65 	bl	8002d40 <ADC_Disable>
 8002276:	4603      	mov	r3, r0
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e002      	b.n	8002282 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 fd5f 	bl	8002d40 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002282:	7bfb      	ldrb	r3, [r7, #15]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002290:	f023 0301 	bic.w	r3, r3, #1
 8002294:	f043 0201 	orr.w	r2, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0b6      	sub	sp, #216	@ 0xd8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x22>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e3c9      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x7b6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fd2a 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 83aa 	bne.w	8002a68 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	2b05      	cmp	r3, #5
 8002322:	d824      	bhi.n	800236e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	3b02      	subs	r3, #2
 800232a:	2b03      	cmp	r3, #3
 800232c:	d81b      	bhi.n	8002366 <HAL_ADC_ConfigChannel+0x8e>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <HAL_ADC_ConfigChannel+0x5c>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002345 	.word	0x08002345
 8002338:	0800234d 	.word	0x0800234d
 800233c:	08002355 	.word	0x08002355
 8002340:	0800235d 	.word	0x0800235d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002344:	230c      	movs	r3, #12
 8002346:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800234a:	e010      	b.n	800236e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 800234c:	2312      	movs	r3, #18
 800234e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002352:	e00c      	b.n	800236e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002354:	2318      	movs	r3, #24
 8002356:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800235a:	e008      	b.n	800236e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 800235c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002360:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002366:	2306      	movs	r3, #6
 8002368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800236c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6818      	ldr	r0, [r3, #0]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800237c:	f7ff fba2 	bl	8001ac4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fceb 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 800238a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fd0b 	bl	8001dae <LL_ADC_INJ_IsConversionOngoing>
 8002398:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800239c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 81a4 	bne.w	80026ee <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f040 819f 	bne.w	80026ee <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	461a      	mov	r2, r3
 80023be:	f7ff fbad 	bl	8001b1c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	f003 0303 	and.w	r3, r3, #3
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d00a      	beq.n	80023fa <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6818      	ldr	r0, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	6919      	ldr	r1, [r3, #16]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80023f4:	f7ff fafe 	bl	80019f4 <LL_ADC_SetOffset>
 80023f8:	e179      	b.n	80026ee <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2100      	movs	r1, #0
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fb1b 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 8002406:	4603      	mov	r3, r0
 8002408:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240c:	2b00      	cmp	r3, #0
 800240e:	d10a      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x14e>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2100      	movs	r1, #0
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fb10 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	0e9b      	lsrs	r3, r3, #26
 8002420:	f003 021f 	and.w	r2, r3, #31
 8002424:	e01e      	b.n	8002464 <HAL_ADC_ConfigChannel+0x18c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fb05 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002438:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002444:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002448:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800244c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002454:	2320      	movs	r3, #32
 8002456:	e004      	b.n	8002462 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002458:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800245c:	fab3 f383 	clz	r3, r3
 8002460:	b2db      	uxtb	r3, r3
 8002462:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246c:	2b00      	cmp	r3, #0
 800246e:	d105      	bne.n	800247c <HAL_ADC_ConfigChannel+0x1a4>
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	0e9b      	lsrs	r3, r3, #26
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	e018      	b.n	80024ae <HAL_ADC_ConfigChannel+0x1d6>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002490:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002494:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002498:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e004      	b.n	80024ae <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80024a4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80024a8:	fab3 f383 	clz	r3, r3
 80024ac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d106      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fad4 	bl	8001a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2101      	movs	r1, #1
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fab8 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10a      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x214>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff faad 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 80024e2:	4603      	mov	r3, r0
 80024e4:	0e9b      	lsrs	r3, r3, #26
 80024e6:	f003 021f 	and.w	r2, r3, #31
 80024ea:	e01e      	b.n	800252a <HAL_ADC_ConfigChannel+0x252>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff faa2 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002502:	fa93 f3a3 	rbit	r3, r3
 8002506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800250a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800250e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e004      	b.n	8002528 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800251e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002532:	2b00      	cmp	r3, #0
 8002534:	d105      	bne.n	8002542 <HAL_ADC_ConfigChannel+0x26a>
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	0e9b      	lsrs	r3, r3, #26
 800253c:	f003 031f 	and.w	r3, r3, #31
 8002540:	e018      	b.n	8002574 <HAL_ADC_ConfigChannel+0x29c>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8002556:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800255a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800255e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002566:	2320      	movs	r3, #32
 8002568:	e004      	b.n	8002574 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 800256a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002574:	429a      	cmp	r2, r3
 8002576:	d106      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	2101      	movs	r1, #1
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff fa71 	bl	8001a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2102      	movs	r1, #2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff fa55 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 8002592:	4603      	mov	r3, r0
 8002594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10a      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x2da>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2102      	movs	r1, #2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff fa4a 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 80025a8:	4603      	mov	r3, r0
 80025aa:	0e9b      	lsrs	r3, r3, #26
 80025ac:	f003 021f 	and.w	r2, r3, #31
 80025b0:	e01e      	b.n	80025f0 <HAL_ADC_ConfigChannel+0x318>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2102      	movs	r1, #2
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fa3f 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 80025be:	4603      	mov	r3, r0
 80025c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80025c8:	fa93 f3a3 	rbit	r3, r3
 80025cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80025d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80025d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80025d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80025e0:	2320      	movs	r3, #32
 80025e2:	e004      	b.n	80025ee <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80025e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_ConfigChannel+0x330>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0e9b      	lsrs	r3, r3, #26
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	e014      	b.n	8002632 <HAL_ADC_ConfigChannel+0x35a>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8002616:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800261c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002624:	2320      	movs	r3, #32
 8002626:	e004      	b.n	8002632 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002628:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800262c:	fab3 f383 	clz	r3, r3
 8002630:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002632:	429a      	cmp	r2, r3
 8002634:	d106      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2200      	movs	r2, #0
 800263c:	2102      	movs	r1, #2
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff fa12 	bl	8001a68 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2103      	movs	r1, #3
 800264a:	4618      	mov	r0, r3
 800264c:	f7ff f9f6 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 8002650:	4603      	mov	r3, r0
 8002652:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <HAL_ADC_ConfigChannel+0x398>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2103      	movs	r1, #3
 8002660:	4618      	mov	r0, r3
 8002662:	f7ff f9eb 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 8002666:	4603      	mov	r3, r0
 8002668:	0e9b      	lsrs	r3, r3, #26
 800266a:	f003 021f 	and.w	r2, r3, #31
 800266e:	e017      	b.n	80026a0 <HAL_ADC_ConfigChannel+0x3c8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2103      	movs	r1, #3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff f9e0 	bl	8001a3c <LL_ADC_GetOffsetChannel>
 800267c:	4603      	mov	r3, r0
 800267e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002682:	fa93 f3a3 	rbit	r3, r3
 8002686:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 800268c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002692:	2320      	movs	r3, #32
 8002694:	e003      	b.n	800269e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002696:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002698:	fab3 f383 	clz	r3, r3
 800269c:	b2db      	uxtb	r3, r3
 800269e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d105      	bne.n	80026b8 <HAL_ADC_ConfigChannel+0x3e0>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	f003 031f 	and.w	r3, r3, #31
 80026b6:	e011      	b.n	80026dc <HAL_ADC_ConfigChannel+0x404>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c0:	fa93 f3a3 	rbit	r3, r3
 80026c4:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80026c6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80026c8:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80026ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d101      	bne.n	80026d4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80026d0:	2320      	movs	r3, #32
 80026d2:	e003      	b.n	80026dc <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80026d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026dc:	429a      	cmp	r2, r3
 80026de:	d106      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2200      	movs	r2, #0
 80026e6:	2103      	movs	r1, #3
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff f9bd 	bl	8001a68 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7ff fae6 	bl	8001cc4 <LL_ADC_IsEnabled>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	f040 8140 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6818      	ldr	r0, [r3, #0]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	6819      	ldr	r1, [r3, #0]
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	461a      	mov	r2, r3
 800270e:	f7ff fa31 	bl	8001b74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	4a8f      	ldr	r2, [pc, #572]	@ (8002954 <HAL_ADC_ConfigChannel+0x67c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	f040 8131 	bne.w	8002980 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x46e>
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	0e9b      	lsrs	r3, r3, #26
 8002734:	3301      	adds	r3, #1
 8002736:	f003 031f 	and.w	r3, r3, #31
 800273a:	2b09      	cmp	r3, #9
 800273c:	bf94      	ite	ls
 800273e:	2301      	movls	r3, #1
 8002740:	2300      	movhi	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	e019      	b.n	800277a <HAL_ADC_ConfigChannel+0x4a2>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800274e:	fa93 f3a3 	rbit	r3, r3
 8002752:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800275e:	2320      	movs	r3, #32
 8002760:	e003      	b.n	800276a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	2b09      	cmp	r3, #9
 8002772:	bf94      	ite	ls
 8002774:	2301      	movls	r3, #1
 8002776:	2300      	movhi	r3, #0
 8002778:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800277a:	2b00      	cmp	r3, #0
 800277c:	d079      	beq.n	8002872 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4c2>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	0e9b      	lsrs	r3, r3, #26
 8002790:	3301      	adds	r3, #1
 8002792:	069b      	lsls	r3, r3, #26
 8002794:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002798:	e015      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x4ee>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80027a2:	fa93 f3a3 	rbit	r3, r3
 80027a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80027a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027aa:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80027ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80027b2:	2320      	movs	r3, #32
 80027b4:	e003      	b.n	80027be <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80027b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80027b8:	fab3 f383 	clz	r3, r3
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x50e>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	0e9b      	lsrs	r3, r3, #26
 80027d8:	3301      	adds	r3, #1
 80027da:	f003 031f 	and.w	r3, r3, #31
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f303 	lsl.w	r3, r1, r3
 80027e4:	e017      	b.n	8002816 <HAL_ADC_ConfigChannel+0x53e>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ee:	fa93 f3a3 	rbit	r3, r3
 80027f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80027f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80027f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80027fe:	2320      	movs	r3, #32
 8002800:	e003      	b.n	800280a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002804:	fab3 f383 	clz	r3, r3
 8002808:	b2db      	uxtb	r3, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	2101      	movs	r1, #1
 8002812:	fa01 f303 	lsl.w	r3, r1, r3
 8002816:	ea42 0103 	orr.w	r1, r2, r3
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x564>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	0e9b      	lsrs	r3, r3, #26
 800282c:	3301      	adds	r3, #1
 800282e:	f003 021f 	and.w	r2, r3, #31
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	e018      	b.n	800286e <HAL_ADC_ConfigChannel+0x596>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002844:	fa93 f3a3 	rbit	r3, r3
 8002848:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002854:	2320      	movs	r3, #32
 8002856:	e003      	b.n	8002860 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800285a:	fab3 f383 	clz	r3, r3
 800285e:	b2db      	uxtb	r3, r3
 8002860:	3301      	adds	r3, #1
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	4613      	mov	r3, r2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	4413      	add	r3, r2
 800286c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286e:	430b      	orrs	r3, r1
 8002870:	e081      	b.n	8002976 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5b6>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	0e9b      	lsrs	r3, r3, #26
 8002884:	3301      	adds	r3, #1
 8002886:	069b      	lsls	r3, r3, #26
 8002888:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800288c:	e015      	b.n	80028ba <HAL_ADC_ConfigChannel+0x5e2>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002896:	fa93 f3a3 	rbit	r3, r3
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80028a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80028a6:	2320      	movs	r3, #32
 80028a8:	e003      	b.n	80028b2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80028aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028ac:	fab3 f383 	clz	r3, r3
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	069b      	lsls	r3, r3, #26
 80028b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HAL_ADC_ConfigChannel+0x602>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	f003 031f 	and.w	r3, r3, #31
 80028d2:	2101      	movs	r1, #1
 80028d4:	fa01 f303 	lsl.w	r3, r1, r3
 80028d8:	e017      	b.n	800290a <HAL_ADC_ConfigChannel+0x632>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	61bb      	str	r3, [r7, #24]
  return result;
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80028f2:	2320      	movs	r3, #32
 80028f4:	e003      	b.n	80028fe <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	3301      	adds	r3, #1
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2101      	movs	r1, #1
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	ea42 0103 	orr.w	r1, r2, r3
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10d      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x65e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	0e9b      	lsrs	r3, r3, #26
 8002920:	3301      	adds	r3, #1
 8002922:	f003 021f 	and.w	r2, r3, #31
 8002926:	4613      	mov	r3, r2
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4413      	add	r3, r2
 800292c:	3b1e      	subs	r3, #30
 800292e:	051b      	lsls	r3, r3, #20
 8002930:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002934:	e01e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x69c>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	fa93 f3a3 	rbit	r3, r3
 8002942:	60fb      	str	r3, [r7, #12]
  return result;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800294e:	2320      	movs	r3, #32
 8002950:	e006      	b.n	8002960 <HAL_ADC_ConfigChannel+0x688>
 8002952:	bf00      	nop
 8002954:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	fab3 f383 	clz	r3, r3
 800295e:	b2db      	uxtb	r3, r3
 8002960:	3301      	adds	r3, #1
 8002962:	f003 021f 	and.w	r2, r3, #31
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	3b1e      	subs	r3, #30
 800296e:	051b      	lsls	r3, r3, #20
 8002970:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002974:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800297a:	4619      	mov	r1, r3
 800297c:	f7ff f8ce 	bl	8001b1c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	4b44      	ldr	r3, [pc, #272]	@ (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002986:	4013      	ands	r3, r2
 8002988:	2b00      	cmp	r3, #0
 800298a:	d07a      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800298c:	4843      	ldr	r0, [pc, #268]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 800298e:	f7ff f823 	bl	80019d8 <LL_ADC_GetCommonPathInternalCh>
 8002992:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a41      	ldr	r2, [pc, #260]	@ (8002aa0 <HAL_ADC_ConfigChannel+0x7c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d12c      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d126      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a3c      	ldr	r2, [pc, #240]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_ADC_ConfigChannel+0x6e8>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3b      	ldr	r2, [pc, #236]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7d0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d15d      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80029c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80029c8:	4619      	mov	r1, r3
 80029ca:	4834      	ldr	r0, [pc, #208]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 80029cc:	f7fe fff1 	bl	80019b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029d0:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <HAL_ADC_ConfigChannel+0x7d4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	099b      	lsrs	r3, r3, #6
 80029d6:	4a36      	ldr	r2, [pc, #216]	@ (8002ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	099b      	lsrs	r3, r3, #6
 80029de:	1c5a      	adds	r2, r3, #1
 80029e0:	4613      	mov	r3, r2
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	4413      	add	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029ea:	e002      	b.n	80029f2 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3b01      	subs	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f9      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029f8:	e040      	b.n	8002a7c <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a2d      	ldr	r2, [pc, #180]	@ (8002ab4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d118      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d112      	bne.n	8002a36 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a23      	ldr	r2, [pc, #140]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x74c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a22      	ldr	r2, [pc, #136]	@ (8002aa8 <HAL_ADC_ConfigChannel+0x7d0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d12d      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a24:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	481b      	ldr	r0, [pc, #108]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a30:	f7fe ffbf 	bl	80019b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a34:	e024      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab8 <HAL_ADC_ConfigChannel+0x7e0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d120      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a44:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11a      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d115      	bne.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002a5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002a5e:	4619      	mov	r1, r3
 8002a60:	480e      	ldr	r0, [pc, #56]	@ (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 8002a62:	f7fe ffa6 	bl	80019b2 <LL_ADC_SetCommonPathInternalCh>
 8002a66:	e00c      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a6c:	f043 0220 	orr.w	r2, r3, #32
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002a7a:	e002      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a7c:	bf00      	nop
 8002a7e:	e000      	b.n	8002a82 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a80:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a8a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	37d8      	adds	r7, #216	@ 0xd8
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	80080000 	.word	0x80080000
 8002a9c:	50040300 	.word	0x50040300
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	50040000 	.word	0x50040000
 8002aa8:	50040200 	.word	0x50040200
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	053e2d63 	.word	0x053e2d63
 8002ab4:	cb840000 	.word	0xcb840000
 8002ab8:	80000001 	.word	0x80000001

08002abc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7ff f944 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 8002ad8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f965 	bl	8001dae <LL_ADC_INJ_IsConversionOngoing>
 8002ae4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d103      	bne.n	8002af4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8098 	beq.w	8002c24 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d02a      	beq.n	8002b58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	7e5b      	ldrb	r3, [r3, #25]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d126      	bne.n	8002b58 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7e1b      	ldrb	r3, [r3, #24]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d122      	bne.n	8002b58 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b16:	e014      	b.n	8002b42 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4a45      	ldr	r2, [pc, #276]	@ (8002c30 <ADC_ConversionStop+0x174>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d90d      	bls.n	8002b3c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b24:	f043 0210 	orr.w	r2, r3, #16
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e074      	b.n	8002c26 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4c:	2b40      	cmp	r3, #64	@ 0x40
 8002b4e:	d1e3      	bne.n	8002b18 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2240      	movs	r2, #64	@ 0x40
 8002b56:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d014      	beq.n	8002b88 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff f8fc 	bl	8001d60 <LL_ADC_REG_IsConversionOngoing>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00c      	beq.n	8002b88 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f8b9 	bl	8001cea <LL_ADC_IsDisableOngoing>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f8d8 	bl	8001d38 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d014      	beq.n	8002bb8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f90b 	bl	8001dae <LL_ADC_INJ_IsConversionOngoing>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00c      	beq.n	8002bb8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff f8a1 	bl	8001cea <LL_ADC_IsDisableOngoing>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f8e7 	bl	8001d86 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d005      	beq.n	8002bca <ADC_ConversionStop+0x10e>
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d105      	bne.n	8002bd0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002bc4:	230c      	movs	r3, #12
 8002bc6:	617b      	str	r3, [r7, #20]
        break;
 8002bc8:	e005      	b.n	8002bd6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	617b      	str	r3, [r7, #20]
        break;
 8002bce:	e002      	b.n	8002bd6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bd0:	2304      	movs	r3, #4
 8002bd2:	617b      	str	r3, [r7, #20]
        break;
 8002bd4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bd6:	f7fe fea9 	bl	800192c <HAL_GetTick>
 8002bda:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bdc:	e01b      	b.n	8002c16 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bde:	f7fe fea5 	bl	800192c <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d914      	bls.n	8002c16 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689a      	ldr	r2, [r3, #8]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00d      	beq.n	8002c16 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bfe:	f043 0210 	orr.w	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f043 0201 	orr.w	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e007      	b.n	8002c26 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1dc      	bne.n	8002bde <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	a33fffff 	.word	0xa33fffff

08002c34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f83d 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d169      	bne.n	8002d24 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689a      	ldr	r2, [r3, #8]
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <ADC_Enable+0xfc>)
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d00d      	beq.n	8002c7a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c62:	f043 0210 	orr.w	r2, r3, #16
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	f043 0201 	orr.w	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e055      	b.n	8002d26 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fff8 	bl	8001c74 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c84:	482b      	ldr	r0, [pc, #172]	@ (8002d34 <ADC_Enable+0x100>)
 8002c86:	f7fe fea7 	bl	80019d8 <LL_ADC_GetCommonPathInternalCh>
 8002c8a:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d013      	beq.n	8002cbc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <ADC_Enable+0x104>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	4a28      	ldr	r2, [pc, #160]	@ (8002d3c <ADC_Enable+0x108>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	099b      	lsrs	r3, r3, #6
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cae:	e002      	b.n	8002cb6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1f9      	bne.n	8002cb0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe fe36 	bl	800192c <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc2:	e028      	b.n	8002d16 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fffb 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d104      	bne.n	8002cde <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe ffcb 	bl	8001c74 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cde:	f7fe fe25 	bl	800192c <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d914      	bls.n	8002d16 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d00d      	beq.n	8002d16 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfe:	f043 0210 	orr.w	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e007      	b.n	8002d26 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0301 	and.w	r3, r3, #1
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d1cf      	bne.n	8002cc4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	8000003f 	.word	0x8000003f
 8002d34:	50040300 	.word	0x50040300
 8002d38:	20000000 	.word	0x20000000
 8002d3c:	053e2d63 	.word	0x053e2d63

08002d40 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe ffcc 	bl	8001cea <LL_ADC_IsDisableOngoing>
 8002d52:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ffb3 	bl	8001cc4 <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d047      	beq.n	8002df4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d144      	bne.n	8002df4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030d 	and.w	r3, r3, #13
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d10c      	bne.n	8002d92 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe ff8d 	bl	8001c9c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2203      	movs	r2, #3
 8002d88:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d8a:	f7fe fdcf 	bl	800192c <HAL_GetTick>
 8002d8e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d90:	e029      	b.n	8002de6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d96:	f043 0210 	orr.w	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	f043 0201 	orr.w	r2, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e023      	b.n	8002df6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002dae:	f7fe fdbd 	bl	800192c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d914      	bls.n	8002de6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dce:	f043 0210 	orr.w	r2, r3, #16
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dda:	f043 0201 	orr.w	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e007      	b.n	8002df6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 0301 	and.w	r3, r3, #1
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1dc      	bne.n	8002dae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e10:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d14b      	bne.n	8002eb0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e1c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d021      	beq.n	8002e76 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe fe31 	bl	8001a9e <LL_ADC_REG_IsTriggerSourceSWStart>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d032      	beq.n	8002ea8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d12b      	bne.n	8002ea8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11f      	bne.n	8002ea8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	655a      	str	r2, [r3, #84]	@ 0x54
 8002e74:	e018      	b.n	8002ea8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d111      	bne.n	8002ea8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d105      	bne.n	8002ea8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ea0:	f043 0201 	orr.w	r2, r3, #1
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7fe fa63 	bl	8001374 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eae:	e00e      	b.n	8002ece <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7ff fa00 	bl	80022c2 <HAL_ADC_ErrorCallback>
}
 8002ec2:	e004      	b.n	8002ece <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
}
 8002ece:	bf00      	nop
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b084      	sub	sp, #16
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff f9e2 	bl	80022ae <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f10:	f043 0204 	orr.w	r2, r3, #4
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff f9d2 	bl	80022c2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f1e:	bf00      	nop
 8002f20:	3710      	adds	r7, #16
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <LL_ADC_IsEnabled>:
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <LL_ADC_IsEnabled+0x18>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e000      	b.n	8002f40 <LL_ADC_IsEnabled+0x1a>
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <LL_ADC_REG_IsConversionOngoing>:
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 0304 	and.w	r3, r3, #4
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d101      	bne.n	8002f64 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
	...

08002f74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002f74:	b590      	push	{r4, r7, lr}
 8002f76:	b09f      	sub	sp, #124	@ 0x7c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e093      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a47      	ldr	r2, [pc, #284]	@ (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d102      	bne.n	8002fb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002fac:	4b46      	ldr	r3, [pc, #280]	@ (80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	e001      	b.n	8002fb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10b      	bne.n	8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e072      	b.n	80030ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ffb8 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 8002fdc:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ffb2 	bl	8002f4c <LL_ADC_REG_IsConversionOngoing>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d154      	bne.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002fee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d151      	bne.n	8003098 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ff4:	4b35      	ldr	r3, [pc, #212]	@ (80030cc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ff6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d02c      	beq.n	800305a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003012:	035b      	lsls	r3, r3, #13
 8003014:	430b      	orrs	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800301a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800301c:	4829      	ldr	r0, [pc, #164]	@ (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800301e:	f7ff ff82 	bl	8002f26 <LL_ADC_IsEnabled>
 8003022:	4604      	mov	r4, r0
 8003024:	4828      	ldr	r0, [pc, #160]	@ (80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003026:	f7ff ff7e 	bl	8002f26 <LL_ADC_IsEnabled>
 800302a:	4603      	mov	r3, r0
 800302c:	431c      	orrs	r4, r3
 800302e:	4828      	ldr	r0, [pc, #160]	@ (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003030:	f7ff ff79 	bl	8002f26 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	4323      	orrs	r3, r4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d137      	bne.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800303c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003044:	f023 030f 	bic.w	r3, r3, #15
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	6811      	ldr	r1, [r2, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	6892      	ldr	r2, [r2, #8]
 8003050:	430a      	orrs	r2, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003056:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003058:	e028      	b.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800305a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003064:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003066:	4817      	ldr	r0, [pc, #92]	@ (80030c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003068:	f7ff ff5d 	bl	8002f26 <LL_ADC_IsEnabled>
 800306c:	4604      	mov	r4, r0
 800306e:	4816      	ldr	r0, [pc, #88]	@ (80030c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003070:	f7ff ff59 	bl	8002f26 <LL_ADC_IsEnabled>
 8003074:	4603      	mov	r3, r0
 8003076:	431c      	orrs	r4, r3
 8003078:	4815      	ldr	r0, [pc, #84]	@ (80030d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800307a:	f7ff ff54 	bl	8002f26 <LL_ADC_IsEnabled>
 800307e:	4603      	mov	r3, r0
 8003080:	4323      	orrs	r3, r4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d112      	bne.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800308e:	f023 030f 	bic.w	r3, r3, #15
 8003092:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003094:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003096:	e009      	b.n	80030ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	f043 0220 	orr.w	r2, r3, #32
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80030aa:	e000      	b.n	80030ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80030ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80030b6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	377c      	adds	r7, #124	@ 0x7c
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop
 80030c4:	50040000 	.word	0x50040000
 80030c8:	50040100 	.word	0x50040100
 80030cc:	50040300 	.word	0x50040300
 80030d0:	50040200 	.word	0x50040200

080030d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030f0:	4013      	ands	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003100:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003106:	4a04      	ldr	r2, [pc, #16]	@ (8003118 <__NVIC_SetPriorityGrouping+0x44>)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	60d3      	str	r3, [r2, #12]
}
 800310c:	bf00      	nop
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003120:	4b04      	ldr	r3, [pc, #16]	@ (8003134 <__NVIC_GetPriorityGrouping+0x18>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	0a1b      	lsrs	r3, r3, #8
 8003126:	f003 0307 	and.w	r3, r3, #7
}
 800312a:	4618      	mov	r0, r3
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	2b00      	cmp	r3, #0
 8003148:	db0b      	blt.n	8003162 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4907      	ldr	r1, [pc, #28]	@ (8003170 <__NVIC_EnableIRQ+0x38>)
 8003152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	2001      	movs	r0, #1
 800315a:	fa00 f202 	lsl.w	r2, r0, r2
 800315e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	e000e100 	.word	0xe000e100

08003174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	4603      	mov	r3, r0
 800317c:	6039      	str	r1, [r7, #0]
 800317e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003184:	2b00      	cmp	r3, #0
 8003186:	db0a      	blt.n	800319e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	490c      	ldr	r1, [pc, #48]	@ (80031c0 <__NVIC_SetPriority+0x4c>)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	0112      	lsls	r2, r2, #4
 8003194:	b2d2      	uxtb	r2, r2
 8003196:	440b      	add	r3, r1
 8003198:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800319c:	e00a      	b.n	80031b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	@ (80031c4 <__NVIC_SetPriority+0x50>)
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	f003 030f 	and.w	r3, r3, #15
 80031aa:	3b04      	subs	r3, #4
 80031ac:	0112      	lsls	r2, r2, #4
 80031ae:	b2d2      	uxtb	r2, r2
 80031b0:	440b      	add	r3, r1
 80031b2:	761a      	strb	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	e000e100 	.word	0xe000e100
 80031c4:	e000ed00 	.word	0xe000ed00

080031c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b089      	sub	sp, #36	@ 0x24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f1c3 0307 	rsb	r3, r3, #7
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	bf28      	it	cs
 80031e6:	2304      	movcs	r3, #4
 80031e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	3304      	adds	r3, #4
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d902      	bls.n	80031f8 <NVIC_EncodePriority+0x30>
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	3b03      	subs	r3, #3
 80031f6:	e000      	b.n	80031fa <NVIC_EncodePriority+0x32>
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43da      	mvns	r2, r3
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	401a      	ands	r2, r3
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003210:	f04f 31ff 	mov.w	r1, #4294967295
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	fa01 f303 	lsl.w	r3, r1, r3
 800321a:	43d9      	mvns	r1, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003220:	4313      	orrs	r3, r2
         );
}
 8003222:	4618      	mov	r0, r3
 8003224:	3724      	adds	r7, #36	@ 0x24
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
	...

08003230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003240:	d301      	bcc.n	8003246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003242:	2301      	movs	r3, #1
 8003244:	e00f      	b.n	8003266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <SysTick_Config+0x40>)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3b01      	subs	r3, #1
 800324c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800324e:	210f      	movs	r1, #15
 8003250:	f04f 30ff 	mov.w	r0, #4294967295
 8003254:	f7ff ff8e 	bl	8003174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003258:	4b05      	ldr	r3, [pc, #20]	@ (8003270 <SysTick_Config+0x40>)
 800325a:	2200      	movs	r2, #0
 800325c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800325e:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <SysTick_Config+0x40>)
 8003260:	2207      	movs	r2, #7
 8003262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	e000e010 	.word	0xe000e010

08003274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff ff29 	bl	80030d4 <__NVIC_SetPriorityGrouping>
}
 8003282:	bf00      	nop
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b086      	sub	sp, #24
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003298:	2300      	movs	r3, #0
 800329a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800329c:	f7ff ff3e 	bl	800311c <__NVIC_GetPriorityGrouping>
 80032a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	6978      	ldr	r0, [r7, #20]
 80032a8:	f7ff ff8e 	bl	80031c8 <NVIC_EncodePriority>
 80032ac:	4602      	mov	r2, r0
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	4611      	mov	r1, r2
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff5d 	bl	8003174 <__NVIC_SetPriority>
}
 80032ba:	bf00      	nop
 80032bc:	3718      	adds	r7, #24
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	4603      	mov	r3, r0
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff31 	bl	8003138 <__NVIC_EnableIRQ>
}
 80032d6:	bf00      	nop
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f7ff ffa2 	bl	8003230 <SysTick_Config>
 80032ec:	4603      	mov	r3, r0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e098      	b.n	800343c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	461a      	mov	r2, r3
 8003310:	4b4d      	ldr	r3, [pc, #308]	@ (8003448 <HAL_DMA_Init+0x150>)
 8003312:	429a      	cmp	r2, r3
 8003314:	d80f      	bhi.n	8003336 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	4b4b      	ldr	r3, [pc, #300]	@ (800344c <HAL_DMA_Init+0x154>)
 800331e:	4413      	add	r3, r2
 8003320:	4a4b      	ldr	r2, [pc, #300]	@ (8003450 <HAL_DMA_Init+0x158>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	091b      	lsrs	r3, r3, #4
 8003328:	009a      	lsls	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a48      	ldr	r2, [pc, #288]	@ (8003454 <HAL_DMA_Init+0x15c>)
 8003332:	641a      	str	r2, [r3, #64]	@ 0x40
 8003334:	e00e      	b.n	8003354 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	461a      	mov	r2, r3
 800333c:	4b46      	ldr	r3, [pc, #280]	@ (8003458 <HAL_DMA_Init+0x160>)
 800333e:	4413      	add	r3, r2
 8003340:	4a43      	ldr	r2, [pc, #268]	@ (8003450 <HAL_DMA_Init+0x158>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	009a      	lsls	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a42      	ldr	r2, [pc, #264]	@ (800345c <HAL_DMA_Init+0x164>)
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800336a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003378:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	4313      	orrs	r3, r2
 800339c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ae:	d039      	beq.n	8003424 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	4a27      	ldr	r2, [pc, #156]	@ (8003454 <HAL_DMA_Init+0x15c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d11a      	bne.n	80033f0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033ba:	4b29      	ldr	r3, [pc, #164]	@ (8003460 <HAL_DMA_Init+0x168>)
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033c2:	f003 031c 	and.w	r3, r3, #28
 80033c6:	210f      	movs	r1, #15
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	4924      	ldr	r1, [pc, #144]	@ (8003460 <HAL_DMA_Init+0x168>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033d4:	4b22      	ldr	r3, [pc, #136]	@ (8003460 <HAL_DMA_Init+0x168>)
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033e0:	f003 031c 	and.w	r3, r3, #28
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	491d      	ldr	r1, [pc, #116]	@ (8003460 <HAL_DMA_Init+0x168>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	600b      	str	r3, [r1, #0]
 80033ee:	e019      	b.n	8003424 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003464 <HAL_DMA_Init+0x16c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033f8:	f003 031c 	and.w	r3, r3, #28
 80033fc:	210f      	movs	r1, #15
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	4917      	ldr	r1, [pc, #92]	@ (8003464 <HAL_DMA_Init+0x16c>)
 8003406:	4013      	ands	r3, r2
 8003408:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800340a:	4b16      	ldr	r3, [pc, #88]	@ (8003464 <HAL_DMA_Init+0x16c>)
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6859      	ldr	r1, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	4911      	ldr	r1, [pc, #68]	@ (8003464 <HAL_DMA_Init+0x16c>)
 8003420:	4313      	orrs	r3, r2
 8003422:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40020407 	.word	0x40020407
 800344c:	bffdfff8 	.word	0xbffdfff8
 8003450:	cccccccd 	.word	0xcccccccd
 8003454:	40020000 	.word	0x40020000
 8003458:	bffdfbf8 	.word	0xbffdfbf8
 800345c:	40020400 	.word	0x40020400
 8003460:	400200a8 	.word	0x400200a8
 8003464:	400204a8 	.word	0x400204a8

08003468 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Start_IT+0x20>
 8003484:	2302      	movs	r3, #2
 8003486:	e04b      	b.n	8003520 <HAL_DMA_Start_IT+0xb8>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d13a      	bne.n	8003512 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2202      	movs	r2, #2
 80034a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f91e 	bl	8003702 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f042 020e 	orr.w	r2, r2, #14
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0204 	bic.w	r2, r2, #4
 80034ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 020a 	orr.w	r2, r2, #10
 80034fe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800351a:	2302      	movs	r3, #2
 800351c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800351e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d008      	beq.n	8003552 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2204      	movs	r2, #4
 8003544:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e022      	b.n	8003598 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 020e 	bic.w	r2, r2, #14
 8003560:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f022 0201 	bic.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003576:	f003 021c 	and.w	r2, r3, #28
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800357e:	2101      	movs	r1, #1
 8003580:	fa01 f202 	lsl.w	r2, r1, r2
 8003584:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003596:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035c0:	f003 031c 	and.w	r3, r3, #28
 80035c4:	2204      	movs	r2, #4
 80035c6:	409a      	lsls	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4013      	ands	r3, r2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d026      	beq.n	800361e <HAL_DMA_IRQHandler+0x7a>
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0304 	and.w	r3, r3, #4
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d021      	beq.n	800361e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0204 	bic.w	r2, r2, #4
 80035f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fc:	f003 021c 	and.w	r2, r3, #28
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003604:	2104      	movs	r1, #4
 8003606:	fa01 f202 	lsl.w	r2, r1, r2
 800360a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	2b00      	cmp	r3, #0
 8003612:	d071      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800361c:	e06c      	b.n	80036f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	f003 031c 	and.w	r3, r3, #28
 8003626:	2202      	movs	r2, #2
 8003628:	409a      	lsls	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	4013      	ands	r3, r2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d02e      	beq.n	8003690 <HAL_DMA_IRQHandler+0xec>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d029      	beq.n	8003690 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10b      	bne.n	8003662 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 020a 	bic.w	r2, r2, #10
 8003658:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2201      	movs	r2, #1
 800365e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f003 021c 	and.w	r2, r3, #28
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	2102      	movs	r1, #2
 8003670:	fa01 f202 	lsl.w	r2, r1, r2
 8003674:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003682:	2b00      	cmp	r3, #0
 8003684:	d038      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800368e:	e033      	b.n	80036f8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003694:	f003 031c 	and.w	r3, r3, #28
 8003698:	2208      	movs	r2, #8
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d02a      	beq.n	80036fa <HAL_DMA_IRQHandler+0x156>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d025      	beq.n	80036fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 020e 	bic.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c2:	f003 021c 	and.w	r2, r3, #28
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	2101      	movs	r1, #1
 80036cc:	fa01 f202 	lsl.w	r2, r1, r2
 80036d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
}
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003702:	b480      	push	{r7}
 8003704:	b085      	sub	sp, #20
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	607a      	str	r2, [r7, #4]
 800370e:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003714:	f003 021c 	and.w	r2, r3, #28
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	2101      	movs	r1, #1
 800371e:	fa01 f202 	lsl.w	r2, r1, r2
 8003722:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	683a      	ldr	r2, [r7, #0]
 800372a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	2b10      	cmp	r3, #16
 8003732:	d108      	bne.n	8003746 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68ba      	ldr	r2, [r7, #8]
 8003742:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003744:	e007      	b.n	8003756 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003772:	e17f      	b.n	8003a74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	2101      	movs	r1, #1
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	fa01 f303 	lsl.w	r3, r1, r3
 8003780:	4013      	ands	r3, r2
 8003782:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f000 8171 	beq.w	8003a6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d005      	beq.n	80037a4 <HAL_GPIO_Init+0x40>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f003 0303 	and.w	r3, r3, #3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d130      	bne.n	8003806 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2203      	movs	r2, #3
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4013      	ands	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037da:	2201      	movs	r2, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	f003 0201 	and.w	r2, r3, #1
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 0303 	and.w	r3, r3, #3
 800380e:	2b03      	cmp	r3, #3
 8003810:	d118      	bne.n	8003844 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003818:	2201      	movs	r2, #1
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	43db      	mvns	r3, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4013      	ands	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	08db      	lsrs	r3, r3, #3
 800382e:	f003 0201 	and.w	r2, r3, #1
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	693a      	ldr	r2, [r7, #16]
 8003842:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 0303 	and.w	r3, r3, #3
 800384c:	2b03      	cmp	r3, #3
 800384e:	d017      	beq.n	8003880 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4013      	ands	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4313      	orrs	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0303 	and.w	r3, r3, #3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d123      	bne.n	80038d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	08da      	lsrs	r2, r3, #3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3208      	adds	r2, #8
 8003894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003898:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	220f      	movs	r2, #15
 80038a4:	fa02 f303 	lsl.w	r3, r2, r3
 80038a8:	43db      	mvns	r3, r3
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	4013      	ands	r3, r2
 80038ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	08da      	lsrs	r2, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3208      	adds	r2, #8
 80038ce:	6939      	ldr	r1, [r7, #16]
 80038d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	2203      	movs	r2, #3
 80038e0:	fa02 f303 	lsl.w	r3, r2, r3
 80038e4:	43db      	mvns	r3, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4013      	ands	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f003 0203 	and.w	r2, r3, #3
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 80ac 	beq.w	8003a6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003916:	4b5f      	ldr	r3, [pc, #380]	@ (8003a94 <HAL_GPIO_Init+0x330>)
 8003918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391a:	4a5e      	ldr	r2, [pc, #376]	@ (8003a94 <HAL_GPIO_Init+0x330>)
 800391c:	f043 0301 	orr.w	r3, r3, #1
 8003920:	6613      	str	r3, [r2, #96]	@ 0x60
 8003922:	4b5c      	ldr	r3, [pc, #368]	@ (8003a94 <HAL_GPIO_Init+0x330>)
 8003924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	60bb      	str	r3, [r7, #8]
 800392c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800392e:	4a5a      	ldr	r2, [pc, #360]	@ (8003a98 <HAL_GPIO_Init+0x334>)
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	089b      	lsrs	r3, r3, #2
 8003934:	3302      	adds	r3, #2
 8003936:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800393a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	220f      	movs	r2, #15
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003958:	d025      	beq.n	80039a6 <HAL_GPIO_Init+0x242>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a9c <HAL_GPIO_Init+0x338>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d01f      	beq.n	80039a2 <HAL_GPIO_Init+0x23e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a4e      	ldr	r2, [pc, #312]	@ (8003aa0 <HAL_GPIO_Init+0x33c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d019      	beq.n	800399e <HAL_GPIO_Init+0x23a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a4d      	ldr	r2, [pc, #308]	@ (8003aa4 <HAL_GPIO_Init+0x340>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d013      	beq.n	800399a <HAL_GPIO_Init+0x236>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa8 <HAL_GPIO_Init+0x344>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d00d      	beq.n	8003996 <HAL_GPIO_Init+0x232>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a4b      	ldr	r2, [pc, #300]	@ (8003aac <HAL_GPIO_Init+0x348>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d007      	beq.n	8003992 <HAL_GPIO_Init+0x22e>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a4a      	ldr	r2, [pc, #296]	@ (8003ab0 <HAL_GPIO_Init+0x34c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d101      	bne.n	800398e <HAL_GPIO_Init+0x22a>
 800398a:	2306      	movs	r3, #6
 800398c:	e00c      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 800398e:	2307      	movs	r3, #7
 8003990:	e00a      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 8003992:	2305      	movs	r3, #5
 8003994:	e008      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 8003996:	2304      	movs	r3, #4
 8003998:	e006      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 800399a:	2303      	movs	r3, #3
 800399c:	e004      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 800399e:	2302      	movs	r3, #2
 80039a0:	e002      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 80039a2:	2301      	movs	r3, #1
 80039a4:	e000      	b.n	80039a8 <HAL_GPIO_Init+0x244>
 80039a6:	2300      	movs	r3, #0
 80039a8:	697a      	ldr	r2, [r7, #20]
 80039aa:	f002 0203 	and.w	r2, r2, #3
 80039ae:	0092      	lsls	r2, r2, #2
 80039b0:	4093      	lsls	r3, r2
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80039b8:	4937      	ldr	r1, [pc, #220]	@ (8003a98 <HAL_GPIO_Init+0x334>)
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	089b      	lsrs	r3, r3, #2
 80039be:	3302      	adds	r3, #2
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039c6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43db      	mvns	r3, r3
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	4013      	ands	r3, r2
 80039d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039ea:	4a32      	ldr	r2, [pc, #200]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039f0:	4b30      	ldr	r3, [pc, #192]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003a0c:	693a      	ldr	r2, [r7, #16]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a14:	4a27      	ldr	r2, [pc, #156]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a1a:	4b26      	ldr	r3, [pc, #152]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4013      	ands	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a44:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	4013      	ands	r3, r2
 8003a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a68:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <HAL_GPIO_Init+0x350>)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	3301      	adds	r3, #1
 8003a72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f47f ae78 	bne.w	8003774 <HAL_GPIO_Init+0x10>
  }
}
 8003a84:	bf00      	nop
 8003a86:	bf00      	nop
 8003a88:	371c      	adds	r7, #28
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	40021000 	.word	0x40021000
 8003a98:	40010000 	.word	0x40010000
 8003a9c:	48000400 	.word	0x48000400
 8003aa0:	48000800 	.word	0x48000800
 8003aa4:	48000c00 	.word	0x48000c00
 8003aa8:	48001000 	.word	0x48001000
 8003aac:	48001400 	.word	0x48001400
 8003ab0:	48001800 	.word	0x48001800
 8003ab4:	40010400 	.word	0x40010400

08003ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	807b      	strh	r3, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ac8:	787b      	ldrb	r3, [r7, #1]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ad4:	e002      	b.n	8003adc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003afa:	887a      	ldrh	r2, [r7, #2]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4013      	ands	r3, r2
 8003b00:	041a      	lsls	r2, r3, #16
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	43d9      	mvns	r1, r3
 8003b06:	887b      	ldrh	r3, [r7, #2]
 8003b08:	400b      	ands	r3, r1
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	619a      	str	r2, [r3, #24]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b20:	4b04      	ldr	r3, [pc, #16]	@ (8003b34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	40007000 	.word	0x40007000

08003b38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b46:	d130      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b48:	4b23      	ldr	r3, [pc, #140]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b54:	d038      	beq.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b56:	4b20      	ldr	r3, [pc, #128]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b66:	4b1d      	ldr	r3, [pc, #116]	@ (8003bdc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2232      	movs	r2, #50	@ 0x32
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	4a1b      	ldr	r2, [pc, #108]	@ (8003be0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7c:	e002      	b.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b84:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b90:	d102      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f2      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b98:	4b0f      	ldr	r3, [pc, #60]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	d110      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e00f      	b.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003baa:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb6:	d007      	beq.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bb8:	4b07      	ldr	r3, [pc, #28]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bc0:	4a05      	ldr	r2, [pc, #20]	@ (8003bd8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bc6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40007000 	.word	0x40007000
 8003bdc:	20000000 	.word	0x20000000
 8003be0:	431bde83 	.word	0x431bde83

08003be4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e3ca      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bf6:	4b97      	ldr	r3, [pc, #604]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c00:	4b94      	ldr	r3, [pc, #592]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80e4 	beq.w	8003de0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <HAL_RCC_OscConfig+0x4a>
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b0c      	cmp	r3, #12
 8003c22:	f040 808b 	bne.w	8003d3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	f040 8087 	bne.w	8003d3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c2e:	4b89      	ldr	r3, [pc, #548]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <HAL_RCC_OscConfig+0x62>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e3a2      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a1a      	ldr	r2, [r3, #32]
 8003c4a:	4b82      	ldr	r3, [pc, #520]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0308 	and.w	r3, r3, #8
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d004      	beq.n	8003c60 <HAL_RCC_OscConfig+0x7c>
 8003c56:	4b7f      	ldr	r3, [pc, #508]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c5e:	e005      	b.n	8003c6c <HAL_RCC_OscConfig+0x88>
 8003c60:	4b7c      	ldr	r3, [pc, #496]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d223      	bcs.n	8003cb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fd55 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e383      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c84:	4b73      	ldr	r3, [pc, #460]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a72      	ldr	r2, [pc, #456]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c8a:	f043 0308 	orr.w	r3, r3, #8
 8003c8e:	6013      	str	r3, [r2, #0]
 8003c90:	4b70      	ldr	r3, [pc, #448]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	496d      	ldr	r1, [pc, #436]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ca2:	4b6c      	ldr	r3, [pc, #432]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	021b      	lsls	r3, r3, #8
 8003cb0:	4968      	ldr	r1, [pc, #416]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	604b      	str	r3, [r1, #4]
 8003cb6:	e025      	b.n	8003d04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cb8:	4b66      	ldr	r3, [pc, #408]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a65      	ldr	r2, [pc, #404]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	f043 0308 	orr.w	r3, r3, #8
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	4b63      	ldr	r3, [pc, #396]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4960      	ldr	r1, [pc, #384]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cd6:	4b5f      	ldr	r3, [pc, #380]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	021b      	lsls	r3, r3, #8
 8003ce4:	495b      	ldr	r1, [pc, #364]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fd15 	bl	8004724 <RCC_SetFlashLatencyFromMSIRange>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d001      	beq.n	8003d04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e343      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d04:	f000 fc4a 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b52      	ldr	r3, [pc, #328]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	091b      	lsrs	r3, r3, #4
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	4950      	ldr	r1, [pc, #320]	@ (8003e58 <HAL_RCC_OscConfig+0x274>)
 8003d16:	5ccb      	ldrb	r3, [r1, r3]
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	4a4e      	ldr	r2, [pc, #312]	@ (8003e5c <HAL_RCC_OscConfig+0x278>)
 8003d22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d24:	4b4e      	ldr	r3, [pc, #312]	@ (8003e60 <HAL_RCC_OscConfig+0x27c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fd fdaf 	bl	800188c <HAL_InitTick>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d052      	beq.n	8003dde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	e327      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d032      	beq.n	8003daa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d44:	4b43      	ldr	r3, [pc, #268]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a42      	ldr	r2, [pc, #264]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d4a:	f043 0301 	orr.w	r3, r3, #1
 8003d4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fdec 	bl	800192c <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d58:	f7fd fde8 	bl	800192c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e310      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d0f0      	beq.n	8003d58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d76:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a36      	ldr	r2, [pc, #216]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d7c:	f043 0308 	orr.w	r3, r3, #8
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	4b34      	ldr	r3, [pc, #208]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	4931      	ldr	r1, [pc, #196]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d94:	4b2f      	ldr	r3, [pc, #188]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	492c      	ldr	r1, [pc, #176]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	604b      	str	r3, [r1, #4]
 8003da8:	e01a      	b.n	8003de0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003daa:	4b2a      	ldr	r3, [pc, #168]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a29      	ldr	r2, [pc, #164]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003db0:	f023 0301 	bic.w	r3, r3, #1
 8003db4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003db6:	f7fd fdb9 	bl	800192c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dbc:	e008      	b.n	8003dd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fdb5 	bl	800192c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e2dd      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003dd0:	4b20      	ldr	r3, [pc, #128]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1f0      	bne.n	8003dbe <HAL_RCC_OscConfig+0x1da>
 8003ddc:	e000      	b.n	8003de0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003dde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d074      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d005      	beq.n	8003dfe <HAL_RCC_OscConfig+0x21a>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	2b0c      	cmp	r3, #12
 8003df6:	d10e      	bne.n	8003e16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b03      	cmp	r3, #3
 8003dfc:	d10b      	bne.n	8003e16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dfe:	4b15      	ldr	r3, [pc, #84]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d064      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2f0>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d160      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e2ba      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1e:	d106      	bne.n	8003e2e <HAL_RCC_OscConfig+0x24a>
 8003e20:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a0b      	ldr	r2, [pc, #44]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e2a:	6013      	str	r3, [r2, #0]
 8003e2c:	e026      	b.n	8003e7c <HAL_RCC_OscConfig+0x298>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e36:	d115      	bne.n	8003e64 <HAL_RCC_OscConfig+0x280>
 8003e38:	4b06      	ldr	r3, [pc, #24]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a05      	ldr	r2, [pc, #20]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e3e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b03      	ldr	r3, [pc, #12]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a02      	ldr	r2, [pc, #8]	@ (8003e54 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e4e:	6013      	str	r3, [r2, #0]
 8003e50:	e014      	b.n	8003e7c <HAL_RCC_OscConfig+0x298>
 8003e52:	bf00      	nop
 8003e54:	40021000 	.word	0x40021000
 8003e58:	0800a1a8 	.word	0x0800a1a8
 8003e5c:	20000000 	.word	0x20000000
 8003e60:	20000004 	.word	0x20000004
 8003e64:	4ba0      	ldr	r3, [pc, #640]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a9f      	ldr	r2, [pc, #636]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	4b9d      	ldr	r3, [pc, #628]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a9c      	ldr	r2, [pc, #624]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd fd52 	bl	800192c <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fd4e 	bl	800192c <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	@ 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e276      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	4b92      	ldr	r3, [pc, #584]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d0f0      	beq.n	8003e8c <HAL_RCC_OscConfig+0x2a8>
 8003eaa:	e014      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd fd3e 	bl	800192c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fd fd3a 	bl	800192c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e262      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ec6:	4b88      	ldr	r3, [pc, #544]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f0      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x2d0>
 8003ed2:	e000      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d060      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x310>
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	2b0c      	cmp	r3, #12
 8003eec:	d119      	bne.n	8003f22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d116      	bne.n	8003f22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ef4:	4b7c      	ldr	r3, [pc, #496]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d005      	beq.n	8003f0c <HAL_RCC_OscConfig+0x328>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d101      	bne.n	8003f0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e23f      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b76      	ldr	r3, [pc, #472]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	061b      	lsls	r3, r3, #24
 8003f1a:	4973      	ldr	r1, [pc, #460]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f20:	e040      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d023      	beq.n	8003f72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f2a:	4b6f      	ldr	r3, [pc, #444]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a6e      	ldr	r2, [pc, #440]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd fcf9 	bl	800192c <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd fcf5 	bl	800192c <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e21d      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f50:	4b65      	ldr	r3, [pc, #404]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b62      	ldr	r3, [pc, #392]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	061b      	lsls	r3, r3, #24
 8003f6a:	495f      	ldr	r1, [pc, #380]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	604b      	str	r3, [r1, #4]
 8003f70:	e018      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b5d      	ldr	r3, [pc, #372]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a5c      	ldr	r2, [pc, #368]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f7e:	f7fd fcd5 	bl	800192c <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f86:	f7fd fcd1 	bl	800192c <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e1f9      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f98:	4b53      	ldr	r3, [pc, #332]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d03c      	beq.n	800402a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01c      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb8:	4b4b      	ldr	r3, [pc, #300]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbe:	4a4a      	ldr	r2, [pc, #296]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc8:	f7fd fcb0 	bl	800192c <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd0:	f7fd fcac 	bl	800192c <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e1d4      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fe2:	4b41      	ldr	r3, [pc, #260]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0ef      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x3ec>
 8003ff0:	e01b      	b.n	800402a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff2:	4b3d      	ldr	r3, [pc, #244]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ff8:	4a3b      	ldr	r2, [pc, #236]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	f023 0301 	bic.w	r3, r3, #1
 8003ffe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fd fc93 	bl	800192c <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400a:	f7fd fc8f 	bl	800192c <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e1b7      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800401c:	4b32      	ldr	r3, [pc, #200]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 800401e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ef      	bne.n	800400a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0304 	and.w	r3, r3, #4
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80a6 	beq.w	8004184 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004038:	2300      	movs	r3, #0
 800403a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800403c:	4b2a      	ldr	r3, [pc, #168]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 800403e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004040:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10d      	bne.n	8004064 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004048:	4b27      	ldr	r3, [pc, #156]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 800404a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404c:	4a26      	ldr	r2, [pc, #152]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 800404e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004052:	6593      	str	r3, [r2, #88]	@ 0x58
 8004054:	4b24      	ldr	r3, [pc, #144]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 8004056:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004060:	2301      	movs	r3, #1
 8004062:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004064:	4b21      	ldr	r3, [pc, #132]	@ (80040ec <HAL_RCC_OscConfig+0x508>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800406c:	2b00      	cmp	r3, #0
 800406e:	d118      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004070:	4b1e      	ldr	r3, [pc, #120]	@ (80040ec <HAL_RCC_OscConfig+0x508>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <HAL_RCC_OscConfig+0x508>)
 8004076:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800407a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800407c:	f7fd fc56 	bl	800192c <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004084:	f7fd fc52 	bl	800192c <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e17a      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <HAL_RCC_OscConfig+0x508>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d108      	bne.n	80040bc <HAL_RCC_OscConfig+0x4d8>
 80040aa:	4b0f      	ldr	r3, [pc, #60]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b0:	4a0d      	ldr	r2, [pc, #52]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040b2:	f043 0301 	orr.w	r3, r3, #1
 80040b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ba:	e029      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d115      	bne.n	80040f0 <HAL_RCC_OscConfig+0x50c>
 80040c4:	4b08      	ldr	r3, [pc, #32]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	4a07      	ldr	r2, [pc, #28]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040cc:	f043 0304 	orr.w	r3, r3, #4
 80040d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d4:	4b04      	ldr	r3, [pc, #16]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	4a03      	ldr	r2, [pc, #12]	@ (80040e8 <HAL_RCC_OscConfig+0x504>)
 80040dc:	f043 0301 	orr.w	r3, r3, #1
 80040e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e4:	e014      	b.n	8004110 <HAL_RCC_OscConfig+0x52c>
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
 80040f0:	4b9c      	ldr	r3, [pc, #624]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f6:	4a9b      	ldr	r2, [pc, #620]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80040f8:	f023 0301 	bic.w	r3, r3, #1
 80040fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004100:	4b98      	ldr	r3, [pc, #608]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004106:	4a97      	ldr	r2, [pc, #604]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d016      	beq.n	8004146 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004118:	f7fd fc08 	bl	800192c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fd fc04 	bl	800192c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e12a      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004136:	4b8b      	ldr	r3, [pc, #556]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0ed      	beq.n	8004120 <HAL_RCC_OscConfig+0x53c>
 8004144:	e015      	b.n	8004172 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd fbf1 	bl	800192c <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800414c:	e00a      	b.n	8004164 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414e:	f7fd fbed 	bl	800192c <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800415c:	4293      	cmp	r3, r2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e113      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004164:	4b7f      	ldr	r3, [pc, #508]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1ed      	bne.n	800414e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004172:	7ffb      	ldrb	r3, [r7, #31]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d105      	bne.n	8004184 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004178:	4b7a      	ldr	r3, [pc, #488]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	4a79      	ldr	r2, [pc, #484]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 800417e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004182:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004188:	2b00      	cmp	r3, #0
 800418a:	f000 80fe 	beq.w	800438a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	2b02      	cmp	r3, #2
 8004194:	f040 80d0 	bne.w	8004338 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004198:	4b72      	ldr	r3, [pc, #456]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f003 0203 	and.w	r2, r3, #3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d130      	bne.n	800420e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	3b01      	subs	r3, #1
 80041b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d127      	bne.n	800420e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d11f      	bne.n	800420e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80041d8:	2a07      	cmp	r2, #7
 80041da:	bf14      	ite	ne
 80041dc:	2201      	movne	r2, #1
 80041de:	2200      	moveq	r2, #0
 80041e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d113      	bne.n	800420e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	085b      	lsrs	r3, r3, #1
 80041f2:	3b01      	subs	r3, #1
 80041f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d109      	bne.n	800420e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	085b      	lsrs	r3, r3, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420a:	429a      	cmp	r2, r3
 800420c:	d06e      	beq.n	80042ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	2b0c      	cmp	r3, #12
 8004212:	d069      	beq.n	80042e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004214:	4b53      	ldr	r3, [pc, #332]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004220:	4b50      	ldr	r3, [pc, #320]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0ad      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004230:	4b4c      	ldr	r3, [pc, #304]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a4b      	ldr	r2, [pc, #300]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004236:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800423a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800423c:	f7fd fb76 	bl	800192c <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd fb72 	bl	800192c <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e09a      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004256:	4b43      	ldr	r3, [pc, #268]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1f0      	bne.n	8004244 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004262:	4b40      	ldr	r3, [pc, #256]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	4b40      	ldr	r3, [pc, #256]	@ (8004368 <HAL_RCC_OscConfig+0x784>)
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004272:	3a01      	subs	r2, #1
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	4311      	orrs	r1, r2
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800427c:	0212      	lsls	r2, r2, #8
 800427e:	4311      	orrs	r1, r2
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004284:	0852      	lsrs	r2, r2, #1
 8004286:	3a01      	subs	r2, #1
 8004288:	0552      	lsls	r2, r2, #21
 800428a:	4311      	orrs	r1, r2
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004290:	0852      	lsrs	r2, r2, #1
 8004292:	3a01      	subs	r2, #1
 8004294:	0652      	lsls	r2, r2, #25
 8004296:	4311      	orrs	r1, r2
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800429c:	0912      	lsrs	r2, r2, #4
 800429e:	0452      	lsls	r2, r2, #17
 80042a0:	430a      	orrs	r2, r1
 80042a2:	4930      	ldr	r1, [pc, #192]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042b4:	4b2b      	ldr	r3, [pc, #172]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042c0:	f7fd fb34 	bl	800192c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c6:	e008      	b.n	80042da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042c8:	f7fd fb30 	bl	800192c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e058      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042da:	4b22      	ldr	r3, [pc, #136]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0f0      	beq.n	80042c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042e6:	e050      	b.n	800438a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e04f      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d148      	bne.n	800438a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80042f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a19      	ldr	r2, [pc, #100]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 80042fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004302:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004304:	4b17      	ldr	r3, [pc, #92]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4a16      	ldr	r2, [pc, #88]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 800430a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800430e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004310:	f7fd fb0c 	bl	800192c <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004318:	f7fd fb08 	bl	800192c <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b02      	cmp	r3, #2
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e030      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432a:	4b0e      	ldr	r3, [pc, #56]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d0f0      	beq.n	8004318 <HAL_RCC_OscConfig+0x734>
 8004336:	e028      	b.n	800438a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d023      	beq.n	8004386 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800433e:	4b09      	ldr	r3, [pc, #36]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a08      	ldr	r2, [pc, #32]	@ (8004364 <HAL_RCC_OscConfig+0x780>)
 8004344:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434a:	f7fd faef 	bl	800192c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	e00c      	b.n	800436c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fd faeb 	bl	800192c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d905      	bls.n	800436c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e013      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
 8004364:	40021000 	.word	0x40021000
 8004368:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800436c:	4b09      	ldr	r3, [pc, #36]	@ (8004394 <HAL_RCC_OscConfig+0x7b0>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1ec      	bne.n	8004352 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <HAL_RCC_OscConfig+0x7b0>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4905      	ldr	r1, [pc, #20]	@ (8004394 <HAL_RCC_OscConfig+0x7b0>)
 800437e:	4b06      	ldr	r3, [pc, #24]	@ (8004398 <HAL_RCC_OscConfig+0x7b4>)
 8004380:	4013      	ands	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
 8004384:	e001      	b.n	800438a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	feeefffc 	.word	0xfeeefffc

0800439c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d101      	bne.n	80043b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0e7      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043b0:	4b75      	ldr	r3, [pc, #468]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d910      	bls.n	80043e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b72      	ldr	r3, [pc, #456]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 0207 	bic.w	r2, r3, #7
 80043c6:	4970      	ldr	r1, [pc, #448]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ce:	4b6e      	ldr	r3, [pc, #440]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0307 	and.w	r3, r3, #7
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0cf      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0302 	and.w	r3, r3, #2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d010      	beq.n	800440e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	4b66      	ldr	r3, [pc, #408]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d908      	bls.n	800440e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043fc:	4b63      	ldr	r3, [pc, #396]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4960      	ldr	r1, [pc, #384]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0301 	and.w	r3, r3, #1
 8004416:	2b00      	cmp	r3, #0
 8004418:	d04c      	beq.n	80044b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2b03      	cmp	r3, #3
 8004420:	d107      	bne.n	8004432 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	4b5a      	ldr	r3, [pc, #360]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d121      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0a6      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d107      	bne.n	800444a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800443a:	4b54      	ldr	r3, [pc, #336]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d115      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e09a      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d107      	bne.n	8004462 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004452:	4b4e      	ldr	r3, [pc, #312]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e08e      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004462:	4b4a      	ldr	r3, [pc, #296]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e086      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004472:	4b46      	ldr	r3, [pc, #280]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0203 	bic.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	4943      	ldr	r1, [pc, #268]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004480:	4313      	orrs	r3, r2
 8004482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004484:	f7fd fa52 	bl	800192c <HAL_GetTick>
 8004488:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448a:	e00a      	b.n	80044a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800448c:	f7fd fa4e 	bl	800192c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e06e      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a2:	4b3a      	ldr	r3, [pc, #232]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 020c 	and.w	r2, r3, #12
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d1eb      	bne.n	800448c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d010      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	4b31      	ldr	r3, [pc, #196]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d208      	bcs.n	80044e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044d0:	4b2e      	ldr	r3, [pc, #184]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	492b      	ldr	r1, [pc, #172]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044e2:	4b29      	ldr	r3, [pc, #164]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	683a      	ldr	r2, [r7, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d210      	bcs.n	8004512 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f0:	4b25      	ldr	r3, [pc, #148]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f023 0207 	bic.w	r2, r3, #7
 80044f8:	4923      	ldr	r1, [pc, #140]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004500:	4b21      	ldr	r3, [pc, #132]	@ (8004588 <HAL_RCC_ClockConfig+0x1ec>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0307 	and.w	r3, r3, #7
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d001      	beq.n	8004512 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e036      	b.n	8004580 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0304 	and.w	r3, r3, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d008      	beq.n	8004530 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800451e:	4b1b      	ldr	r3, [pc, #108]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	4918      	ldr	r1, [pc, #96]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	2b00      	cmp	r3, #0
 800453a:	d009      	beq.n	8004550 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800453c:	4b13      	ldr	r3, [pc, #76]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	00db      	lsls	r3, r3, #3
 800454a:	4910      	ldr	r1, [pc, #64]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 800454c:	4313      	orrs	r3, r2
 800454e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004550:	f000 f824 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8004554:	4602      	mov	r2, r0
 8004556:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <HAL_RCC_ClockConfig+0x1f0>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	490b      	ldr	r1, [pc, #44]	@ (8004590 <HAL_RCC_ClockConfig+0x1f4>)
 8004562:	5ccb      	ldrb	r3, [r1, r3]
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
 800456c:	4a09      	ldr	r2, [pc, #36]	@ (8004594 <HAL_RCC_ClockConfig+0x1f8>)
 800456e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004570:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <HAL_RCC_ClockConfig+0x1fc>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f7fd f989 	bl	800188c <HAL_InitTick>
 800457a:	4603      	mov	r3, r0
 800457c:	72fb      	strb	r3, [r7, #11]

  return status;
 800457e:	7afb      	ldrb	r3, [r7, #11]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3710      	adds	r7, #16
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}
 8004588:	40022000 	.word	0x40022000
 800458c:	40021000 	.word	0x40021000
 8004590:	0800a1a8 	.word	0x0800a1a8
 8004594:	20000000 	.word	0x20000000
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	@ 0x24
 80045a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	61fb      	str	r3, [r7, #28]
 80045a6:	2300      	movs	r3, #0
 80045a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045aa:	4b3e      	ldr	r3, [pc, #248]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f003 030c 	and.w	r3, r3, #12
 80045b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045b4:	4b3b      	ldr	r3, [pc, #236]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0c      	cmp	r3, #12
 80045c8:	d121      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d11e      	bne.n	800460e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045d0:	4b34      	ldr	r3, [pc, #208]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80045dc:	4b31      	ldr	r3, [pc, #196]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80045e2:	0a1b      	lsrs	r3, r3, #8
 80045e4:	f003 030f 	and.w	r3, r3, #15
 80045e8:	61fb      	str	r3, [r7, #28]
 80045ea:	e005      	b.n	80045f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80045ec:	4b2d      	ldr	r3, [pc, #180]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	091b      	lsrs	r3, r3, #4
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80045f8:	4a2b      	ldr	r2, [pc, #172]	@ (80046a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004600:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10d      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460c:	e00a      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	2b04      	cmp	r3, #4
 8004612:	d102      	bne.n	800461a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004614:	4b25      	ldr	r3, [pc, #148]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004616:	61bb      	str	r3, [r7, #24]
 8004618:	e004      	b.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d101      	bne.n	8004624 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004620:	4b23      	ldr	r3, [pc, #140]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004622:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	2b0c      	cmp	r3, #12
 8004628:	d134      	bne.n	8004694 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800462a:	4b1e      	ldr	r3, [pc, #120]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f003 0303 	and.w	r3, r3, #3
 8004632:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d003      	beq.n	8004642 <HAL_RCC_GetSysClockFreq+0xa6>
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	2b03      	cmp	r3, #3
 800463e:	d003      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0xac>
 8004640:	e005      	b.n	800464e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004642:	4b1a      	ldr	r3, [pc, #104]	@ (80046ac <HAL_RCC_GetSysClockFreq+0x110>)
 8004644:	617b      	str	r3, [r7, #20]
      break;
 8004646:	e005      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004648:	4b19      	ldr	r3, [pc, #100]	@ (80046b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800464a:	617b      	str	r3, [r7, #20]
      break;
 800464c:	e002      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	617b      	str	r3, [r7, #20]
      break;
 8004652:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004654:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	091b      	lsrs	r3, r3, #4
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	3301      	adds	r3, #1
 8004660:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004662:	4b10      	ldr	r3, [pc, #64]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	0a1b      	lsrs	r3, r3, #8
 8004668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	fb03 f202 	mul.w	r2, r3, r2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800467a:	4b0a      	ldr	r3, [pc, #40]	@ (80046a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	0e5b      	lsrs	r3, r3, #25
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	3301      	adds	r3, #1
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004694:	69bb      	ldr	r3, [r7, #24]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3724      	adds	r7, #36	@ 0x24
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800a1c0 	.word	0x0800a1c0
 80046ac:	00f42400 	.word	0x00f42400
 80046b0:	007a1200 	.word	0x007a1200

080046b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046b8:	4b03      	ldr	r3, [pc, #12]	@ (80046c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046ba:	681b      	ldr	r3, [r3, #0]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	20000000 	.word	0x20000000

080046cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046d0:	f7ff fff0 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 80046d4:	4602      	mov	r2, r0
 80046d6:	4b06      	ldr	r3, [pc, #24]	@ (80046f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	0a1b      	lsrs	r3, r3, #8
 80046dc:	f003 0307 	and.w	r3, r3, #7
 80046e0:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80046e2:	5ccb      	ldrb	r3, [r1, r3]
 80046e4:	f003 031f 	and.w	r3, r3, #31
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40021000 	.word	0x40021000
 80046f4:	0800a1b8 	.word	0x0800a1b8

080046f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80046fc:	f7ff ffda 	bl	80046b4 <HAL_RCC_GetHCLKFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0adb      	lsrs	r3, r3, #11
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	0800a1b8 	.word	0x0800a1b8

08004724 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004730:	4b2a      	ldr	r3, [pc, #168]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800473c:	f7ff f9ee 	bl	8003b1c <HAL_PWREx_GetVoltageRange>
 8004740:	6178      	str	r0, [r7, #20]
 8004742:	e014      	b.n	800476e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004748:	4a24      	ldr	r2, [pc, #144]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800474a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004750:	4b22      	ldr	r3, [pc, #136]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800475c:	f7ff f9de 	bl	8003b1c <HAL_PWREx_GetVoltageRange>
 8004760:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004762:	4b1e      	ldr	r3, [pc, #120]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004766:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004768:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800476c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004774:	d10b      	bne.n	800478e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2b80      	cmp	r3, #128	@ 0x80
 800477a:	d919      	bls.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004780:	d902      	bls.n	8004788 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004782:	2302      	movs	r3, #2
 8004784:	613b      	str	r3, [r7, #16]
 8004786:	e013      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004788:	2301      	movs	r3, #1
 800478a:	613b      	str	r3, [r7, #16]
 800478c:	e010      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b80      	cmp	r3, #128	@ 0x80
 8004792:	d902      	bls.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004794:	2303      	movs	r3, #3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	e00a      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2b80      	cmp	r3, #128	@ 0x80
 800479e:	d102      	bne.n	80047a6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047a0:	2302      	movs	r3, #2
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	e004      	b.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2b70      	cmp	r3, #112	@ 0x70
 80047aa:	d101      	bne.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047ac:	2301      	movs	r3, #1
 80047ae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047b0:	4b0b      	ldr	r3, [pc, #44]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f023 0207 	bic.w	r2, r3, #7
 80047b8:	4909      	ldr	r1, [pc, #36]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047c0:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d001      	beq.n	80047d2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e000      	b.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3718      	adds	r7, #24
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40021000 	.word	0x40021000
 80047e0:	40022000 	.word	0x40022000

080047e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ec:	2300      	movs	r3, #0
 80047ee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047f0:	2300      	movs	r3, #0
 80047f2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d041      	beq.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004804:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004808:	d02a      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800480a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800480e:	d824      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004810:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004814:	d008      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800481a:	d81e      	bhi.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004820:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004824:	d010      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004826:	e018      	b.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004828:	4b86      	ldr	r3, [pc, #536]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a85      	ldr	r2, [pc, #532]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004832:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004834:	e015      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f000 fabb 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 8004842:	4603      	mov	r3, r0
 8004844:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004846:	e00c      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3320      	adds	r3, #32
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f000 fba6 	bl	8004fa0 <RCCEx_PLLSAI2_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004858:	e003      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	74fb      	strb	r3, [r7, #19]
      break;
 800485e:	e000      	b.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004860:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004862:	7cfb      	ldrb	r3, [r7, #19]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004868:	4b76      	ldr	r3, [pc, #472]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800486a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800486e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004876:	4973      	ldr	r1, [pc, #460]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004878:	4313      	orrs	r3, r2
 800487a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800487e:	e001      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004880:	7cfb      	ldrb	r3, [r7, #19]
 8004882:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d041      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004894:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004898:	d02a      	beq.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800489a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800489e:	d824      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048a4:	d008      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048aa:	d81e      	bhi.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048b4:	d010      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048b6:	e018      	b.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048b8:	4b62      	ldr	r3, [pc, #392]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	4a61      	ldr	r2, [pc, #388]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048c2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048c4:	e015      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3304      	adds	r3, #4
 80048ca:	2100      	movs	r1, #0
 80048cc:	4618      	mov	r0, r3
 80048ce:	f000 fa73 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 80048d2:	4603      	mov	r3, r0
 80048d4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048d6:	e00c      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3320      	adds	r3, #32
 80048dc:	2100      	movs	r1, #0
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 fb5e 	bl	8004fa0 <RCCEx_PLLSAI2_Config>
 80048e4:	4603      	mov	r3, r0
 80048e6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048e8:	e003      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	74fb      	strb	r3, [r7, #19]
      break;
 80048ee:	e000      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80048f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10b      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80048f8:	4b52      	ldr	r3, [pc, #328]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004906:	494f      	ldr	r1, [pc, #316]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	4313      	orrs	r3, r2
 800490a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800490e:	e001      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004910:	7cfb      	ldrb	r3, [r7, #19]
 8004912:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491c:	2b00      	cmp	r3, #0
 800491e:	f000 80a0 	beq.w	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004922:	2300      	movs	r3, #0
 8004924:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004926:	4b47      	ldr	r3, [pc, #284]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800492a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d101      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004932:	2301      	movs	r3, #1
 8004934:	e000      	b.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004936:	2300      	movs	r3, #0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00d      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800493c:	4b41      	ldr	r3, [pc, #260]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800493e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004940:	4a40      	ldr	r2, [pc, #256]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004942:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004946:	6593      	str	r3, [r2, #88]	@ 0x58
 8004948:	4b3e      	ldr	r3, [pc, #248]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800494a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800494c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004950:	60bb      	str	r3, [r7, #8]
 8004952:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004954:	2301      	movs	r3, #1
 8004956:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004958:	4b3b      	ldr	r3, [pc, #236]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a3a      	ldr	r2, [pc, #232]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800495e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004962:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004964:	f7fc ffe2 	bl	800192c <HAL_GetTick>
 8004968:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800496a:	e009      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800496c:	f7fc ffde 	bl	800192c <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d902      	bls.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	74fb      	strb	r3, [r7, #19]
        break;
 800497e:	e005      	b.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004980:	4b31      	ldr	r3, [pc, #196]	@ (8004a48 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d0ef      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800498c:	7cfb      	ldrb	r3, [r7, #19]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d15c      	bne.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004992:	4b2c      	ldr	r3, [pc, #176]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004998:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01f      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d019      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049b0:	4b24      	ldr	r3, [pc, #144]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c2:	4a20      	ldr	r2, [pc, #128]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80049dc:	4a19      	ldr	r2, [pc, #100]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d016      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ee:	f7fc ff9d 	bl	800192c <HAL_GetTick>
 80049f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f4:	e00b      	b.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f6:	f7fc ff99 	bl	800192c <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d902      	bls.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	74fb      	strb	r3, [r7, #19]
            break;
 8004a0c:	e006      	b.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a14:	f003 0302 	and.w	r3, r3, #2
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0ec      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a22:	4b08      	ldr	r3, [pc, #32]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a28:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a32:	4904      	ldr	r1, [pc, #16]	@ (8004a44 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a3a:	e009      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a3c:	7cfb      	ldrb	r3, [r7, #19]
 8004a3e:	74bb      	strb	r3, [r7, #18]
 8004a40:	e006      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a42:	bf00      	nop
 8004a44:	40021000 	.word	0x40021000
 8004a48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a50:	7c7b      	ldrb	r3, [r7, #17]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d105      	bne.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a56:	4b9e      	ldr	r3, [pc, #632]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a5a:	4a9d      	ldr	r2, [pc, #628]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a60:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a6e:	4b98      	ldr	r3, [pc, #608]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a74:	f023 0203 	bic.w	r2, r3, #3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7c:	4994      	ldr	r1, [pc, #592]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00a      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004a90:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a96:	f023 020c 	bic.w	r2, r3, #12
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a9e:	498c      	ldr	r1, [pc, #560]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0304 	and.w	r3, r3, #4
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00a      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ab2:	4b87      	ldr	r3, [pc, #540]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac0:	4983      	ldr	r1, [pc, #524]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0308 	and.w	r3, r3, #8
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00a      	beq.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ad4:	4b7e      	ldr	r3, [pc, #504]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ada:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	497b      	ldr	r1, [pc, #492]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004af6:	4b76      	ldr	r3, [pc, #472]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004afc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b04:	4972      	ldr	r1, [pc, #456]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0320 	and.w	r3, r3, #32
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b18:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b26:	496a      	ldr	r1, [pc, #424]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b3a:	4b65      	ldr	r3, [pc, #404]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b40:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b48:	4961      	ldr	r1, [pc, #388]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b5c:	4b5c      	ldr	r3, [pc, #368]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b62:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b6a:	4959      	ldr	r1, [pc, #356]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b7e:	4b54      	ldr	r3, [pc, #336]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b84:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b8c:	4950      	ldr	r1, [pc, #320]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ba0:	4b4b      	ldr	r3, [pc, #300]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ba6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bae:	4948      	ldr	r1, [pc, #288]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bc8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bd0:	493f      	ldr	r1, [pc, #252]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d028      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004be4:	4b3a      	ldr	r3, [pc, #232]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bf2:	4937      	ldr	r1, [pc, #220]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004bfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c02:	d106      	bne.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c04:	4b32      	ldr	r3, [pc, #200]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c0e:	60d3      	str	r3, [r2, #12]
 8004c10:	e011      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c16:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c1a:	d10c      	bne.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f8c8 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d001      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d028      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c42:	4b23      	ldr	r3, [pc, #140]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c48:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c50:	491f      	ldr	r1, [pc, #124]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c60:	d106      	bne.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c62:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	4a1a      	ldr	r2, [pc, #104]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c68:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6c:	60d3      	str	r3, [r2, #12]
 8004c6e:	e011      	b.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c74:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	2101      	movs	r1, #1
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 f899 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 8004c86:	4603      	mov	r3, r0
 8004c88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c8a:	7cfb      	ldrb	r3, [r7, #19]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004c90:	7cfb      	ldrb	r3, [r7, #19]
 8004c92:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d02b      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ca6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cae:	4908      	ldr	r1, [pc, #32]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004cbe:	d109      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cc0:	4b03      	ldr	r3, [pc, #12]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	4a02      	ldr	r2, [pc, #8]	@ (8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cca:	60d3      	str	r3, [r2, #12]
 8004ccc:	e014      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004cdc:	d10c      	bne.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	3304      	adds	r3, #4
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 f867 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 8004cea:	4603      	mov	r3, r0
 8004cec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004cf4:	7cfb      	ldrb	r3, [r7, #19]
 8004cf6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d02f      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d04:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d0a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d12:	4928      	ldr	r1, [pc, #160]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d14:	4313      	orrs	r3, r2
 8004d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d22:	d10d      	bne.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	2102      	movs	r1, #2
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f000 f844 	bl	8004db8 <RCCEx_PLLSAI1_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d34:	7cfb      	ldrb	r3, [r7, #19]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d014      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d3a:	7cfb      	ldrb	r3, [r7, #19]
 8004d3c:	74bb      	strb	r3, [r7, #18]
 8004d3e:	e011      	b.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d48:	d10c      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	2102      	movs	r1, #2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 f925 	bl	8004fa0 <RCCEx_PLLSAI2_Config>
 8004d56:	4603      	mov	r3, r0
 8004d58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d5a:	7cfb      	ldrb	r3, [r7, #19]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d60:	7cfb      	ldrb	r3, [r7, #19]
 8004d62:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d70:	4b10      	ldr	r3, [pc, #64]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d76:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d7e:	490d      	ldr	r1, [pc, #52]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00b      	beq.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d92:	4b08      	ldr	r3, [pc, #32]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da2:	4904      	ldr	r1, [pc, #16]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004daa:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40021000 	.word	0x40021000

08004db8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dc6:	4b75      	ldr	r3, [pc, #468]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d018      	beq.n	8004e04 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dd2:	4b72      	ldr	r3, [pc, #456]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	f003 0203 	and.w	r2, r3, #3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d10d      	bne.n	8004dfe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
       ||
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004dea:	4b6c      	ldr	r3, [pc, #432]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	1c5a      	adds	r2, r3, #1
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d047      	beq.n	8004e8e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	e044      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d018      	beq.n	8004e3e <RCCEx_PLLSAI1_Config+0x86>
 8004e0c:	2b03      	cmp	r3, #3
 8004e0e:	d825      	bhi.n	8004e5c <RCCEx_PLLSAI1_Config+0xa4>
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d002      	beq.n	8004e1a <RCCEx_PLLSAI1_Config+0x62>
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d009      	beq.n	8004e2c <RCCEx_PLLSAI1_Config+0x74>
 8004e18:	e020      	b.n	8004e5c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e1a:	4b60      	ldr	r3, [pc, #384]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d11d      	bne.n	8004e62 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e2a:	e01a      	b.n	8004e62 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e2c:	4b5b      	ldr	r3, [pc, #364]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d116      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e3c:	e013      	b.n	8004e66 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e3e:	4b57      	ldr	r3, [pc, #348]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10f      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e4a:	4b54      	ldr	r3, [pc, #336]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e5a:	e006      	b.n	8004e6a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e60:	e004      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e62:	bf00      	nop
 8004e64:	e002      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e66:	bf00      	nop
 8004e68:	e000      	b.n	8004e6c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e6a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10d      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e72:	4b4a      	ldr	r3, [pc, #296]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6819      	ldr	r1, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	430b      	orrs	r3, r1
 8004e88:	4944      	ldr	r1, [pc, #272]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d17d      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e94:	4b41      	ldr	r3, [pc, #260]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a40      	ldr	r2, [pc, #256]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea0:	f7fc fd44 	bl	800192c <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ea6:	e009      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea8:	f7fc fd40 	bl	800192c <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d902      	bls.n	8004ebc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eba:	e005      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ebc:	4b37      	ldr	r3, [pc, #220]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d1ef      	bne.n	8004ea8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d160      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d111      	bne.n	8004ef8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ed4:	4b31      	ldr	r3, [pc, #196]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6892      	ldr	r2, [r2, #8]
 8004ee4:	0211      	lsls	r1, r2, #8
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68d2      	ldr	r2, [r2, #12]
 8004eea:	0912      	lsrs	r2, r2, #4
 8004eec:	0452      	lsls	r2, r2, #17
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	492a      	ldr	r1, [pc, #168]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	610b      	str	r3, [r1, #16]
 8004ef6:	e027      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d112      	bne.n	8004f24 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efe:	4b27      	ldr	r3, [pc, #156]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f06:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6892      	ldr	r2, [r2, #8]
 8004f0e:	0211      	lsls	r1, r2, #8
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	6912      	ldr	r2, [r2, #16]
 8004f14:	0852      	lsrs	r2, r2, #1
 8004f16:	3a01      	subs	r2, #1
 8004f18:	0552      	lsls	r2, r2, #21
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	491f      	ldr	r1, [pc, #124]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	610b      	str	r3, [r1, #16]
 8004f22:	e011      	b.n	8004f48 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f24:	4b1d      	ldr	r3, [pc, #116]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6892      	ldr	r2, [r2, #8]
 8004f34:	0211      	lsls	r1, r2, #8
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6952      	ldr	r2, [r2, #20]
 8004f3a:	0852      	lsrs	r2, r2, #1
 8004f3c:	3a01      	subs	r2, #1
 8004f3e:	0652      	lsls	r2, r2, #25
 8004f40:	430a      	orrs	r2, r1
 8004f42:	4916      	ldr	r1, [pc, #88]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f48:	4b14      	ldr	r3, [pc, #80]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a13      	ldr	r2, [pc, #76]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f54:	f7fc fcea 	bl	800192c <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f5a:	e009      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f5c:	f7fc fce6 	bl	800192c <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f6e:	e005      	b.n	8004f7c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f70:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d0ef      	beq.n	8004f5c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004f82:	4b06      	ldr	r3, [pc, #24]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	4904      	ldr	r1, [pc, #16]	@ (8004f9c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3710      	adds	r7, #16
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40021000 	.word	0x40021000

08004fa0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004faa:	2300      	movs	r3, #0
 8004fac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fae:	4b6a      	ldr	r3, [pc, #424]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	f003 0303 	and.w	r3, r3, #3
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d018      	beq.n	8004fec <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fba:	4b67      	ldr	r3, [pc, #412]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0203 	and.w	r2, r3, #3
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d10d      	bne.n	8004fe6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
       ||
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d009      	beq.n	8004fe6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004fd2:	4b61      	ldr	r3, [pc, #388]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	091b      	lsrs	r3, r3, #4
 8004fd8:	f003 0307 	and.w	r3, r3, #7
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	685b      	ldr	r3, [r3, #4]
       ||
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d047      	beq.n	8005076 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	e044      	b.n	8005076 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d018      	beq.n	8005026 <RCCEx_PLLSAI2_Config+0x86>
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d825      	bhi.n	8005044 <RCCEx_PLLSAI2_Config+0xa4>
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d002      	beq.n	8005002 <RCCEx_PLLSAI2_Config+0x62>
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d009      	beq.n	8005014 <RCCEx_PLLSAI2_Config+0x74>
 8005000:	e020      	b.n	8005044 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005002:	4b55      	ldr	r3, [pc, #340]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d11d      	bne.n	800504a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005012:	e01a      	b.n	800504a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005014:	4b50      	ldr	r3, [pc, #320]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d116      	bne.n	800504e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005024:	e013      	b.n	800504e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005026:	4b4c      	ldr	r3, [pc, #304]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005032:	4b49      	ldr	r3, [pc, #292]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005042:	e006      	b.n	8005052 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	73fb      	strb	r3, [r7, #15]
      break;
 8005048:	e004      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504a:	bf00      	nop
 800504c:	e002      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800504e:	bf00      	nop
 8005050:	e000      	b.n	8005054 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005052:	bf00      	nop
    }

    if(status == HAL_OK)
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10d      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800505a:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	3b01      	subs	r3, #1
 800506c:	011b      	lsls	r3, r3, #4
 800506e:	430b      	orrs	r3, r1
 8005070:	4939      	ldr	r1, [pc, #228]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005072:	4313      	orrs	r3, r2
 8005074:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005076:	7bfb      	ldrb	r3, [r7, #15]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d167      	bne.n	800514c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800507c:	4b36      	ldr	r3, [pc, #216]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a35      	ldr	r2, [pc, #212]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005086:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fc fc50 	bl	800192c <HAL_GetTick>
 800508c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800508e:	e009      	b.n	80050a4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005090:	f7fc fc4c 	bl	800192c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d902      	bls.n	80050a4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	73fb      	strb	r3, [r7, #15]
        break;
 80050a2:	e005      	b.n	80050b0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1ef      	bne.n	8005090 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d14a      	bne.n	800514c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d111      	bne.n	80050e0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050bc:	4b26      	ldr	r3, [pc, #152]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050be:	695b      	ldr	r3, [r3, #20]
 80050c0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6892      	ldr	r2, [r2, #8]
 80050cc:	0211      	lsls	r1, r2, #8
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	68d2      	ldr	r2, [r2, #12]
 80050d2:	0912      	lsrs	r2, r2, #4
 80050d4:	0452      	lsls	r2, r2, #17
 80050d6:	430a      	orrs	r2, r1
 80050d8:	491f      	ldr	r1, [pc, #124]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	614b      	str	r3, [r1, #20]
 80050de:	e011      	b.n	8005104 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050e8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6892      	ldr	r2, [r2, #8]
 80050f0:	0211      	lsls	r1, r2, #8
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	6912      	ldr	r2, [r2, #16]
 80050f6:	0852      	lsrs	r2, r2, #1
 80050f8:	3a01      	subs	r2, #1
 80050fa:	0652      	lsls	r2, r2, #25
 80050fc:	430a      	orrs	r2, r1
 80050fe:	4916      	ldr	r1, [pc, #88]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	4313      	orrs	r3, r2
 8005102:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005104:	4b14      	ldr	r3, [pc, #80]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a13      	ldr	r2, [pc, #76]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800510e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005110:	f7fc fc0c 	bl	800192c <HAL_GetTick>
 8005114:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005116:	e009      	b.n	800512c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005118:	f7fc fc08 	bl	800192c <HAL_GetTick>
 800511c:	4602      	mov	r2, r0
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	2b02      	cmp	r3, #2
 8005124:	d902      	bls.n	800512c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	73fb      	strb	r3, [r7, #15]
          break;
 800512a:	e005      	b.n	8005138 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800512c:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d0ef      	beq.n	8005118 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800513e:	4b06      	ldr	r3, [pc, #24]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005140:	695a      	ldr	r2, [r3, #20]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4904      	ldr	r1, [pc, #16]	@ (8005158 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005148:	4313      	orrs	r3, r2
 800514a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40021000 	.word	0x40021000

0800515c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e040      	b.n	80051f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc f9cc 	bl	800151c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2224      	movs	r2, #36	@ 0x24
 8005188:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d002      	beq.n	80051a8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 fb6a 	bl	800587c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f8af 	bl	800530c <UART_SetConfig>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e01b      	b.n	80051f0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e8:	6878      	ldr	r0, [r7, #4]
 80051ea:	f000 fbe9 	bl	80059c0 <UART_CheckIdleState>
 80051ee:	4603      	mov	r3, r0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	@ 0x28
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	603b      	str	r3, [r7, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800520c:	2b20      	cmp	r3, #32
 800520e:	d177      	bne.n	8005300 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d002      	beq.n	800521c <HAL_UART_Transmit+0x24>
 8005216:	88fb      	ldrh	r3, [r7, #6]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e070      	b.n	8005302 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2221      	movs	r2, #33	@ 0x21
 800522c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800522e:	f7fc fb7d 	bl	800192c <HAL_GetTick>
 8005232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	88fa      	ldrh	r2, [r7, #6]
 8005238:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	88fa      	ldrh	r2, [r7, #6]
 8005240:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800524c:	d108      	bne.n	8005260 <HAL_UART_Transmit+0x68>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	61bb      	str	r3, [r7, #24]
 800525e:	e003      	b.n	8005268 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005264:	2300      	movs	r3, #0
 8005266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005268:	e02f      	b.n	80052ca <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2180      	movs	r1, #128	@ 0x80
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 fc4b 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d004      	beq.n	800528a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2220      	movs	r2, #32
 8005284:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e03b      	b.n	8005302 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	881a      	ldrh	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800529c:	b292      	uxth	r2, r2
 800529e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	3302      	adds	r3, #2
 80052a4:	61bb      	str	r3, [r7, #24]
 80052a6:	e007      	b.n	80052b8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	781a      	ldrb	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	3301      	adds	r3, #1
 80052b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052be:	b29b      	uxth	r3, r3
 80052c0:	3b01      	subs	r3, #1
 80052c2:	b29a      	uxth	r2, r3
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052d0:	b29b      	uxth	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d1c9      	bne.n	800526a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	2140      	movs	r1, #64	@ 0x40
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 fc15 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2220      	movs	r2, #32
 80052f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e005      	b.n	8005302 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80052fc:	2300      	movs	r3, #0
 80052fe:	e000      	b.n	8005302 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005300:	2302      	movs	r3, #2
  }
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b08a      	sub	sp, #40	@ 0x28
 8005312:	af00      	add	r7, sp, #0
 8005314:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	431a      	orrs	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	695b      	ldr	r3, [r3, #20]
 800532a:	431a      	orrs	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	4313      	orrs	r3, r2
 8005332:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4ba4      	ldr	r3, [pc, #656]	@ (80055cc <UART_SetConfig+0x2c0>)
 800533c:	4013      	ands	r3, r2
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005344:	430b      	orrs	r3, r1
 8005346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	68da      	ldr	r2, [r3, #12]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a99      	ldr	r2, [pc, #612]	@ (80055d0 <UART_SetConfig+0x2c4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005374:	4313      	orrs	r3, r2
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005388:	430a      	orrs	r2, r1
 800538a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a90      	ldr	r2, [pc, #576]	@ (80055d4 <UART_SetConfig+0x2c8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d126      	bne.n	80053e4 <UART_SetConfig+0xd8>
 8005396:	4b90      	ldr	r3, [pc, #576]	@ (80055d8 <UART_SetConfig+0x2cc>)
 8005398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d81b      	bhi.n	80053dc <UART_SetConfig+0xd0>
 80053a4:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0xa0>)
 80053a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053aa:	bf00      	nop
 80053ac:	080053bd 	.word	0x080053bd
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d5 	.word	0x080053d5
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c2:	e116      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80053c4:	2302      	movs	r3, #2
 80053c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ca:	e112      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053d2:	e10e      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053da:	e10a      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053e2:	e106      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a7c      	ldr	r2, [pc, #496]	@ (80055dc <UART_SetConfig+0x2d0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d138      	bne.n	8005460 <UART_SetConfig+0x154>
 80053ee:	4b7a      	ldr	r3, [pc, #488]	@ (80055d8 <UART_SetConfig+0x2cc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053f4:	f003 030c 	and.w	r3, r3, #12
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d82d      	bhi.n	8005458 <UART_SetConfig+0x14c>
 80053fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005404 <UART_SetConfig+0xf8>)
 80053fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005402:	bf00      	nop
 8005404:	08005439 	.word	0x08005439
 8005408:	08005459 	.word	0x08005459
 800540c:	08005459 	.word	0x08005459
 8005410:	08005459 	.word	0x08005459
 8005414:	08005449 	.word	0x08005449
 8005418:	08005459 	.word	0x08005459
 800541c:	08005459 	.word	0x08005459
 8005420:	08005459 	.word	0x08005459
 8005424:	08005441 	.word	0x08005441
 8005428:	08005459 	.word	0x08005459
 800542c:	08005459 	.word	0x08005459
 8005430:	08005459 	.word	0x08005459
 8005434:	08005451 	.word	0x08005451
 8005438:	2300      	movs	r3, #0
 800543a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800543e:	e0d8      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005440:	2302      	movs	r3, #2
 8005442:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005446:	e0d4      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005448:	2304      	movs	r3, #4
 800544a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800544e:	e0d0      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005450:	2308      	movs	r3, #8
 8005452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005456:	e0cc      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005458:	2310      	movs	r3, #16
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800545e:	e0c8      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5e      	ldr	r2, [pc, #376]	@ (80055e0 <UART_SetConfig+0x2d4>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d125      	bne.n	80054b6 <UART_SetConfig+0x1aa>
 800546a:	4b5b      	ldr	r3, [pc, #364]	@ (80055d8 <UART_SetConfig+0x2cc>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005470:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005474:	2b30      	cmp	r3, #48	@ 0x30
 8005476:	d016      	beq.n	80054a6 <UART_SetConfig+0x19a>
 8005478:	2b30      	cmp	r3, #48	@ 0x30
 800547a:	d818      	bhi.n	80054ae <UART_SetConfig+0x1a2>
 800547c:	2b20      	cmp	r3, #32
 800547e:	d00a      	beq.n	8005496 <UART_SetConfig+0x18a>
 8005480:	2b20      	cmp	r3, #32
 8005482:	d814      	bhi.n	80054ae <UART_SetConfig+0x1a2>
 8005484:	2b00      	cmp	r3, #0
 8005486:	d002      	beq.n	800548e <UART_SetConfig+0x182>
 8005488:	2b10      	cmp	r3, #16
 800548a:	d008      	beq.n	800549e <UART_SetConfig+0x192>
 800548c:	e00f      	b.n	80054ae <UART_SetConfig+0x1a2>
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005494:	e0ad      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005496:	2302      	movs	r3, #2
 8005498:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800549c:	e0a9      	b.n	80055f2 <UART_SetConfig+0x2e6>
 800549e:	2304      	movs	r3, #4
 80054a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054a4:	e0a5      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054a6:	2308      	movs	r3, #8
 80054a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ac:	e0a1      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054ae:	2310      	movs	r3, #16
 80054b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054b4:	e09d      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <UART_SetConfig+0x2d8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d125      	bne.n	800550c <UART_SetConfig+0x200>
 80054c0:	4b45      	ldr	r3, [pc, #276]	@ (80055d8 <UART_SetConfig+0x2cc>)
 80054c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80054cc:	d016      	beq.n	80054fc <UART_SetConfig+0x1f0>
 80054ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80054d0:	d818      	bhi.n	8005504 <UART_SetConfig+0x1f8>
 80054d2:	2b80      	cmp	r3, #128	@ 0x80
 80054d4:	d00a      	beq.n	80054ec <UART_SetConfig+0x1e0>
 80054d6:	2b80      	cmp	r3, #128	@ 0x80
 80054d8:	d814      	bhi.n	8005504 <UART_SetConfig+0x1f8>
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <UART_SetConfig+0x1d8>
 80054de:	2b40      	cmp	r3, #64	@ 0x40
 80054e0:	d008      	beq.n	80054f4 <UART_SetConfig+0x1e8>
 80054e2:	e00f      	b.n	8005504 <UART_SetConfig+0x1f8>
 80054e4:	2300      	movs	r3, #0
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e082      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054ec:	2302      	movs	r3, #2
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054f2:	e07e      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054f4:	2304      	movs	r3, #4
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054fa:	e07a      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80054fc:	2308      	movs	r3, #8
 80054fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005502:	e076      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005504:	2310      	movs	r3, #16
 8005506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800550a:	e072      	b.n	80055f2 <UART_SetConfig+0x2e6>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a35      	ldr	r2, [pc, #212]	@ (80055e8 <UART_SetConfig+0x2dc>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d12a      	bne.n	800556c <UART_SetConfig+0x260>
 8005516:	4b30      	ldr	r3, [pc, #192]	@ (80055d8 <UART_SetConfig+0x2cc>)
 8005518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800551c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005524:	d01a      	beq.n	800555c <UART_SetConfig+0x250>
 8005526:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800552a:	d81b      	bhi.n	8005564 <UART_SetConfig+0x258>
 800552c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005530:	d00c      	beq.n	800554c <UART_SetConfig+0x240>
 8005532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005536:	d815      	bhi.n	8005564 <UART_SetConfig+0x258>
 8005538:	2b00      	cmp	r3, #0
 800553a:	d003      	beq.n	8005544 <UART_SetConfig+0x238>
 800553c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005540:	d008      	beq.n	8005554 <UART_SetConfig+0x248>
 8005542:	e00f      	b.n	8005564 <UART_SetConfig+0x258>
 8005544:	2300      	movs	r3, #0
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554a:	e052      	b.n	80055f2 <UART_SetConfig+0x2e6>
 800554c:	2302      	movs	r3, #2
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005552:	e04e      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005554:	2304      	movs	r3, #4
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555a:	e04a      	b.n	80055f2 <UART_SetConfig+0x2e6>
 800555c:	2308      	movs	r3, #8
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005562:	e046      	b.n	80055f2 <UART_SetConfig+0x2e6>
 8005564:	2310      	movs	r3, #16
 8005566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800556a:	e042      	b.n	80055f2 <UART_SetConfig+0x2e6>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a17      	ldr	r2, [pc, #92]	@ (80055d0 <UART_SetConfig+0x2c4>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d13a      	bne.n	80055ec <UART_SetConfig+0x2e0>
 8005576:	4b18      	ldr	r3, [pc, #96]	@ (80055d8 <UART_SetConfig+0x2cc>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005580:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005584:	d01a      	beq.n	80055bc <UART_SetConfig+0x2b0>
 8005586:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800558a:	d81b      	bhi.n	80055c4 <UART_SetConfig+0x2b8>
 800558c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005590:	d00c      	beq.n	80055ac <UART_SetConfig+0x2a0>
 8005592:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005596:	d815      	bhi.n	80055c4 <UART_SetConfig+0x2b8>
 8005598:	2b00      	cmp	r3, #0
 800559a:	d003      	beq.n	80055a4 <UART_SetConfig+0x298>
 800559c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055a0:	d008      	beq.n	80055b4 <UART_SetConfig+0x2a8>
 80055a2:	e00f      	b.n	80055c4 <UART_SetConfig+0x2b8>
 80055a4:	2300      	movs	r3, #0
 80055a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055aa:	e022      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80055ac:	2302      	movs	r3, #2
 80055ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b2:	e01e      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80055b4:	2304      	movs	r3, #4
 80055b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ba:	e01a      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80055bc:	2308      	movs	r3, #8
 80055be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055c2:	e016      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80055c4:	2310      	movs	r3, #16
 80055c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ca:	e012      	b.n	80055f2 <UART_SetConfig+0x2e6>
 80055cc:	efff69f3 	.word	0xefff69f3
 80055d0:	40008000 	.word	0x40008000
 80055d4:	40013800 	.word	0x40013800
 80055d8:	40021000 	.word	0x40021000
 80055dc:	40004400 	.word	0x40004400
 80055e0:	40004800 	.word	0x40004800
 80055e4:	40004c00 	.word	0x40004c00
 80055e8:	40005000 	.word	0x40005000
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a9f      	ldr	r2, [pc, #636]	@ (8005874 <UART_SetConfig+0x568>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d17a      	bne.n	80056f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80055fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005600:	2b08      	cmp	r3, #8
 8005602:	d824      	bhi.n	800564e <UART_SetConfig+0x342>
 8005604:	a201      	add	r2, pc, #4	@ (adr r2, 800560c <UART_SetConfig+0x300>)
 8005606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800560a:	bf00      	nop
 800560c:	08005631 	.word	0x08005631
 8005610:	0800564f 	.word	0x0800564f
 8005614:	08005639 	.word	0x08005639
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800563f 	.word	0x0800563f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	0800564f 	.word	0x0800564f
 8005628:	0800564f 	.word	0x0800564f
 800562c:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005630:	f7ff f84c 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8005634:	61f8      	str	r0, [r7, #28]
        break;
 8005636:	e010      	b.n	800565a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b8f      	ldr	r3, [pc, #572]	@ (8005878 <UART_SetConfig+0x56c>)
 800563a:	61fb      	str	r3, [r7, #28]
        break;
 800563c:	e00d      	b.n	800565a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fe ffad 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8005642:	61f8      	str	r0, [r7, #28]
        break;
 8005644:	e009      	b.n	800565a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800564a:	61fb      	str	r3, [r7, #28]
        break;
 800564c:	e005      	b.n	800565a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005658:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	f000 80fb 	beq.w	8005858 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	69fa      	ldr	r2, [r7, #28]
 800566e:	429a      	cmp	r2, r3
 8005670:	d305      	bcc.n	800567e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005678:	69fa      	ldr	r2, [r7, #28]
 800567a:	429a      	cmp	r2, r3
 800567c:	d903      	bls.n	8005686 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005684:	e0e8      	b.n	8005858 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	2200      	movs	r2, #0
 800568a:	461c      	mov	r4, r3
 800568c:	4615      	mov	r5, r2
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	022b      	lsls	r3, r5, #8
 8005698:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800569c:	0222      	lsls	r2, r4, #8
 800569e:	68f9      	ldr	r1, [r7, #12]
 80056a0:	6849      	ldr	r1, [r1, #4]
 80056a2:	0849      	lsrs	r1, r1, #1
 80056a4:	2000      	movs	r0, #0
 80056a6:	4688      	mov	r8, r1
 80056a8:	4681      	mov	r9, r0
 80056aa:	eb12 0a08 	adds.w	sl, r2, r8
 80056ae:	eb43 0b09 	adc.w	fp, r3, r9
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	603b      	str	r3, [r7, #0]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056c0:	4650      	mov	r0, sl
 80056c2:	4659      	mov	r1, fp
 80056c4:	f7fb fac0 	bl	8000c48 <__aeabi_uldivmod>
 80056c8:	4602      	mov	r2, r0
 80056ca:	460b      	mov	r3, r1
 80056cc:	4613      	mov	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056d6:	d308      	bcc.n	80056ea <UART_SetConfig+0x3de>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056de:	d204      	bcs.n	80056ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	60da      	str	r2, [r3, #12]
 80056e8:	e0b6      	b.n	8005858 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056f0:	e0b2      	b.n	8005858 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056fa:	d15e      	bne.n	80057ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80056fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005700:	2b08      	cmp	r3, #8
 8005702:	d828      	bhi.n	8005756 <UART_SetConfig+0x44a>
 8005704:	a201      	add	r2, pc, #4	@ (adr r2, 800570c <UART_SetConfig+0x400>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	08005757 	.word	0x08005757
 800571c:	08005747 	.word	0x08005747
 8005720:	08005757 	.word	0x08005757
 8005724:	08005757 	.word	0x08005757
 8005728:	08005757 	.word	0x08005757
 800572c:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7fe ffcc 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 8005734:	61f8      	str	r0, [r7, #28]
        break;
 8005736:	e014      	b.n	8005762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe ffde 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e010      	b.n	8005762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b4d      	ldr	r3, [pc, #308]	@ (8005878 <UART_SetConfig+0x56c>)
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e00d      	b.n	8005762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fe ff29 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800574a:	61f8      	str	r0, [r7, #28]
        break;
 800574c:	e009      	b.n	8005762 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005752:	61fb      	str	r3, [r7, #28]
        break;
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d077      	beq.n	8005858 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	005a      	lsls	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	441a      	add	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	fbb2 f3f3 	udiv	r3, r2, r3
 800577c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	2b0f      	cmp	r3, #15
 8005782:	d916      	bls.n	80057b2 <UART_SetConfig+0x4a6>
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800578a:	d212      	bcs.n	80057b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	b29b      	uxth	r3, r3
 8005790:	f023 030f 	bic.w	r3, r3, #15
 8005794:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	b29b      	uxth	r3, r3
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	8afb      	ldrh	r3, [r7, #22]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	8afa      	ldrh	r2, [r7, #22]
 80057ae:	60da      	str	r2, [r3, #12]
 80057b0:	e052      	b.n	8005858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057b8:	e04e      	b.n	8005858 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057be:	2b08      	cmp	r3, #8
 80057c0:	d827      	bhi.n	8005812 <UART_SetConfig+0x506>
 80057c2:	a201      	add	r2, pc, #4	@ (adr r2, 80057c8 <UART_SetConfig+0x4bc>)
 80057c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c8:	080057ed 	.word	0x080057ed
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057fd 	.word	0x080057fd
 80057d4:	08005813 	.word	0x08005813
 80057d8:	08005803 	.word	0x08005803
 80057dc:	08005813 	.word	0x08005813
 80057e0:	08005813 	.word	0x08005813
 80057e4:	08005813 	.word	0x08005813
 80057e8:	0800580b 	.word	0x0800580b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ec:	f7fe ff6e 	bl	80046cc <HAL_RCC_GetPCLK1Freq>
 80057f0:	61f8      	str	r0, [r7, #28]
        break;
 80057f2:	e014      	b.n	800581e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f4:	f7fe ff80 	bl	80046f8 <HAL_RCC_GetPCLK2Freq>
 80057f8:	61f8      	str	r0, [r7, #28]
        break;
 80057fa:	e010      	b.n	800581e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005878 <UART_SetConfig+0x56c>)
 80057fe:	61fb      	str	r3, [r7, #28]
        break;
 8005800:	e00d      	b.n	800581e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005802:	f7fe fecb 	bl	800459c <HAL_RCC_GetSysClockFreq>
 8005806:	61f8      	str	r0, [r7, #28]
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580e:	61fb      	str	r3, [r7, #28]
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800581c:	bf00      	nop
    }

    if (pclk != 0U)
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d019      	beq.n	8005858 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	085a      	lsrs	r2, r3, #1
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	441a      	add	r2, r3
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	fbb2 f3f3 	udiv	r3, r2, r3
 8005836:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	2b0f      	cmp	r3, #15
 800583c:	d909      	bls.n	8005852 <UART_SetConfig+0x546>
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005844:	d205      	bcs.n	8005852 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	b29a      	uxth	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	60da      	str	r2, [r3, #12]
 8005850:	e002      	b.n	8005858 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2200      	movs	r2, #0
 800585c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005864:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005868:	4618      	mov	r0, r3
 800586a:	3728      	adds	r7, #40	@ 0x28
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005872:	bf00      	nop
 8005874:	40008000 	.word	0x40008000
 8005878:	00f42400 	.word	0x00f42400

0800587c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005888:	f003 0308 	and.w	r3, r3, #8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	430a      	orrs	r2, r1
 800594e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005976:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800597a:	d10a      	bne.n	8005992 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	430a      	orrs	r2, r1
 80059b2:	605a      	str	r2, [r3, #4]
  }
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b098      	sub	sp, #96	@ 0x60
 80059c4:	af02      	add	r7, sp, #8
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059d0:	f7fb ffac 	bl	800192c <HAL_GetTick>
 80059d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d12e      	bne.n	8005a42 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ec:	2200      	movs	r2, #0
 80059ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f88c 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d021      	beq.n	8005a42 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e6      	bne.n	80059fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2220      	movs	r2, #32
 8005a34:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e062      	b.n	8005b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b04      	cmp	r3, #4
 8005a4e:	d149      	bne.n	8005ae4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a50:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a54:	9300      	str	r3, [sp, #0]
 8005a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f856 	bl	8005b10 <UART_WaitOnFlagUntilTimeout>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d03c      	beq.n	8005ae4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	623b      	str	r3, [r7, #32]
   return(result);
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a88:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e6      	bne.n	8005a6a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3308      	adds	r3, #8
 8005aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3308      	adds	r3, #8
 8005aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005abc:	61fa      	str	r2, [r7, #28]
 8005abe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	69b9      	ldr	r1, [r7, #24]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2220      	movs	r2, #32
 8005ad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ae0:	2303      	movs	r3, #3
 8005ae2:	e011      	b.n	8005b08 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2220      	movs	r2, #32
 8005aee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3758      	adds	r7, #88	@ 0x58
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	603b      	str	r3, [r7, #0]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b20:	e04f      	b.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b28:	d04b      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b2a:	f7fb feff 	bl	800192c <HAL_GetTick>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	1ad3      	subs	r3, r2, r3
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d302      	bcc.n	8005b40 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d101      	bne.n	8005b44 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e04e      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d037      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	2b80      	cmp	r3, #128	@ 0x80
 8005b56:	d034      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b40      	cmp	r3, #64	@ 0x40
 8005b5c:	d031      	beq.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	f003 0308 	and.w	r3, r3, #8
 8005b68:	2b08      	cmp	r3, #8
 8005b6a:	d110      	bne.n	8005b8e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2208      	movs	r2, #8
 8005b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b74:	68f8      	ldr	r0, [r7, #12]
 8005b76:	f000 f838 	bl	8005bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2208      	movs	r2, #8
 8005b7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e029      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69db      	ldr	r3, [r3, #28]
 8005b94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b9c:	d111      	bne.n	8005bc2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ba6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f81e 	bl	8005bea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2220      	movs	r2, #32
 8005bb2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e00f      	b.n	8005be2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	69da      	ldr	r2, [r3, #28]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	4013      	ands	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	bf0c      	ite	eq
 8005bd2:	2301      	moveq	r3, #1
 8005bd4:	2300      	movne	r3, #0
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d0a0      	beq.n	8005b22 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b095      	sub	sp, #84	@ 0x54
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfa:	e853 3f00 	ldrex	r3, [r3]
 8005bfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c18:	e841 2300 	strex	r3, r2, [r1]
 8005c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d1e6      	bne.n	8005bf2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	e853 3f00 	ldrex	r3, [r3]
 8005c32:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f023 0301 	bic.w	r3, r3, #1
 8005c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c4c:	e841 2300 	strex	r3, r2, [r1]
 8005c50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e5      	bne.n	8005c24 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d118      	bne.n	8005c92 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0310 	bic.w	r3, r3, #16
 8005c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c82:	6979      	ldr	r1, [r7, #20]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	e841 2300 	strex	r3, r2, [r1]
 8005c8a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1e6      	bne.n	8005c60 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2220      	movs	r2, #32
 8005c96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005ca6:	bf00      	nop
 8005ca8:	3754      	adds	r7, #84	@ 0x54
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
	...

08005cb4 <get_fbin>:
*@param: buf_len  				FFT input array length
*@param: FFT_var				Store FFT variables
*@retval: 0 if there's error, 1 if there's no error
*/
int get_fbin(struct ADC_param *ADC_var,uint32_t buf_len, struct FFT_res *FFT_var)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
	//ensure the input values are valid
	if(ADC_var->speed<=0 || ADC_var->prescaler<=0 ||ADC_var->bit<=0 ||ADC_var->sampling_time <=0||buf_len<=0) return 0;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d012      	beq.n	8005cee <get_fbin+0x3a>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00e      	beq.n	8005cee <get_fbin+0x3a>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <get_fbin+0x3a>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	edd3 7a05 	vldr	s15, [r3, #20]
 8005cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce6:	d902      	bls.n	8005cee <get_fbin+0x3a>
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d101      	bne.n	8005cf2 <get_fbin+0x3e>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e097      	b.n	8005e22 <get_fbin+0x16e>
	//arm FFT can only receive certain input array length
	else if(!(buf_len==32||buf_len==64||buf_len==128||buf_len==256||buf_len==512||buf_len==1024||buf_len==2048||buf_len==4096))return 0;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b20      	cmp	r3, #32
 8005cf6:	d01b      	beq.n	8005d30 <get_fbin+0x7c>
 8005cf8:	68bb      	ldr	r3, [r7, #8]
 8005cfa:	2b40      	cmp	r3, #64	@ 0x40
 8005cfc:	d018      	beq.n	8005d30 <get_fbin+0x7c>
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b80      	cmp	r3, #128	@ 0x80
 8005d02:	d015      	beq.n	8005d30 <get_fbin+0x7c>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d0a:	d011      	beq.n	8005d30 <get_fbin+0x7c>
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d12:	d00d      	beq.n	8005d30 <get_fbin+0x7c>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d1a:	d009      	beq.n	8005d30 <get_fbin+0x7c>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d22:	d005      	beq.n	8005d30 <get_fbin+0x7c>
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d2a:	d001      	beq.n	8005d30 <get_fbin+0x7c>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	e078      	b.n	8005e22 <get_fbin+0x16e>

	float clock_cycle;
	//clock cycles according to ADC bit resolution (more info, refer to stm32l4xx_hal_adc.h)
	if(ADC_var->bit==12) clock_cycle=12.5;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b0c      	cmp	r3, #12
 8005d36:	d102      	bne.n	8005d3e <get_fbin+0x8a>
 8005d38:	4b3d      	ldr	r3, [pc, #244]	@ (8005e30 <get_fbin+0x17c>)
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e016      	b.n	8005d6c <get_fbin+0xb8>
	else if(ADC_var->bit==10) clock_cycle=10.5;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	2b0a      	cmp	r3, #10
 8005d44:	d102      	bne.n	8005d4c <get_fbin+0x98>
 8005d46:	4b3b      	ldr	r3, [pc, #236]	@ (8005e34 <get_fbin+0x180>)
 8005d48:	617b      	str	r3, [r7, #20]
 8005d4a:	e00f      	b.n	8005d6c <get_fbin+0xb8>
	else if(ADC_var->bit==8) clock_cycle=8.5;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d102      	bne.n	8005d5a <get_fbin+0xa6>
 8005d54:	4b38      	ldr	r3, [pc, #224]	@ (8005e38 <get_fbin+0x184>)
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	e008      	b.n	8005d6c <get_fbin+0xb8>
	else if(ADC_var->bit==6) clock_cycle=6.5;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b06      	cmp	r3, #6
 8005d60:	d102      	bne.n	8005d68 <get_fbin+0xb4>
 8005d62:	4b36      	ldr	r3, [pc, #216]	@ (8005e3c <get_fbin+0x188>)
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	e001      	b.n	8005d6c <get_fbin+0xb8>
	else return 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	e05a      	b.n	8005e22 <get_fbin+0x16e>

	float tconv=clock_cycle+ADC_var->sampling_time;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	edd3 7a05 	vldr	s15, [r3, #20]
 8005d72:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d7a:	edc7 7a04 	vstr	s15, [r7, #16]
	FFT_var->fsampling=(float)ADC_var->speed/(float)ADC_var->prescaler/tconv;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	ee07 3a90 	vmov	s15, r3
 8005d86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	ee07 3a90 	vmov	s15, r3
 8005d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d96:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005d9a:	ed97 7a04 	vldr	s14, [r7, #16]
 8005d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	edc3 7a01 	vstr	s15, [r3, #4]
	if(FFT_var->fsampling<3000)	//Since fmax =1500Hz, must at least 2 times of fmax
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dae:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8005e40 <get_fbin+0x18c>
 8005db2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dba:	d505      	bpl.n	8005dc8 <get_fbin+0x114>
	{
		//Please change the clock configuration
		FFT_var->fsampling=0;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f04f 0200 	mov.w	r2, #0
 8005dc2:	605a      	str	r2, [r3, #4]
		return 0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e02c      	b.n	8005e22 <get_fbin+0x16e>
	}
	FFT_var->fbin=(float)ADC_var->speed/(float)ADC_var->prescaler/tconv/(float)buf_len;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	ee07 3a90 	vmov	s15, r3
 8005ddc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de4:	edd7 7a04 	vldr	s15, [r7, #16]
 8005de8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005df6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	edc3 7a02 	vstr	s15, [r3, #8]
	if(FFT_var->fbin>=50)		//because need to measure at least 50Hz signal
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	edd3 7a02 	vldr	s15, [r3, #8]
 8005e06:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8005e44 <get_fbin+0x190>
 8005e0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e12:	db05      	blt.n	8005e20 <get_fbin+0x16c>
	{
		//Please change the clock configuration
		FFT_var->fbin=0;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	609a      	str	r2, [r3, #8]
		return 0;
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e000      	b.n	8005e22 <get_fbin+0x16e>
	}

	return 1;
 8005e20:	2301      	movs	r3, #1
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	371c      	adds	r7, #28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr
 8005e2e:	bf00      	nop
 8005e30:	41480000 	.word	0x41480000
 8005e34:	41280000 	.word	0x41280000
 8005e38:	41080000 	.word	0x41080000
 8005e3c:	40d00000 	.word	0x40d00000
 8005e40:	453b8000 	.word	0x453b8000
 8005e44:	42480000 	.word	0x42480000

08005e48 <do_FFT>:
*@param: buf_len  		The length of input array
*@param: FFT_var		Store FFT variables
*@retval: none
*/
void do_FFT(uint32_t adc_buf[],uint32_t buf_len,struct FFT_res *FFT_var)
{
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	b099      	sub	sp, #100	@ 0x64
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8005e52:	6239      	str	r1, [r7, #32]
 8005e54:	61fa      	str	r2, [r7, #28]
 8005e56:	466b      	mov	r3, sp
 8005e58:	461e      	mov	r6, r3
	float float_input[buf_len];
 8005e5a:	6a39      	ldr	r1, [r7, #32]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e62:	2300      	movs	r3, #0
 8005e64:	460c      	mov	r4, r1
 8005e66:	461d      	mov	r5, r3
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	016b      	lsls	r3, r5, #5
 8005e72:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8005e76:	0162      	lsls	r2, r4, #5
 8005e78:	2300      	movs	r3, #0
 8005e7a:	6139      	str	r1, [r7, #16]
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	0143      	lsls	r3, r0, #5
 8005e8e:	4620      	mov	r0, r4
 8005e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005e94:	4620      	mov	r0, r4
 8005e96:	0142      	lsls	r2, r0, #5
 8005e98:	008b      	lsls	r3, r1, #2
 8005e9a:	3307      	adds	r3, #7
 8005e9c:	08db      	lsrs	r3, r3, #3
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	ebad 0d03 	sub.w	sp, sp, r3
 8005ea4:	466b      	mov	r3, sp
 8005ea6:	3303      	adds	r3, #3
 8005ea8:	089b      	lsrs	r3, r3, #2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	653b      	str	r3, [r7, #80]	@ 0x50
	float output[buf_len];								//FFT output
 8005eae:	6a39      	ldr	r1, [r7, #32]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	f04f 0200 	mov.w	r2, #0
 8005ec0:	f04f 0300 	mov.w	r3, #0
 8005ec4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ec8:	4628      	mov	r0, r5
 8005eca:	0143      	lsls	r3, r0, #5
 8005ecc:	4620      	mov	r0, r4
 8005ece:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	0142      	lsls	r2, r0, #5
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	6039      	str	r1, [r7, #0]
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ee8:	4628      	mov	r0, r5
 8005eea:	0143      	lsls	r3, r0, #5
 8005eec:	4620      	mov	r0, r4
 8005eee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005ef2:	4620      	mov	r0, r4
 8005ef4:	0142      	lsls	r2, r0, #5
 8005ef6:	008b      	lsls	r3, r1, #2
 8005ef8:	3307      	adds	r3, #7
 8005efa:	08db      	lsrs	r3, r3, #3
 8005efc:	00db      	lsls	r3, r3, #3
 8005efe:	ebad 0d03 	sub.w	sp, sp, r3
 8005f02:	466b      	mov	r3, sp
 8005f04:	3303      	adds	r3, #3
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
	float result[buf_len/2];
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	0859      	lsrs	r1, r3, #1
 8005f10:	460b      	mov	r3, r1
 8005f12:	3b01      	subs	r3, #1
 8005f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f16:	2300      	movs	r3, #0
 8005f18:	468a      	mov	sl, r1
 8005f1a:	469b      	mov	fp, r3
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8005f28:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8005f2c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8005f30:	2300      	movs	r3, #0
 8005f32:	4688      	mov	r8, r1
 8005f34:	4699      	mov	r9, r3
 8005f36:	f04f 0200 	mov.w	r2, #0
 8005f3a:	f04f 0300 	mov.w	r3, #0
 8005f3e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8005f42:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8005f46:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8005f4a:	008b      	lsls	r3, r1, #2
 8005f4c:	3307      	adds	r3, #7
 8005f4e:	08db      	lsrs	r3, r3, #3
 8005f50:	00db      	lsls	r3, r3, #3
 8005f52:	ebad 0d03 	sub.w	sp, sp, r3
 8005f56:	466b      	mov	r3, sp
 8005f58:	3303      	adds	r3, #3
 8005f5a:	089b      	lsrs	r3, r3, #2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	643b      	str	r3, [r7, #64]	@ 0x40
	for(int i=0;i<buf_len;i++)
 8005f60:	2300      	movs	r3, #0
 8005f62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f64:	e016      	b.n	8005f94 <do_FFT+0x14c>
	{
		float_input[i]=(float)adc_buf[i]-FFT_var->offset;//convert to float
 8005f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f6c:	4413      	add	r3, r2
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	ee07 3a90 	vmov	s15, r3
 8005f74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	edd3 7a00 	vldr	s15, [r3]
 8005f7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f82:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005f84:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f86:	009b      	lsls	r3, r3, #2
 8005f88:	4413      	add	r3, r2
 8005f8a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0;i<buf_len;i++)
 8005f8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f90:	3301      	adds	r3, #1
 8005f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f96:	6a3a      	ldr	r2, [r7, #32]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d8e4      	bhi.n	8005f66 <do_FFT+0x11e>
	}

	/*Execute Real FFT algorithm*/
	arm_rfft_fast_instance_f32 S;						//RFFT instance.
	arm_rfft_fast_init_f32(&S, buf_len);				//RFFT init
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005fa4:	4611      	mov	r1, r2
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f000 f9d2 	bl	8006350 <arm_rfft_fast_init_f32>
	arm_rfft_fast_f32(&S, float_input, output, 0);		//process (output will have magnitude)
 8005fac:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fb4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fb6:	f000 faaf 	bl	8006518 <arm_rfft_fast_f32>

	arm_cmplx_mag_f32(output, result, buf_len/2);		//magnitude
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	085b      	lsrs	r3, r3, #1
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fc2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8005fc4:	f000 fe86 	bl	8006cd4 <arm_cmplx_mag_f32>
	result[0]=0;										//remove DC value
 8005fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005fca:	f04f 0200 	mov.w	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]

	arm_max_f32(result, buf_len/2, &FFT_var->magnitude, &FFT_var->index);//maxValue
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	0859      	lsrs	r1, r3, #1
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f103 0210 	add.w	r2, r3, #16
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	3314      	adds	r3, #20
 8005fde:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8005fe0:	f000 f882 	bl	80060e8 <arm_max_f32>
	FFT_var->fdominant=FFT_var->index*FFT_var->fbin;	//return dominant frequency
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	ee07 3a90 	vmov	s15, r3
 8005fec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffa:	69fb      	ldr	r3, [r7, #28]
 8005ffc:	edc3 7a03 	vstr	s15, [r3, #12]
	for(int i=0;i<buf_len;i++)							//clear old ADC values
 8006000:	2300      	movs	r3, #0
 8006002:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006004:	e008      	b.n	8006018 <do_FFT+0x1d0>
	{
		adc_buf[i]=0;
 8006006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800600c:	4413      	add	r3, r2
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
	for(int i=0;i<buf_len;i++)							//clear old ADC values
 8006012:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006014:	3301      	adds	r3, #1
 8006016:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	429a      	cmp	r2, r3
 800601e:	d8f2      	bhi.n	8006006 <do_FFT+0x1be>
 8006020:	46b5      	mov	sp, r6
	}
}
 8006022:	bf00      	nop
 8006024:	3764      	adds	r7, #100	@ 0x64
 8006026:	46bd      	mov	sp, r7
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800602c <start_FFT>:
*@param: ADC_var		Store clock values
*@param: FFT_var		Store FFT variables
*@retval: 0 if there's error, 1 if there's no error
*/
int start_FFT(int *flag, struct ADC_param *ADC_var, struct FFT_res *FFT_var)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
	//FFT process
	int result=get_fbin(ADC_var, ADC_var->adc_buf_len, FFT_var);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4619      	mov	r1, r3
 8006040:	68b8      	ldr	r0, [r7, #8]
 8006042:	f7ff fe37 	bl	8005cb4 <get_fbin>
 8006046:	6178      	str	r0, [r7, #20]
	if(result==1)		//no error
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d10c      	bne.n	8006068 <start_FFT+0x3c>
	{
		do_FFT(ADC_var->adc_buf,ADC_var->adc_buf_len,FFT_var);	//if result valid
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6818      	ldr	r0, [r3, #0]
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4619      	mov	r1, r3
 800605a:	f7ff fef5 	bl	8005e48 <do_FFT>
		*flag=0;	//reset flag to 0
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	601a      	str	r2, [r3, #0]
		return 1;
 8006064:	2301      	movs	r3, #1
 8006066:	e003      	b.n	8006070 <start_FFT+0x44>
	}
	*flag=0;	//error
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
	return 0;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <get_velocity>:
*@param: velocity 		Stores the calculation result
*@retval: none
*/

void get_velocity(float fdominant, float fwave, float * velocity)
{
 8006078:	b5b0      	push	{r4, r5, r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	ed87 0a03 	vstr	s0, [r7, #12]
 8006082:	edc7 0a02 	vstr	s1, [r7, #8]
 8006086:	6078      	str	r0, [r7, #4]
	if(fwave>0)
 8006088:	edd7 7a02 	vldr	s15, [r7, #8]
 800608c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006094:	dc00      	bgt.n	8006098 <get_velocity+0x20>
	{
		*velocity=0.5*300000000*fdominant/fwave;
	}
}
 8006096:	e01d      	b.n	80060d4 <get_velocity+0x5c>
		*velocity=0.5*300000000*fdominant/fwave;
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f7fa fa55 	bl	8000548 <__aeabi_f2d>
 800609e:	a310      	add	r3, pc, #64	@ (adr r3, 80060e0 <get_velocity+0x68>)
 80060a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a4:	f7fa faa8 	bl	80005f8 <__aeabi_dmul>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4614      	mov	r4, r2
 80060ae:	461d      	mov	r5, r3
 80060b0:	68b8      	ldr	r0, [r7, #8]
 80060b2:	f7fa fa49 	bl	8000548 <__aeabi_f2d>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4620      	mov	r0, r4
 80060bc:	4629      	mov	r1, r5
 80060be:	f7fa fbc5 	bl	800084c <__aeabi_ddiv>
 80060c2:	4602      	mov	r2, r0
 80060c4:	460b      	mov	r3, r1
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fa fd6d 	bl	8000ba8 <__aeabi_d2f>
 80060ce:	4602      	mov	r2, r0
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	601a      	str	r2, [r3, #0]
}
 80060d4:	bf00      	nop
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bdb0      	pop	{r4, r5, r7, pc}
 80060dc:	f3af 8000 	nop.w
 80060e0:	00000000 	.word	0x00000000
 80060e4:	41a1e1a3 	.word	0x41a1e1a3

080060e8 <arm_max_f32>:
 80060e8:	f101 3cff 	add.w	ip, r1, #4294967295
 80060ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060ee:	4607      	mov	r7, r0
 80060f0:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 80060f4:	ecf7 7a01 	vldmia	r7!, {s15}
 80060f8:	d060      	beq.n	80061bc <arm_max_f32+0xd4>
 80060fa:	2400      	movs	r4, #0
 80060fc:	3014      	adds	r0, #20
 80060fe:	4625      	mov	r5, r4
 8006100:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8006104:	ed10 7a04 	vldr	s14, [r0, #-16]
 8006108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800610c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006110:	bf48      	it	mi
 8006112:	eef0 7a47 	vmovmi.f32	s15, s14
 8006116:	ed10 7a03 	vldr	s14, [r0, #-12]
 800611a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800611e:	bf48      	it	mi
 8006120:	1c65      	addmi	r5, r4, #1
 8006122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006126:	bf48      	it	mi
 8006128:	eef0 7a47 	vmovmi.f32	s15, s14
 800612c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8006130:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006134:	bf48      	it	mi
 8006136:	1ca5      	addmi	r5, r4, #2
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	bf48      	it	mi
 800613e:	eef0 7a47 	vmovmi.f32	s15, s14
 8006142:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006146:	eef4 7ac7 	vcmpe.f32	s15, s14
 800614a:	bf48      	it	mi
 800614c:	1ce5      	addmi	r5, r4, #3
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	f104 0404 	add.w	r4, r4, #4
 8006156:	bf44      	itt	mi
 8006158:	eef0 7a47 	vmovmi.f32	s15, s14
 800615c:	4625      	movmi	r5, r4
 800615e:	42a6      	cmp	r6, r4
 8006160:	f100 0010 	add.w	r0, r0, #16
 8006164:	d1ce      	bne.n	8006104 <arm_max_f32+0x1c>
 8006166:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800616a:	f01c 0003 	ands.w	r0, ip, #3
 800616e:	d021      	beq.n	80061b4 <arm_max_f32+0xcc>
 8006170:	ed97 7a00 	vldr	s14, [r7]
 8006174:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800617c:	bfc4      	itt	gt
 800617e:	eef0 7a47 	vmovgt.f32	s15, s14
 8006182:	1a0d      	subgt	r5, r1, r0
 8006184:	3801      	subs	r0, #1
 8006186:	d015      	beq.n	80061b4 <arm_max_f32+0xcc>
 8006188:	ed97 7a01 	vldr	s14, [r7, #4]
 800618c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006194:	bf44      	itt	mi
 8006196:	eef0 7a47 	vmovmi.f32	s15, s14
 800619a:	1a0d      	submi	r5, r1, r0
 800619c:	2801      	cmp	r0, #1
 800619e:	d009      	beq.n	80061b4 <arm_max_f32+0xcc>
 80061a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80061a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80061a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ac:	bfc4      	itt	gt
 80061ae:	eef0 7a47 	vmovgt.f32	s15, s14
 80061b2:	4665      	movgt	r5, ip
 80061b4:	edc2 7a00 	vstr	s15, [r2]
 80061b8:	601d      	str	r5, [r3, #0]
 80061ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061bc:	4675      	mov	r5, lr
 80061be:	e7d4      	b.n	800616a <arm_max_f32+0x82>

080061c0 <arm_rfft_32_fast_init_f32>:
 80061c0:	b178      	cbz	r0, 80061e2 <arm_rfft_32_fast_init_f32+0x22>
 80061c2:	b430      	push	{r4, r5}
 80061c4:	4908      	ldr	r1, [pc, #32]	@ (80061e8 <arm_rfft_32_fast_init_f32+0x28>)
 80061c6:	4a09      	ldr	r2, [pc, #36]	@ (80061ec <arm_rfft_32_fast_init_f32+0x2c>)
 80061c8:	2310      	movs	r3, #16
 80061ca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80061ce:	8003      	strh	r3, [r0, #0]
 80061d0:	2520      	movs	r5, #32
 80061d2:	2414      	movs	r4, #20
 80061d4:	4b06      	ldr	r3, [pc, #24]	@ (80061f0 <arm_rfft_32_fast_init_f32+0x30>)
 80061d6:	8205      	strh	r5, [r0, #16]
 80061d8:	8184      	strh	r4, [r0, #12]
 80061da:	6143      	str	r3, [r0, #20]
 80061dc:	bc30      	pop	{r4, r5}
 80061de:	2000      	movs	r0, #0
 80061e0:	4770      	bx	lr
 80061e2:	f04f 30ff 	mov.w	r0, #4294967295
 80061e6:	4770      	bx	lr
 80061e8:	0800b1a0 	.word	0x0800b1a0
 80061ec:	0800fad8 	.word	0x0800fad8
 80061f0:	08018858 	.word	0x08018858

080061f4 <arm_rfft_64_fast_init_f32>:
 80061f4:	b178      	cbz	r0, 8006216 <arm_rfft_64_fast_init_f32+0x22>
 80061f6:	b430      	push	{r4, r5}
 80061f8:	4908      	ldr	r1, [pc, #32]	@ (800621c <arm_rfft_64_fast_init_f32+0x28>)
 80061fa:	4a09      	ldr	r2, [pc, #36]	@ (8006220 <arm_rfft_64_fast_init_f32+0x2c>)
 80061fc:	2320      	movs	r3, #32
 80061fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006202:	8003      	strh	r3, [r0, #0]
 8006204:	2540      	movs	r5, #64	@ 0x40
 8006206:	2430      	movs	r4, #48	@ 0x30
 8006208:	4b06      	ldr	r3, [pc, #24]	@ (8006224 <arm_rfft_64_fast_init_f32+0x30>)
 800620a:	8205      	strh	r5, [r0, #16]
 800620c:	8184      	strh	r4, [r0, #12]
 800620e:	6143      	str	r3, [r0, #20]
 8006210:	bc30      	pop	{r4, r5}
 8006212:	2000      	movs	r0, #0
 8006214:	4770      	bx	lr
 8006216:	f04f 30ff 	mov.w	r0, #4294967295
 800621a:	4770      	bx	lr
 800621c:	0800d2f8 	.word	0x0800d2f8
 8006220:	08014358 	.word	0x08014358
 8006224:	0801d0d8 	.word	0x0801d0d8

08006228 <arm_rfft_256_fast_init_f32>:
 8006228:	b180      	cbz	r0, 800624c <arm_rfft_256_fast_init_f32+0x24>
 800622a:	b430      	push	{r4, r5}
 800622c:	4909      	ldr	r1, [pc, #36]	@ (8006254 <arm_rfft_256_fast_init_f32+0x2c>)
 800622e:	4a0a      	ldr	r2, [pc, #40]	@ (8006258 <arm_rfft_256_fast_init_f32+0x30>)
 8006230:	2380      	movs	r3, #128	@ 0x80
 8006232:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006236:	8003      	strh	r3, [r0, #0]
 8006238:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800623c:	24d0      	movs	r4, #208	@ 0xd0
 800623e:	4b07      	ldr	r3, [pc, #28]	@ (800625c <arm_rfft_256_fast_init_f32+0x34>)
 8006240:	8205      	strh	r5, [r0, #16]
 8006242:	8184      	strh	r4, [r0, #12]
 8006244:	6143      	str	r3, [r0, #20]
 8006246:	bc30      	pop	{r4, r5}
 8006248:	2000      	movs	r0, #0
 800624a:	4770      	bx	lr
 800624c:	f04f 30ff 	mov.w	r0, #4294967295
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	0800b000 	.word	0x0800b000
 8006258:	0800f6d8 	.word	0x0800f6d8
 800625c:	08018458 	.word	0x08018458

08006260 <arm_rfft_512_fast_init_f32>:
 8006260:	b190      	cbz	r0, 8006288 <arm_rfft_512_fast_init_f32+0x28>
 8006262:	b430      	push	{r4, r5}
 8006264:	490a      	ldr	r1, [pc, #40]	@ (8006290 <arm_rfft_512_fast_init_f32+0x30>)
 8006266:	4a0b      	ldr	r2, [pc, #44]	@ (8006294 <arm_rfft_512_fast_init_f32+0x34>)
 8006268:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800626c:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006270:	8003      	strh	r3, [r0, #0]
 8006272:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8006276:	f44f 74dc 	mov.w	r4, #440	@ 0x1b8
 800627a:	4b07      	ldr	r3, [pc, #28]	@ (8006298 <arm_rfft_512_fast_init_f32+0x38>)
 800627c:	8205      	strh	r5, [r0, #16]
 800627e:	8184      	strh	r4, [r0, #12]
 8006280:	6143      	str	r3, [r0, #20]
 8006282:	bc30      	pop	{r4, r5}
 8006284:	2000      	movs	r0, #0
 8006286:	4770      	bx	lr
 8006288:	f04f 30ff 	mov.w	r0, #4294967295
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	0800cf88 	.word	0x0800cf88
 8006294:	08013b58 	.word	0x08013b58
 8006298:	0801c8d8 	.word	0x0801c8d8

0800629c <arm_rfft_1024_fast_init_f32>:
 800629c:	b190      	cbz	r0, 80062c4 <arm_rfft_1024_fast_init_f32+0x28>
 800629e:	b430      	push	{r4, r5}
 80062a0:	490a      	ldr	r1, [pc, #40]	@ (80062cc <arm_rfft_1024_fast_init_f32+0x30>)
 80062a2:	4a0b      	ldr	r2, [pc, #44]	@ (80062d0 <arm_rfft_1024_fast_init_f32+0x34>)
 80062a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80062a8:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062ac:	8003      	strh	r3, [r0, #0]
 80062ae:	f44f 6580 	mov.w	r5, #1024	@ 0x400
 80062b2:	f44f 74e0 	mov.w	r4, #448	@ 0x1c0
 80062b6:	4b07      	ldr	r3, [pc, #28]	@ (80062d4 <arm_rfft_1024_fast_init_f32+0x38>)
 80062b8:	8205      	strh	r5, [r0, #16]
 80062ba:	8184      	strh	r4, [r0, #12]
 80062bc:	6143      	str	r3, [r0, #20]
 80062be:	bc30      	pop	{r4, r5}
 80062c0:	2000      	movs	r0, #0
 80062c2:	4770      	bx	lr
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	0800d358 	.word	0x0800d358
 80062d0:	08014458 	.word	0x08014458
 80062d4:	08015458 	.word	0x08015458

080062d8 <arm_rfft_2048_fast_init_f32>:
 80062d8:	b190      	cbz	r0, 8006300 <arm_rfft_2048_fast_init_f32+0x28>
 80062da:	b430      	push	{r4, r5}
 80062dc:	490a      	ldr	r1, [pc, #40]	@ (8006308 <arm_rfft_2048_fast_init_f32+0x30>)
 80062de:	4a0b      	ldr	r2, [pc, #44]	@ (800630c <arm_rfft_2048_fast_init_f32+0x34>)
 80062e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062e4:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062e8:	8003      	strh	r3, [r0, #0]
 80062ea:	f44f 6500 	mov.w	r5, #2048	@ 0x800
 80062ee:	f44f 64e1 	mov.w	r4, #1800	@ 0x708
 80062f2:	4b07      	ldr	r3, [pc, #28]	@ (8006310 <arm_rfft_2048_fast_init_f32+0x38>)
 80062f4:	8205      	strh	r5, [r0, #16]
 80062f6:	8184      	strh	r4, [r0, #12]
 80062f8:	6143      	str	r3, [r0, #20]
 80062fa:	bc30      	pop	{r4, r5}
 80062fc:	2000      	movs	r0, #0
 80062fe:	4770      	bx	lr
 8006300:	f04f 30ff 	mov.w	r0, #4294967295
 8006304:	4770      	bx	lr
 8006306:	bf00      	nop
 8006308:	0800a1f0 	.word	0x0800a1f0
 800630c:	0800d6d8 	.word	0x0800d6d8
 8006310:	08016458 	.word	0x08016458

08006314 <arm_rfft_4096_fast_init_f32>:
 8006314:	b190      	cbz	r0, 800633c <arm_rfft_4096_fast_init_f32+0x28>
 8006316:	b430      	push	{r4, r5}
 8006318:	490a      	ldr	r1, [pc, #40]	@ (8006344 <arm_rfft_4096_fast_init_f32+0x30>)
 800631a:	4a0b      	ldr	r2, [pc, #44]	@ (8006348 <arm_rfft_4096_fast_init_f32+0x34>)
 800631c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006320:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006324:	8003      	strh	r3, [r0, #0]
 8006326:	f44f 5580 	mov.w	r5, #4096	@ 0x1000
 800632a:	f44f 646e 	mov.w	r4, #3808	@ 0xee0
 800632e:	4b07      	ldr	r3, [pc, #28]	@ (800634c <arm_rfft_4096_fast_init_f32+0x38>)
 8006330:	8205      	strh	r5, [r0, #16]
 8006332:	8184      	strh	r4, [r0, #12]
 8006334:	6143      	str	r3, [r0, #20]
 8006336:	bc30      	pop	{r4, r5}
 8006338:	2000      	movs	r0, #0
 800633a:	4770      	bx	lr
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	0800b1c8 	.word	0x0800b1c8
 8006348:	0800fb58 	.word	0x0800fb58
 800634c:	080188d8 	.word	0x080188d8

08006350 <arm_rfft_fast_init_f32>:
 8006350:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8006354:	d01f      	beq.n	8006396 <arm_rfft_fast_init_f32+0x46>
 8006356:	d90b      	bls.n	8006370 <arm_rfft_fast_init_f32+0x20>
 8006358:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800635c:	d019      	beq.n	8006392 <arm_rfft_fast_init_f32+0x42>
 800635e:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8006362:	d012      	beq.n	800638a <arm_rfft_fast_init_f32+0x3a>
 8006364:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006368:	d00d      	beq.n	8006386 <arm_rfft_fast_init_f32+0x36>
 800636a:	f04f 30ff 	mov.w	r0, #4294967295
 800636e:	4770      	bx	lr
 8006370:	2940      	cmp	r1, #64	@ 0x40
 8006372:	d00c      	beq.n	800638e <arm_rfft_fast_init_f32+0x3e>
 8006374:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8006378:	d003      	beq.n	8006382 <arm_rfft_fast_init_f32+0x32>
 800637a:	2920      	cmp	r1, #32
 800637c:	d1f5      	bne.n	800636a <arm_rfft_fast_init_f32+0x1a>
 800637e:	4b07      	ldr	r3, [pc, #28]	@ (800639c <arm_rfft_fast_init_f32+0x4c>)
 8006380:	4718      	bx	r3
 8006382:	4b07      	ldr	r3, [pc, #28]	@ (80063a0 <arm_rfft_fast_init_f32+0x50>)
 8006384:	4718      	bx	r3
 8006386:	4b07      	ldr	r3, [pc, #28]	@ (80063a4 <arm_rfft_fast_init_f32+0x54>)
 8006388:	4718      	bx	r3
 800638a:	4b07      	ldr	r3, [pc, #28]	@ (80063a8 <arm_rfft_fast_init_f32+0x58>)
 800638c:	4718      	bx	r3
 800638e:	4b07      	ldr	r3, [pc, #28]	@ (80063ac <arm_rfft_fast_init_f32+0x5c>)
 8006390:	e7f6      	b.n	8006380 <arm_rfft_fast_init_f32+0x30>
 8006392:	4b07      	ldr	r3, [pc, #28]	@ (80063b0 <arm_rfft_fast_init_f32+0x60>)
 8006394:	e7f4      	b.n	8006380 <arm_rfft_fast_init_f32+0x30>
 8006396:	4b07      	ldr	r3, [pc, #28]	@ (80063b4 <arm_rfft_fast_init_f32+0x64>)
 8006398:	e7f2      	b.n	8006380 <arm_rfft_fast_init_f32+0x30>
 800639a:	bf00      	nop
 800639c:	080061c1 	.word	0x080061c1
 80063a0:	08006229 	.word	0x08006229
 80063a4:	0800629d 	.word	0x0800629d
 80063a8:	08006315 	.word	0x08006315
 80063ac:	080061f5 	.word	0x080061f5
 80063b0:	080062d9 	.word	0x080062d9
 80063b4:	08006261 	.word	0x08006261

080063b8 <stage_rfft_f32>:
 80063b8:	b410      	push	{r4}
 80063ba:	edd1 7a00 	vldr	s15, [r1]
 80063be:	ed91 7a01 	vldr	s14, [r1, #4]
 80063c2:	8804      	ldrh	r4, [r0, #0]
 80063c4:	6940      	ldr	r0, [r0, #20]
 80063c6:	ee37 7a07 	vadd.f32	s14, s14, s14
 80063ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80063ce:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 80063d2:	ee77 6a87 	vadd.f32	s13, s15, s14
 80063d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063da:	3c01      	subs	r4, #1
 80063dc:	ee26 7a84 	vmul.f32	s14, s13, s8
 80063e0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80063e4:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80063e8:	ed82 7a00 	vstr	s14, [r2]
 80063ec:	edc2 7a01 	vstr	s15, [r2, #4]
 80063f0:	3010      	adds	r0, #16
 80063f2:	3210      	adds	r2, #16
 80063f4:	3b08      	subs	r3, #8
 80063f6:	3110      	adds	r1, #16
 80063f8:	ed11 5a02 	vldr	s10, [r1, #-8]
 80063fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8006400:	ed50 6a02 	vldr	s13, [r0, #-8]
 8006404:	edd3 4a03 	vldr	s9, [r3, #12]
 8006408:	ed51 7a01 	vldr	s15, [r1, #-4]
 800640c:	ed10 6a01 	vldr	s12, [r0, #-4]
 8006410:	ee77 5a45 	vsub.f32	s11, s14, s10
 8006414:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006418:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800641c:	ee34 5aa7 	vadd.f32	s10, s9, s15
 8006420:	ee66 5a25 	vmul.f32	s11, s12, s11
 8006424:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8006428:	ee37 7a23 	vadd.f32	s14, s14, s7
 800642c:	ee66 6a85 	vmul.f32	s13, s13, s10
 8006430:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006434:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006438:	ee37 7a06 	vadd.f32	s14, s14, s12
 800643c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006440:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006444:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006448:	3c01      	subs	r4, #1
 800644a:	ed02 7a02 	vstr	s14, [r2, #-8]
 800644e:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006452:	f1a3 0308 	sub.w	r3, r3, #8
 8006456:	f101 0108 	add.w	r1, r1, #8
 800645a:	f100 0008 	add.w	r0, r0, #8
 800645e:	f102 0208 	add.w	r2, r2, #8
 8006462:	d1c9      	bne.n	80063f8 <stage_rfft_f32+0x40>
 8006464:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006468:	4770      	bx	lr
 800646a:	bf00      	nop

0800646c <merge_rfft_f32>:
 800646c:	b410      	push	{r4}
 800646e:	edd1 7a00 	vldr	s15, [r1]
 8006472:	edd1 6a01 	vldr	s13, [r1, #4]
 8006476:	8804      	ldrh	r4, [r0, #0]
 8006478:	6940      	ldr	r0, [r0, #20]
 800647a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800647e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006482:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 8006486:	ee27 7a04 	vmul.f32	s14, s14, s8
 800648a:	ee67 7a84 	vmul.f32	s15, s15, s8
 800648e:	3c01      	subs	r4, #1
 8006490:	ed82 7a00 	vstr	s14, [r2]
 8006494:	edc2 7a01 	vstr	s15, [r2, #4]
 8006498:	b3dc      	cbz	r4, 8006512 <merge_rfft_f32+0xa6>
 800649a:	00e3      	lsls	r3, r4, #3
 800649c:	3b08      	subs	r3, #8
 800649e:	440b      	add	r3, r1
 80064a0:	3010      	adds	r0, #16
 80064a2:	3210      	adds	r2, #16
 80064a4:	3110      	adds	r1, #16
 80064a6:	ed11 5a02 	vldr	s10, [r1, #-8]
 80064aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80064ae:	ed50 6a02 	vldr	s13, [r0, #-8]
 80064b2:	edd3 4a03 	vldr	s9, [r3, #12]
 80064b6:	ed51 7a01 	vldr	s15, [r1, #-4]
 80064ba:	ed10 6a01 	vldr	s12, [r0, #-4]
 80064be:	ee75 5a47 	vsub.f32	s11, s10, s14
 80064c2:	ee37 7a05 	vadd.f32	s14, s14, s10
 80064c6:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80064ca:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80064ce:	ee66 5a25 	vmul.f32	s11, s12, s11
 80064d2:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80064d6:	ee37 7a63 	vsub.f32	s14, s14, s7
 80064da:	ee66 6a85 	vmul.f32	s13, s13, s10
 80064de:	ee26 6a05 	vmul.f32	s12, s12, s10
 80064e2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80064e6:	ee37 7a46 	vsub.f32	s14, s14, s12
 80064ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80064ee:	ee27 7a04 	vmul.f32	s14, s14, s8
 80064f2:	ee67 7a84 	vmul.f32	s15, s15, s8
 80064f6:	3c01      	subs	r4, #1
 80064f8:	ed02 7a02 	vstr	s14, [r2, #-8]
 80064fc:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006500:	f1a3 0308 	sub.w	r3, r3, #8
 8006504:	f101 0108 	add.w	r1, r1, #8
 8006508:	f100 0008 	add.w	r0, r0, #8
 800650c:	f102 0208 	add.w	r2, r2, #8
 8006510:	d1c9      	bne.n	80064a6 <merge_rfft_f32+0x3a>
 8006512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006516:	4770      	bx	lr

08006518 <arm_rfft_fast_f32>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	8a05      	ldrh	r5, [r0, #16]
 800651e:	086d      	lsrs	r5, r5, #1
 8006520:	8005      	strh	r5, [r0, #0]
 8006522:	4604      	mov	r4, r0
 8006524:	4616      	mov	r6, r2
 8006526:	461d      	mov	r5, r3
 8006528:	b14b      	cbz	r3, 800653e <arm_rfft_fast_f32+0x26>
 800652a:	f7ff ff9f 	bl	800646c <merge_rfft_f32>
 800652e:	462a      	mov	r2, r5
 8006530:	4631      	mov	r1, r6
 8006532:	4620      	mov	r0, r4
 8006534:	2301      	movs	r3, #1
 8006536:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653a:	f000 bb33 	b.w	8006ba4 <arm_cfft_f32>
 800653e:	460f      	mov	r7, r1
 8006540:	461a      	mov	r2, r3
 8006542:	2301      	movs	r3, #1
 8006544:	f000 fb2e 	bl	8006ba4 <arm_cfft_f32>
 8006548:	4632      	mov	r2, r6
 800654a:	4639      	mov	r1, r7
 800654c:	4620      	mov	r0, r4
 800654e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006552:	f7ff bf31 	b.w	80063b8 <stage_rfft_f32>
 8006556:	bf00      	nop

08006558 <arm_cfft_radix8by2_f32>:
 8006558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800655c:	ed2d 8b08 	vpush	{d8-d11}
 8006560:	4607      	mov	r7, r0
 8006562:	4608      	mov	r0, r1
 8006564:	f8b7 c000 	ldrh.w	ip, [r7]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800656e:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 8006572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006576:	f000 80b0 	beq.w	80066da <arm_cfft_radix8by2_f32+0x182>
 800657a:	008c      	lsls	r4, r1, #2
 800657c:	3410      	adds	r4, #16
 800657e:	f100 0310 	add.w	r3, r0, #16
 8006582:	1906      	adds	r6, r0, r4
 8006584:	3210      	adds	r2, #16
 8006586:	4444      	add	r4, r8
 8006588:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800658c:	f108 0510 	add.w	r5, r8, #16
 8006590:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006594:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006598:	ed54 4a04 	vldr	s9, [r4, #-16]
 800659c:	ed14 4a03 	vldr	s8, [r4, #-12]
 80065a0:	ed14 6a02 	vldr	s12, [r4, #-8]
 80065a4:	ed54 5a01 	vldr	s11, [r4, #-4]
 80065a8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80065ac:	ed15 0a02 	vldr	s0, [r5, #-8]
 80065b0:	ed55 0a01 	vldr	s1, [r5, #-4]
 80065b4:	ed56 6a04 	vldr	s13, [r6, #-16]
 80065b8:	ed16 3a03 	vldr	s6, [r6, #-12]
 80065bc:	ed13 7a03 	vldr	s14, [r3, #-12]
 80065c0:	ed13 5a02 	vldr	s10, [r3, #-8]
 80065c4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80065c8:	ed16 1a02 	vldr	s2, [r6, #-8]
 80065cc:	ed56 1a01 	vldr	s3, [r6, #-4]
 80065d0:	ee73 ba82 	vadd.f32	s23, s7, s4
 80065d4:	ee37 ba22 	vadd.f32	s22, s14, s5
 80065d8:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80065dc:	ee33 9a04 	vadd.f32	s18, s6, s8
 80065e0:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80065e4:	ee75 aa00 	vadd.f32	s21, s10, s0
 80065e8:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80065ec:	ee71 8a06 	vadd.f32	s17, s2, s12
 80065f0:	ed43 ba04 	vstr	s23, [r3, #-16]
 80065f4:	ed03 ba03 	vstr	s22, [r3, #-12]
 80065f8:	ed43 aa02 	vstr	s21, [r3, #-8]
 80065fc:	ed03 aa01 	vstr	s20, [r3, #-4]
 8006600:	ed06 8a01 	vstr	s16, [r6, #-4]
 8006604:	ed46 9a04 	vstr	s19, [r6, #-16]
 8006608:	ed06 9a03 	vstr	s18, [r6, #-12]
 800660c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8006610:	ee37 7a62 	vsub.f32	s14, s14, s5
 8006614:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8006618:	ee34 4a43 	vsub.f32	s8, s8, s6
 800661c:	ed52 6a03 	vldr	s13, [r2, #-12]
 8006620:	ed12 3a04 	vldr	s6, [r2, #-16]
 8006624:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8006628:	ee27 8a26 	vmul.f32	s16, s14, s13
 800662c:	ee64 2aa6 	vmul.f32	s5, s9, s13
 8006630:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006634:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006638:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800663c:	ee27 7a03 	vmul.f32	s14, s14, s6
 8006640:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006644:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006648:	ee37 7a63 	vsub.f32	s14, s14, s7
 800664c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006650:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006654:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006658:	ed05 7a03 	vstr	s14, [r5, #-12]
 800665c:	ed05 3a04 	vstr	s6, [r5, #-16]
 8006660:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006664:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006668:	ed12 7a01 	vldr	s14, [r2, #-4]
 800666c:	ee76 6a41 	vsub.f32	s13, s12, s2
 8006670:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006674:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006678:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800667c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8006680:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006684:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006688:	ee25 4a25 	vmul.f32	s8, s10, s11
 800668c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006690:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006694:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006698:	ee26 7a07 	vmul.f32	s14, s12, s14
 800669c:	ee26 6a25 	vmul.f32	s12, s12, s11
 80066a0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80066a4:	ee74 5a23 	vadd.f32	s11, s8, s7
 80066a8:	ee34 6ac6 	vsub.f32	s12, s9, s12
 80066ac:	ee37 7a26 	vadd.f32	s14, s14, s13
 80066b0:	3310      	adds	r3, #16
 80066b2:	4563      	cmp	r3, ip
 80066b4:	ed45 5a02 	vstr	s11, [r5, #-8]
 80066b8:	f106 0610 	add.w	r6, r6, #16
 80066bc:	ed45 7a01 	vstr	s15, [r5, #-4]
 80066c0:	f102 0210 	add.w	r2, r2, #16
 80066c4:	ed04 6a02 	vstr	s12, [r4, #-8]
 80066c8:	ed04 7a01 	vstr	s14, [r4, #-4]
 80066cc:	f105 0510 	add.w	r5, r5, #16
 80066d0:	f104 0410 	add.w	r4, r4, #16
 80066d4:	f47f af5c 	bne.w	8006590 <arm_cfft_radix8by2_f32+0x38>
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	b28c      	uxth	r4, r1
 80066dc:	4621      	mov	r1, r4
 80066de:	2302      	movs	r3, #2
 80066e0:	f000 fc1c 	bl	8006f1c <arm_radix8_butterfly_f32>
 80066e4:	ecbd 8b08 	vpop	{d8-d11}
 80066e8:	4621      	mov	r1, r4
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4640      	mov	r0, r8
 80066ee:	2302      	movs	r3, #2
 80066f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066f4:	f000 bc12 	b.w	8006f1c <arm_radix8_butterfly_f32>

080066f8 <arm_cfft_radix8by4_f32>:
 80066f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066fc:	ed2d 8b0a 	vpush	{d8-d12}
 8006700:	b08d      	sub	sp, #52	@ 0x34
 8006702:	460d      	mov	r5, r1
 8006704:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006706:	8801      	ldrh	r1, [r0, #0]
 8006708:	6842      	ldr	r2, [r0, #4]
 800670a:	900a      	str	r0, [sp, #40]	@ 0x28
 800670c:	0849      	lsrs	r1, r1, #1
 800670e:	008b      	lsls	r3, r1, #2
 8006710:	18ee      	adds	r6, r5, r3
 8006712:	18f0      	adds	r0, r6, r3
 8006714:	edd0 5a00 	vldr	s11, [r0]
 8006718:	edd5 7a00 	vldr	s15, [r5]
 800671c:	ed96 7a00 	vldr	s14, [r6]
 8006720:	edd0 3a01 	vldr	s7, [r0, #4]
 8006724:	ed96 4a01 	vldr	s8, [r6, #4]
 8006728:	ed95 5a01 	vldr	s10, [r5, #4]
 800672c:	9008      	str	r0, [sp, #32]
 800672e:	ee37 6aa5 	vadd.f32	s12, s15, s11
 8006732:	18c7      	adds	r7, r0, r3
 8006734:	edd7 4a00 	vldr	s9, [r7]
 8006738:	ed97 3a01 	vldr	s6, [r7, #4]
 800673c:	9701      	str	r7, [sp, #4]
 800673e:	ee77 6a06 	vadd.f32	s13, s14, s12
 8006742:	462c      	mov	r4, r5
 8006744:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006748:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800674c:	ee16 ca90 	vmov	ip, s13
 8006750:	f844 cb08 	str.w	ip, [r4], #8
 8006754:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006758:	edd6 5a01 	vldr	s11, [r6, #4]
 800675c:	edd7 2a01 	vldr	s5, [r7, #4]
 8006760:	9404      	str	r4, [sp, #16]
 8006762:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006766:	ee74 3a27 	vadd.f32	s7, s8, s15
 800676a:	ee36 6a47 	vsub.f32	s12, s12, s14
 800676e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 8006772:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006776:	0849      	lsrs	r1, r1, #1
 8006778:	f102 0e08 	add.w	lr, r2, #8
 800677c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8006780:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006784:	9109      	str	r1, [sp, #36]	@ 0x24
 8006786:	ee35 4a47 	vsub.f32	s8, s10, s14
 800678a:	f1a1 0902 	sub.w	r9, r1, #2
 800678e:	f8cd e00c 	str.w	lr, [sp, #12]
 8006792:	4631      	mov	r1, r6
 8006794:	ee13 ea90 	vmov	lr, s7
 8006798:	ee36 6a64 	vsub.f32	s12, s12, s9
 800679c:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80067a0:	4604      	mov	r4, r0
 80067a2:	edc5 5a01 	vstr	s11, [r5, #4]
 80067a6:	ee37 7a05 	vadd.f32	s14, s14, s10
 80067aa:	f841 eb08 	str.w	lr, [r1], #8
 80067ae:	ee34 5a24 	vadd.f32	s10, s8, s9
 80067b2:	ee16 ea10 	vmov	lr, s12
 80067b6:	ed86 5a01 	vstr	s10, [r6, #4]
 80067ba:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80067be:	f844 eb08 	str.w	lr, [r4], #8
 80067c2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80067c6:	edc0 6a01 	vstr	s13, [r0, #4]
 80067ca:	9405      	str	r4, [sp, #20]
 80067cc:	4604      	mov	r4, r0
 80067ce:	ee17 0a90 	vmov	r0, s15
 80067d2:	9106      	str	r1, [sp, #24]
 80067d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80067d8:	f102 0110 	add.w	r1, r2, #16
 80067dc:	46bc      	mov	ip, r7
 80067de:	9100      	str	r1, [sp, #0]
 80067e0:	f847 0b08 	str.w	r0, [r7], #8
 80067e4:	f102 0118 	add.w	r1, r2, #24
 80067e8:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80067ec:	9102      	str	r1, [sp, #8]
 80067ee:	ed8c 7a01 	vstr	s14, [ip, #4]
 80067f2:	9007      	str	r0, [sp, #28]
 80067f4:	f000 8134 	beq.w	8006a60 <arm_cfft_radix8by4_f32+0x368>
 80067f8:	f102 0920 	add.w	r9, r2, #32
 80067fc:	f102 0830 	add.w	r8, r2, #48	@ 0x30
 8006800:	9a01      	ldr	r2, [sp, #4]
 8006802:	f8dd a000 	ldr.w	sl, [sp]
 8006806:	3b0c      	subs	r3, #12
 8006808:	4683      	mov	fp, r0
 800680a:	4463      	add	r3, ip
 800680c:	f105 0e10 	add.w	lr, r5, #16
 8006810:	f1a4 010c 	sub.w	r1, r4, #12
 8006814:	f104 0510 	add.w	r5, r4, #16
 8006818:	f1a6 0c0c 	sub.w	ip, r6, #12
 800681c:	f1a2 040c 	sub.w	r4, r2, #12
 8006820:	f106 0010 	add.w	r0, r6, #16
 8006824:	3210      	adds	r2, #16
 8006826:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800682a:	ed55 5a02 	vldr	s11, [r5, #-8]
 800682e:	ed50 7a02 	vldr	s15, [r0, #-8]
 8006832:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006836:	ed55 6a01 	vldr	s13, [r5, #-4]
 800683a:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800683e:	ed12 1a01 	vldr	s2, [r2, #-4]
 8006842:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006846:	ee35 4a25 	vadd.f32	s8, s10, s11
 800684a:	ee30 6a26 	vadd.f32	s12, s0, s13
 800684e:	ee37 7a84 	vadd.f32	s14, s15, s8
 8006852:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006856:	ee37 7a21 	vadd.f32	s14, s14, s3
 800685a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800685e:	ed0e 7a02 	vstr	s14, [lr, #-8]
 8006862:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006866:	ed52 6a01 	vldr	s13, [r2, #-4]
 800686a:	ee36 7a07 	vadd.f32	s14, s12, s14
 800686e:	ee78 aa25 	vadd.f32	s21, s16, s11
 8006872:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006876:	ee70 3a67 	vsub.f32	s7, s0, s15
 800687a:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800687e:	ed94 7a02 	vldr	s14, [r4, #8]
 8006882:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006886:	ed91 ba02 	vldr	s22, [r1, #8]
 800688a:	edd3 9a02 	vldr	s19, [r3, #8]
 800688e:	edd4 2a01 	vldr	s5, [r4, #4]
 8006892:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006896:	ed93 5a01 	vldr	s10, [r3, #4]
 800689a:	edd1 0a01 	vldr	s1, [r1, #4]
 800689e:	ee72 6a07 	vadd.f32	s13, s4, s14
 80068a2:	ee32 2a47 	vsub.f32	s4, s4, s14
 80068a6:	ee7b 8a26 	vadd.f32	s17, s22, s13
 80068aa:	ee79 4a22 	vadd.f32	s9, s18, s5
 80068ae:	ee38 7aa9 	vadd.f32	s14, s17, s19
 80068b2:	ee79 2a62 	vsub.f32	s5, s18, s5
 80068b6:	ed8c 7a02 	vstr	s14, [ip, #8]
 80068ba:	ed91 7a01 	vldr	s14, [r1, #4]
 80068be:	edd3 8a01 	vldr	s17, [r3, #4]
 80068c2:	ee34 7a87 	vadd.f32	s14, s9, s14
 80068c6:	ee3b 3a69 	vsub.f32	s6, s22, s19
 80068ca:	ee37 7a28 	vadd.f32	s14, s14, s17
 80068ce:	ee32 9a60 	vsub.f32	s18, s4, s1
 80068d2:	ed8c 7a01 	vstr	s14, [ip, #4]
 80068d6:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80068da:	ed1a aa02 	vldr	s20, [sl, #-8]
 80068de:	ee73 8a22 	vadd.f32	s17, s6, s5
 80068e2:	ee39 9a05 	vadd.f32	s18, s18, s10
 80068e6:	ee7a aac1 	vsub.f32	s21, s21, s2
 80068ea:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80068ee:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80068f2:	ee69 ba07 	vmul.f32	s23, s18, s14
 80068f6:	ee6a aa87 	vmul.f32	s21, s21, s14
 80068fa:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80068fe:	ee63 ca87 	vmul.f32	s25, s7, s14
 8006902:	ee63 3a8a 	vmul.f32	s7, s7, s20
 8006906:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800690a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800690e:	ee73 3aea 	vsub.f32	s7, s7, s21
 8006912:	ee78 8a89 	vadd.f32	s17, s17, s18
 8006916:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800691a:	ee3b aaca 	vsub.f32	s20, s23, s20
 800691e:	ee34 4a67 	vsub.f32	s8, s8, s15
 8006922:	ee76 6acb 	vsub.f32	s13, s13, s22
 8006926:	ee36 6a48 	vsub.f32	s12, s12, s16
 800692a:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800692e:	ed00 7a02 	vstr	s14, [r0, #-8]
 8006932:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006936:	edc1 8a01 	vstr	s17, [r1, #4]
 800693a:	ed81 aa02 	vstr	s20, [r1, #8]
 800693e:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006942:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006946:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800694a:	ed59 6a03 	vldr	s13, [r9, #-12]
 800694e:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006952:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006956:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800695a:	ee66 9a26 	vmul.f32	s19, s12, s13
 800695e:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006962:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006966:	ee24 4a26 	vmul.f32	s8, s8, s13
 800696a:	ee27 7a26 	vmul.f32	s14, s14, s13
 800696e:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006972:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006976:	ee36 6a44 	vsub.f32	s12, s12, s8
 800697a:	ee37 7a64 	vsub.f32	s14, s14, s9
 800697e:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006982:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006986:	ee75 6a60 	vsub.f32	s13, s10, s1
 800698a:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800698e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006992:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006996:	ed05 6a01 	vstr	s12, [r5, #-4]
 800699a:	ed84 7a01 	vstr	s14, [r4, #4]
 800699e:	ed84 4a02 	vstr	s8, [r4, #8]
 80069a2:	ee35 6a81 	vadd.f32	s12, s11, s2
 80069a6:	ee36 7ac2 	vsub.f32	s14, s13, s4
 80069aa:	ed58 5a06 	vldr	s11, [r8, #-24]	@ 0xffffffe8
 80069ae:	ed58 6a05 	vldr	s13, [r8, #-20]	@ 0xffffffec
 80069b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80069b6:	ee77 7ae1 	vsub.f32	s15, s15, s3
 80069ba:	ee67 2a26 	vmul.f32	s5, s14, s13
 80069be:	ee67 4aa6 	vmul.f32	s9, s15, s13
 80069c2:	ee26 5a25 	vmul.f32	s10, s12, s11
 80069c6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80069ca:	ee26 6a26 	vmul.f32	s12, s12, s13
 80069ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80069d2:	ee63 6a26 	vmul.f32	s13, s6, s13
 80069d6:	ee23 3a25 	vmul.f32	s6, s6, s11
 80069da:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80069de:	ee75 5a24 	vadd.f32	s11, s10, s9
 80069e2:	ee32 3ac3 	vsub.f32	s6, s5, s6
 80069e6:	ee36 7a87 	vadd.f32	s14, s13, s14
 80069ea:	f1bb 0b01 	subs.w	fp, fp, #1
 80069ee:	ed42 5a02 	vstr	s11, [r2, #-8]
 80069f2:	ed42 7a01 	vstr	s15, [r2, #-4]
 80069f6:	f10e 0e08 	add.w	lr, lr, #8
 80069fa:	ed83 3a02 	vstr	s6, [r3, #8]
 80069fe:	ed83 7a01 	vstr	s14, [r3, #4]
 8006a02:	f1ac 0c08 	sub.w	ip, ip, #8
 8006a06:	f10a 0a08 	add.w	sl, sl, #8
 8006a0a:	f100 0008 	add.w	r0, r0, #8
 8006a0e:	f1a1 0108 	sub.w	r1, r1, #8
 8006a12:	f109 0910 	add.w	r9, r9, #16
 8006a16:	f105 0508 	add.w	r5, r5, #8
 8006a1a:	f1a4 0408 	sub.w	r4, r4, #8
 8006a1e:	f108 0818 	add.w	r8, r8, #24
 8006a22:	f102 0208 	add.w	r2, r2, #8
 8006a26:	f1a3 0308 	sub.w	r3, r3, #8
 8006a2a:	f47f aefc 	bne.w	8006826 <arm_cfft_radix8by4_f32+0x12e>
 8006a2e:	9907      	ldr	r1, [sp, #28]
 8006a30:	9800      	ldr	r0, [sp, #0]
 8006a32:	00cb      	lsls	r3, r1, #3
 8006a34:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006a38:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006a3c:	9100      	str	r1, [sp, #0]
 8006a3e:	9904      	ldr	r1, [sp, #16]
 8006a40:	4419      	add	r1, r3
 8006a42:	9104      	str	r1, [sp, #16]
 8006a44:	9903      	ldr	r1, [sp, #12]
 8006a46:	4419      	add	r1, r3
 8006a48:	9103      	str	r1, [sp, #12]
 8006a4a:	9906      	ldr	r1, [sp, #24]
 8006a4c:	4419      	add	r1, r3
 8006a4e:	9106      	str	r1, [sp, #24]
 8006a50:	9905      	ldr	r1, [sp, #20]
 8006a52:	441f      	add	r7, r3
 8006a54:	4419      	add	r1, r3
 8006a56:	9b02      	ldr	r3, [sp, #8]
 8006a58:	9105      	str	r1, [sp, #20]
 8006a5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a5e:	9302      	str	r3, [sp, #8]
 8006a60:	9904      	ldr	r1, [sp, #16]
 8006a62:	9805      	ldr	r0, [sp, #20]
 8006a64:	ed91 4a00 	vldr	s8, [r1]
 8006a68:	edd0 6a00 	vldr	s13, [r0]
 8006a6c:	9b06      	ldr	r3, [sp, #24]
 8006a6e:	ed97 3a00 	vldr	s6, [r7]
 8006a72:	edd3 7a00 	vldr	s15, [r3]
 8006a76:	edd0 4a01 	vldr	s9, [r0, #4]
 8006a7a:	edd1 3a01 	vldr	s7, [r1, #4]
 8006a7e:	ed97 2a01 	vldr	s4, [r7, #4]
 8006a82:	ed93 7a01 	vldr	s14, [r3, #4]
 8006a86:	9a03      	ldr	r2, [sp, #12]
 8006a88:	f8bd 4024 	ldrh.w	r4, [sp, #36]	@ 0x24
 8006a8c:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006a90:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006a94:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006a98:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006a9c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006aa0:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006aa4:	ed81 5a00 	vstr	s10, [r1]
 8006aa8:	ed93 5a01 	vldr	s10, [r3, #4]
 8006aac:	edd7 4a01 	vldr	s9, [r7, #4]
 8006ab0:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006ab4:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006ab8:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006abc:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006ac0:	ed81 5a01 	vstr	s10, [r1, #4]
 8006ac4:	edd2 1a00 	vldr	s3, [r2]
 8006ac8:	edd2 2a01 	vldr	s5, [r2, #4]
 8006acc:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006ad0:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006ad4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006ad8:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006adc:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006ae0:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006ae4:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006ae8:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006aec:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006af0:	edc3 2a00 	vstr	s5, [r3]
 8006af4:	ed83 5a01 	vstr	s10, [r3, #4]
 8006af8:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006b02:	ed93 4a01 	vldr	s8, [r3, #4]
 8006b06:	ed93 5a00 	vldr	s10, [r3]
 8006b0a:	9b02      	ldr	r3, [sp, #8]
 8006b0c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006b10:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006b14:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006b18:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006b1c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006b20:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006b24:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006b28:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006b2c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b30:	ed80 6a01 	vstr	s12, [r0, #4]
 8006b34:	edc0 5a00 	vstr	s11, [r0]
 8006b38:	edd3 5a01 	vldr	s11, [r3, #4]
 8006b3c:	edd3 6a00 	vldr	s13, [r3]
 8006b40:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006b44:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006b48:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006b4c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006b50:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006b54:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006b58:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006b5c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006b60:	ed87 7a01 	vstr	s14, [r7, #4]
 8006b64:	edc7 7a00 	vstr	s15, [r7]
 8006b68:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	@ 0x28
 8006b6c:	4621      	mov	r1, r4
 8006b6e:	686a      	ldr	r2, [r5, #4]
 8006b70:	2304      	movs	r3, #4
 8006b72:	f000 f9d3 	bl	8006f1c <arm_radix8_butterfly_f32>
 8006b76:	4630      	mov	r0, r6
 8006b78:	4621      	mov	r1, r4
 8006b7a:	686a      	ldr	r2, [r5, #4]
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	f000 f9cd 	bl	8006f1c <arm_radix8_butterfly_f32>
 8006b82:	9808      	ldr	r0, [sp, #32]
 8006b84:	686a      	ldr	r2, [r5, #4]
 8006b86:	4621      	mov	r1, r4
 8006b88:	2304      	movs	r3, #4
 8006b8a:	f000 f9c7 	bl	8006f1c <arm_radix8_butterfly_f32>
 8006b8e:	686a      	ldr	r2, [r5, #4]
 8006b90:	9801      	ldr	r0, [sp, #4]
 8006b92:	4621      	mov	r1, r4
 8006b94:	2304      	movs	r3, #4
 8006b96:	b00d      	add	sp, #52	@ 0x34
 8006b98:	ecbd 8b0a 	vpop	{d8-d12}
 8006b9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba0:	f000 b9bc 	b.w	8006f1c <arm_radix8_butterfly_f32>

08006ba4 <arm_cfft_f32>:
 8006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba8:	2a01      	cmp	r2, #1
 8006baa:	4606      	mov	r6, r0
 8006bac:	4617      	mov	r7, r2
 8006bae:	460c      	mov	r4, r1
 8006bb0:	4698      	mov	r8, r3
 8006bb2:	8805      	ldrh	r5, [r0, #0]
 8006bb4:	d056      	beq.n	8006c64 <arm_cfft_f32+0xc0>
 8006bb6:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8006bba:	d063      	beq.n	8006c84 <arm_cfft_f32+0xe0>
 8006bbc:	d916      	bls.n	8006bec <arm_cfft_f32+0x48>
 8006bbe:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 8006bc2:	d01a      	beq.n	8006bfa <arm_cfft_f32+0x56>
 8006bc4:	d947      	bls.n	8006c56 <arm_cfft_f32+0xb2>
 8006bc6:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 8006bca:	d05b      	beq.n	8006c84 <arm_cfft_f32+0xe0>
 8006bcc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 8006bd0:	d105      	bne.n	8006bde <arm_cfft_f32+0x3a>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6872      	ldr	r2, [r6, #4]
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4620      	mov	r0, r4
 8006bda:	f000 f99f 	bl	8006f1c <arm_radix8_butterfly_f32>
 8006bde:	f1b8 0f00 	cmp.w	r8, #0
 8006be2:	d111      	bne.n	8006c08 <arm_cfft_f32+0x64>
 8006be4:	2f01      	cmp	r7, #1
 8006be6:	d016      	beq.n	8006c16 <arm_cfft_f32+0x72>
 8006be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bec:	2d20      	cmp	r5, #32
 8006bee:	d049      	beq.n	8006c84 <arm_cfft_f32+0xe0>
 8006bf0:	d935      	bls.n	8006c5e <arm_cfft_f32+0xba>
 8006bf2:	2d40      	cmp	r5, #64	@ 0x40
 8006bf4:	d0ed      	beq.n	8006bd2 <arm_cfft_f32+0x2e>
 8006bf6:	2d80      	cmp	r5, #128	@ 0x80
 8006bf8:	d1f1      	bne.n	8006bde <arm_cfft_f32+0x3a>
 8006bfa:	4621      	mov	r1, r4
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff fcab 	bl	8006558 <arm_cfft_radix8by2_f32>
 8006c02:	f1b8 0f00 	cmp.w	r8, #0
 8006c06:	d0ed      	beq.n	8006be4 <arm_cfft_f32+0x40>
 8006c08:	68b2      	ldr	r2, [r6, #8]
 8006c0a:	89b1      	ldrh	r1, [r6, #12]
 8006c0c:	4620      	mov	r0, r4
 8006c0e:	f000 f841 	bl	8006c94 <arm_bitreversal_32>
 8006c12:	2f01      	cmp	r7, #1
 8006c14:	d1e8      	bne.n	8006be8 <arm_cfft_f32+0x44>
 8006c16:	ee07 5a90 	vmov	s15, r5
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c22:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006c26:	2d00      	cmp	r5, #0
 8006c28:	d0de      	beq.n	8006be8 <arm_cfft_f32+0x44>
 8006c2a:	f104 0108 	add.w	r1, r4, #8
 8006c2e:	2300      	movs	r3, #0
 8006c30:	3301      	adds	r3, #1
 8006c32:	429d      	cmp	r5, r3
 8006c34:	f101 0108 	add.w	r1, r1, #8
 8006c38:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006c3c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006c40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006c44:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006c48:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006c4c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006c50:	d1ee      	bne.n	8006c30 <arm_cfft_f32+0x8c>
 8006c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c56:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 8006c5a:	d0ba      	beq.n	8006bd2 <arm_cfft_f32+0x2e>
 8006c5c:	e7bf      	b.n	8006bde <arm_cfft_f32+0x3a>
 8006c5e:	2d10      	cmp	r5, #16
 8006c60:	d0cb      	beq.n	8006bfa <arm_cfft_f32+0x56>
 8006c62:	e7bc      	b.n	8006bde <arm_cfft_f32+0x3a>
 8006c64:	b19d      	cbz	r5, 8006c8e <arm_cfft_f32+0xea>
 8006c66:	f101 030c 	add.w	r3, r1, #12
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006c70:	3201      	adds	r2, #1
 8006c72:	eef1 7a67 	vneg.f32	s15, s15
 8006c76:	4295      	cmp	r5, r2
 8006c78:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006c7c:	f103 0308 	add.w	r3, r3, #8
 8006c80:	d1f4      	bne.n	8006c6c <arm_cfft_f32+0xc8>
 8006c82:	e798      	b.n	8006bb6 <arm_cfft_f32+0x12>
 8006c84:	4621      	mov	r1, r4
 8006c86:	4630      	mov	r0, r6
 8006c88:	f7ff fd36 	bl	80066f8 <arm_cfft_radix8by4_f32>
 8006c8c:	e7a7      	b.n	8006bde <arm_cfft_f32+0x3a>
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0aa      	beq.n	8006be8 <arm_cfft_f32+0x44>
 8006c92:	e7b9      	b.n	8006c08 <arm_cfft_f32+0x64>

08006c94 <arm_bitreversal_32>:
 8006c94:	b1e9      	cbz	r1, 8006cd2 <arm_bitreversal_32+0x3e>
 8006c96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c98:	2500      	movs	r5, #0
 8006c9a:	f102 0e02 	add.w	lr, r2, #2
 8006c9e:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006ca2:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006ca6:	08a4      	lsrs	r4, r4, #2
 8006ca8:	089b      	lsrs	r3, r3, #2
 8006caa:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006cae:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006cb2:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006cb6:	00a6      	lsls	r6, r4, #2
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	1d34      	adds	r4, r6, #4
 8006cc2:	3502      	adds	r5, #2
 8006cc4:	58c6      	ldr	r6, [r0, r3]
 8006cc6:	5907      	ldr	r7, [r0, r4]
 8006cc8:	50c7      	str	r7, [r0, r3]
 8006cca:	428d      	cmp	r5, r1
 8006ccc:	5106      	str	r6, [r0, r4]
 8006cce:	d3e6      	bcc.n	8006c9e <arm_bitreversal_32+0xa>
 8006cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cd2:	4770      	bx	lr

08006cd4 <arm_cmplx_mag_f32>:
 8006cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cd8:	ed2d 8b02 	vpush	{d8}
 8006cdc:	0897      	lsrs	r7, r2, #2
 8006cde:	b084      	sub	sp, #16
 8006ce0:	d077      	beq.n	8006dd2 <arm_cmplx_mag_f32+0xfe>
 8006ce2:	f04f 0800 	mov.w	r8, #0
 8006ce6:	f100 0420 	add.w	r4, r0, #32
 8006cea:	f101 0510 	add.w	r5, r1, #16
 8006cee:	463e      	mov	r6, r7
 8006cf0:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 8006cf4:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 8006cf8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006cfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d0c:	f2c0 80c5 	blt.w	8006e9a <arm_cmplx_mag_f32+0x1c6>
 8006d10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d1c:	f100 80cb 	bmi.w	8006eb6 <arm_cmplx_mag_f32+0x1e2>
 8006d20:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006d24:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 8006d28:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 8006d2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d40:	f2c0 80a8 	blt.w	8006e94 <arm_cmplx_mag_f32+0x1c0>
 8006d44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d50:	f100 80a8 	bmi.w	8006ea4 <arm_cmplx_mag_f32+0x1d0>
 8006d54:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006d58:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006d5c:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006d60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006d6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d74:	f2c0 808b 	blt.w	8006e8e <arm_cmplx_mag_f32+0x1ba>
 8006d78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d80:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006d84:	f100 80a9 	bmi.w	8006eda <arm_cmplx_mag_f32+0x206>
 8006d88:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006d8c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006d90:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006d94:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006d98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006d9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006da0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da8:	db6e      	blt.n	8006e88 <arm_cmplx_mag_f32+0x1b4>
 8006daa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db2:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006db6:	f100 8087 	bmi.w	8006ec8 <arm_cmplx_mag_f32+0x1f4>
 8006dba:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006dbe:	3e01      	subs	r6, #1
 8006dc0:	f104 0420 	add.w	r4, r4, #32
 8006dc4:	f105 0510 	add.w	r5, r5, #16
 8006dc8:	d192      	bne.n	8006cf0 <arm_cmplx_mag_f32+0x1c>
 8006dca:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006dce:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006dd2:	f012 0203 	ands.w	r2, r2, #3
 8006dd6:	d052      	beq.n	8006e7e <arm_cmplx_mag_f32+0x1aa>
 8006dd8:	ed90 0a00 	vldr	s0, [r0]
 8006ddc:	edd0 7a01 	vldr	s15, [r0, #4]
 8006de0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006de4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006de8:	2300      	movs	r3, #0
 8006dea:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006dee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006df6:	bfb8      	it	lt
 8006df8:	600b      	strlt	r3, [r1, #0]
 8006dfa:	db08      	blt.n	8006e0e <arm_cmplx_mag_f32+0x13a>
 8006dfc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e04:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e08:	d479      	bmi.n	8006efe <arm_cmplx_mag_f32+0x22a>
 8006e0a:	ed81 8a00 	vstr	s16, [r1]
 8006e0e:	3a01      	subs	r2, #1
 8006e10:	d035      	beq.n	8006e7e <arm_cmplx_mag_f32+0x1aa>
 8006e12:	ed90 0a02 	vldr	s0, [r0, #8]
 8006e16:	edd0 7a03 	vldr	s15, [r0, #12]
 8006e1a:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e22:	2300      	movs	r3, #0
 8006e24:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006e28:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e30:	bfb8      	it	lt
 8006e32:	604b      	strlt	r3, [r1, #4]
 8006e34:	db08      	blt.n	8006e48 <arm_cmplx_mag_f32+0x174>
 8006e36:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e3e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e42:	d453      	bmi.n	8006eec <arm_cmplx_mag_f32+0x218>
 8006e44:	ed81 8a01 	vstr	s16, [r1, #4]
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d018      	beq.n	8006e7e <arm_cmplx_mag_f32+0x1aa>
 8006e4c:	ed90 0a04 	vldr	s0, [r0, #16]
 8006e50:	edd0 7a05 	vldr	s15, [r0, #20]
 8006e54:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e62:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e6a:	db19      	blt.n	8006ea0 <arm_cmplx_mag_f32+0x1cc>
 8006e6c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e78:	d44a      	bmi.n	8006f10 <arm_cmplx_mag_f32+0x23c>
 8006e7a:	ed81 8a02 	vstr	s16, [r1, #8]
 8006e7e:	b004      	add	sp, #16
 8006e80:	ecbd 8b02 	vpop	{d8}
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	f845 8c04 	str.w	r8, [r5, #-4]
 8006e8c:	e797      	b.n	8006dbe <arm_cmplx_mag_f32+0xea>
 8006e8e:	f845 8c08 	str.w	r8, [r5, #-8]
 8006e92:	e77b      	b.n	8006d8c <arm_cmplx_mag_f32+0xb8>
 8006e94:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006e98:	e75e      	b.n	8006d58 <arm_cmplx_mag_f32+0x84>
 8006e9a:	f845 8c10 	str.w	r8, [r5, #-16]
 8006e9e:	e741      	b.n	8006d24 <arm_cmplx_mag_f32+0x50>
 8006ea0:	608b      	str	r3, [r1, #8]
 8006ea2:	e7ec      	b.n	8006e7e <arm_cmplx_mag_f32+0x1aa>
 8006ea4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ea8:	9001      	str	r0, [sp, #4]
 8006eaa:	f003 f93d 	bl	800a128 <sqrtf>
 8006eae:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006eb2:	9801      	ldr	r0, [sp, #4]
 8006eb4:	e74e      	b.n	8006d54 <arm_cmplx_mag_f32+0x80>
 8006eb6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006eba:	9001      	str	r0, [sp, #4]
 8006ebc:	f003 f934 	bl	800a128 <sqrtf>
 8006ec0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ec4:	9801      	ldr	r0, [sp, #4]
 8006ec6:	e72b      	b.n	8006d20 <arm_cmplx_mag_f32+0x4c>
 8006ec8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ecc:	9001      	str	r0, [sp, #4]
 8006ece:	f003 f92b 	bl	800a128 <sqrtf>
 8006ed2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ed6:	9801      	ldr	r0, [sp, #4]
 8006ed8:	e76f      	b.n	8006dba <arm_cmplx_mag_f32+0xe6>
 8006eda:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006ede:	9001      	str	r0, [sp, #4]
 8006ee0:	f003 f922 	bl	800a128 <sqrtf>
 8006ee4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006ee8:	9801      	ldr	r0, [sp, #4]
 8006eea:	e74d      	b.n	8006d88 <arm_cmplx_mag_f32+0xb4>
 8006eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ef0:	9201      	str	r2, [sp, #4]
 8006ef2:	f003 f919 	bl	800a128 <sqrtf>
 8006ef6:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006efa:	9903      	ldr	r1, [sp, #12]
 8006efc:	e7a2      	b.n	8006e44 <arm_cmplx_mag_f32+0x170>
 8006efe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f02:	9201      	str	r2, [sp, #4]
 8006f04:	f003 f910 	bl	800a128 <sqrtf>
 8006f08:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006f0c:	9903      	ldr	r1, [sp, #12]
 8006f0e:	e77c      	b.n	8006e0a <arm_cmplx_mag_f32+0x136>
 8006f10:	9101      	str	r1, [sp, #4]
 8006f12:	f003 f909 	bl	800a128 <sqrtf>
 8006f16:	9901      	ldr	r1, [sp, #4]
 8006f18:	e7af      	b.n	8006e7a <arm_cmplx_mag_f32+0x1a6>
 8006f1a:	bf00      	nop

08006f1c <arm_radix8_butterfly_f32>:
 8006f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f20:	ed2d 8b10 	vpush	{d8-d15}
 8006f24:	b095      	sub	sp, #84	@ 0x54
 8006f26:	e9cd 3210 	strd	r3, r2, [sp, #64]	@ 0x40
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	ed9f bab9 	vldr	s22, [pc, #740]	@ 8007214 <arm_radix8_butterfly_f32+0x2f8>
 8006f32:	9012      	str	r0, [sp, #72]	@ 0x48
 8006f34:	468b      	mov	fp, r1
 8006f36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f38:	4689      	mov	r9, r1
 8006f3a:	ea4f 06db 	mov.w	r6, fp, lsr #3
 8006f3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006f40:	960f      	str	r6, [sp, #60]	@ 0x3c
 8006f42:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8006f46:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8006f4a:	eb03 0508 	add.w	r5, r3, r8
 8006f4e:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 8006f52:	eb05 040e 	add.w	r4, r5, lr
 8006f56:	0137      	lsls	r7, r6, #4
 8006f58:	eba6 030a 	sub.w	r3, r6, sl
 8006f5c:	eb04 000e 	add.w	r0, r4, lr
 8006f60:	44b2      	add	sl, r6
 8006f62:	1d3a      	adds	r2, r7, #4
 8006f64:	9702      	str	r7, [sp, #8]
 8006f66:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8006f6a:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 8006f6e:	ebae 0c06 	sub.w	ip, lr, r6
 8006f72:	9703      	str	r7, [sp, #12]
 8006f74:	eb03 0708 	add.w	r7, r3, r8
 8006f78:	9701      	str	r7, [sp, #4]
 8006f7a:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8006f7e:	9706      	str	r7, [sp, #24]
 8006f80:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8006f82:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8006f86:	f10e 0104 	add.w	r1, lr, #4
 8006f8a:	4439      	add	r1, r7
 8006f8c:	443a      	add	r2, r7
 8006f8e:	0137      	lsls	r7, r6, #4
 8006f90:	00f6      	lsls	r6, r6, #3
 8006f92:	9704      	str	r7, [sp, #16]
 8006f94:	9605      	str	r6, [sp, #20]
 8006f96:	9f01      	ldr	r7, [sp, #4]
 8006f98:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f9a:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 8006f9e:	f04f 0c00 	mov.w	ip, #0
 8006fa2:	edd4 6a00 	vldr	s13, [r4]
 8006fa6:	edd7 1a00 	vldr	s3, [r7]
 8006faa:	ed16 aa01 	vldr	s20, [r6, #-4]
 8006fae:	edd5 5a00 	vldr	s11, [r5]
 8006fb2:	ed52 9a01 	vldr	s19, [r2, #-4]
 8006fb6:	ed90 6a00 	vldr	s12, [r0]
 8006fba:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006fbe:	ed93 3a00 	vldr	s6, [r3]
 8006fc2:	ee39 0a86 	vadd.f32	s0, s19, s12
 8006fc6:	ee33 2a21 	vadd.f32	s4, s6, s3
 8006fca:	ee37 5aa6 	vadd.f32	s10, s15, s13
 8006fce:	ee7a 4a25 	vadd.f32	s9, s20, s11
 8006fd2:	ee35 7a02 	vadd.f32	s14, s10, s4
 8006fd6:	ee34 4a80 	vadd.f32	s8, s9, s0
 8006fda:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006fde:	ee74 6a07 	vadd.f32	s13, s8, s14
 8006fe2:	ee34 4a47 	vsub.f32	s8, s8, s14
 8006fe6:	ed46 6a01 	vstr	s13, [r6, #-4]
 8006fea:	ed85 4a00 	vstr	s8, [r5]
 8006fee:	edd1 6a00 	vldr	s13, [r1]
 8006ff2:	ed94 9a01 	vldr	s18, [r4, #4]
 8006ff6:	edd3 2a01 	vldr	s5, [r3, #4]
 8006ffa:	edd7 8a01 	vldr	s17, [r7, #4]
 8006ffe:	edd6 0a00 	vldr	s1, [r6]
 8007002:	edd5 3a01 	vldr	s7, [r5, #4]
 8007006:	ed90 8a01 	vldr	s16, [r0, #4]
 800700a:	ed92 7a00 	vldr	s14, [r2]
 800700e:	ee33 3a61 	vsub.f32	s6, s6, s3
 8007012:	ee36 4ac9 	vsub.f32	s8, s13, s18
 8007016:	ee72 aae8 	vsub.f32	s21, s5, s17
 800701a:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800701e:	ee34 1a2a 	vadd.f32	s2, s8, s21
 8007022:	ee77 7a83 	vadd.f32	s15, s15, s6
 8007026:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800702a:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800702e:	ee39 6ac6 	vsub.f32	s12, s19, s12
 8007032:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007036:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800703a:	ee77 0a08 	vadd.f32	s1, s14, s16
 800703e:	ee21 1a0b 	vmul.f32	s2, s2, s22
 8007042:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007046:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800704a:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800704e:	ee76 6a89 	vadd.f32	s13, s13, s18
 8007052:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007056:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800705a:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800705e:	ee35 5a42 	vsub.f32	s10, s10, s4
 8007062:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007066:	ee33 2a20 	vadd.f32	s4, s6, s1
 800706a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800706e:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007072:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007076:	ee77 0a01 	vadd.f32	s1, s14, s2
 800707a:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800707e:	ee37 7a41 	vsub.f32	s14, s14, s2
 8007082:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007086:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800708a:	ee76 3a27 	vadd.f32	s7, s12, s15
 800708e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007092:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007096:	ee33 1a45 	vsub.f32	s2, s6, s10
 800709a:	ee32 2a40 	vsub.f32	s4, s4, s0
 800709e:	ee35 5a03 	vadd.f32	s10, s10, s6
 80070a2:	ee34 0aa6 	vadd.f32	s0, s9, s13
 80070a6:	ee32 3aa0 	vadd.f32	s6, s5, s1
 80070aa:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80070ae:	ee34 6a67 	vsub.f32	s12, s8, s15
 80070b2:	ee75 4a87 	vadd.f32	s9, s11, s14
 80070b6:	ee72 2ae0 	vsub.f32	s5, s5, s1
 80070ba:	ee35 7ac7 	vsub.f32	s14, s11, s14
 80070be:	ee77 7a84 	vadd.f32	s15, s15, s8
 80070c2:	ee71 5ae3 	vsub.f32	s11, s3, s7
 80070c6:	44dc      	add	ip, fp
 80070c8:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80070cc:	45e1      	cmp	r9, ip
 80070ce:	ed86 8a00 	vstr	s16, [r6]
 80070d2:	ed85 2a01 	vstr	s4, [r5, #4]
 80070d6:	4456      	add	r6, sl
 80070d8:	ed02 0a01 	vstr	s0, [r2, #-4]
 80070dc:	4455      	add	r5, sl
 80070de:	edc0 6a00 	vstr	s13, [r0]
 80070e2:	ed82 1a00 	vstr	s2, [r2]
 80070e6:	ed80 5a01 	vstr	s10, [r0, #4]
 80070ea:	4452      	add	r2, sl
 80070ec:	ed01 3a01 	vstr	s6, [r1, #-4]
 80070f0:	4450      	add	r0, sl
 80070f2:	edc7 2a00 	vstr	s5, [r7]
 80070f6:	edc4 4a00 	vstr	s9, [r4]
 80070fa:	ed83 7a00 	vstr	s14, [r3]
 80070fe:	edc1 5a00 	vstr	s11, [r1]
 8007102:	edc7 3a01 	vstr	s7, [r7, #4]
 8007106:	4451      	add	r1, sl
 8007108:	ed84 6a01 	vstr	s12, [r4, #4]
 800710c:	4457      	add	r7, sl
 800710e:	edc3 7a01 	vstr	s15, [r3, #4]
 8007112:	4454      	add	r4, sl
 8007114:	4453      	add	r3, sl
 8007116:	f63f af44 	bhi.w	8006fa2 <arm_radix8_butterfly_f32+0x86>
 800711a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711c:	2b07      	cmp	r3, #7
 800711e:	f240 81b7 	bls.w	8007490 <arm_radix8_butterfly_f32+0x574>
 8007122:	9b06      	ldr	r3, [sp, #24]
 8007124:	9903      	ldr	r1, [sp, #12]
 8007126:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007128:	9e05      	ldr	r6, [sp, #20]
 800712a:	9a04      	ldr	r2, [sp, #16]
 800712c:	f103 0c08 	add.w	ip, r3, #8
 8007130:	9b02      	ldr	r3, [sp, #8]
 8007132:	3108      	adds	r1, #8
 8007134:	f108 0808 	add.w	r8, r8, #8
 8007138:	1841      	adds	r1, r0, r1
 800713a:	3608      	adds	r6, #8
 800713c:	330c      	adds	r3, #12
 800713e:	4604      	mov	r4, r0
 8007140:	4444      	add	r4, r8
 8007142:	18c3      	adds	r3, r0, r3
 8007144:	9109      	str	r1, [sp, #36]	@ 0x24
 8007146:	1981      	adds	r1, r0, r6
 8007148:	f10e 0e08 	add.w	lr, lr, #8
 800714c:	3208      	adds	r2, #8
 800714e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007150:	9107      	str	r1, [sp, #28]
 8007152:	4604      	mov	r4, r0
 8007154:	4601      	mov	r1, r0
 8007156:	9304      	str	r3, [sp, #16]
 8007158:	f100 030c 	add.w	r3, r0, #12
 800715c:	4474      	add	r4, lr
 800715e:	f04f 0801 	mov.w	r8, #1
 8007162:	1882      	adds	r2, r0, r2
 8007164:	4461      	add	r1, ip
 8007166:	9305      	str	r3, [sp, #20]
 8007168:	464b      	mov	r3, r9
 800716a:	940a      	str	r4, [sp, #40]	@ 0x28
 800716c:	46c1      	mov	r9, r8
 800716e:	9208      	str	r2, [sp, #32]
 8007170:	46d8      	mov	r8, fp
 8007172:	9106      	str	r1, [sp, #24]
 8007174:	f04f 0e00 	mov.w	lr, #0
 8007178:	469b      	mov	fp, r3
 800717a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800717c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800717e:	449e      	add	lr, r3
 8007180:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8007184:	441a      	add	r2, r3
 8007186:	920e      	str	r2, [sp, #56]	@ 0x38
 8007188:	441a      	add	r2, r3
 800718a:	18d4      	adds	r4, r2, r3
 800718c:	18e5      	adds	r5, r4, r3
 800718e:	18ee      	adds	r6, r5, r3
 8007190:	18f7      	adds	r7, r6, r3
 8007192:	eb07 0c03 	add.w	ip, r7, r3
 8007196:	920d      	str	r2, [sp, #52]	@ 0x34
 8007198:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 800719c:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 80071a0:	910c      	str	r1, [sp, #48]	@ 0x30
 80071a2:	4419      	add	r1, r3
 80071a4:	9103      	str	r1, [sp, #12]
 80071a6:	4419      	add	r1, r3
 80071a8:	18ca      	adds	r2, r1, r3
 80071aa:	9202      	str	r2, [sp, #8]
 80071ac:	441a      	add	r2, r3
 80071ae:	18d0      	adds	r0, r2, r3
 80071b0:	ed92 ea01 	vldr	s28, [r2, #4]
 80071b4:	9a02      	ldr	r2, [sp, #8]
 80071b6:	edd4 7a00 	vldr	s15, [r4]
 80071ba:	edd2 da01 	vldr	s27, [r2, #4]
 80071be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071c0:	ed91 da01 	vldr	s26, [r1, #4]
 80071c4:	ed92 ca01 	vldr	s24, [r2, #4]
 80071c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071ca:	9903      	ldr	r1, [sp, #12]
 80071cc:	edcd 7a03 	vstr	s15, [sp, #12]
 80071d0:	edd2 7a00 	vldr	s15, [r2]
 80071d4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071d6:	edcd 7a02 	vstr	s15, [sp, #8]
 80071da:	edd2 7a00 	vldr	s15, [r2]
 80071de:	edd0 ea01 	vldr	s29, [r0, #4]
 80071e2:	edd1 ca01 	vldr	s25, [r1, #4]
 80071e6:	eddc ba00 	vldr	s23, [ip]
 80071ea:	edd7 aa00 	vldr	s21, [r7]
 80071ee:	ed96 aa00 	vldr	s20, [r6]
 80071f2:	edd5 9a00 	vldr	s19, [r5]
 80071f6:	edcd 7a01 	vstr	s15, [sp, #4]
 80071fa:	4403      	add	r3, r0
 80071fc:	ed93 fa01 	vldr	s30, [r3, #4]
 8007200:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 8007204:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 8007208:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800720c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8007210:	46cc      	mov	ip, r9
 8007212:	e001      	b.n	8007218 <arm_radix8_butterfly_f32+0x2fc>
 8007214:	3f3504f3 	.word	0x3f3504f3
 8007218:	ed91 6a00 	vldr	s12, [r1]
 800721c:	ed93 5a00 	vldr	s10, [r3]
 8007220:	edd0 fa00 	vldr	s31, [r0]
 8007224:	edd4 7a00 	vldr	s15, [r4]
 8007228:	ed95 7a00 	vldr	s14, [r5]
 800722c:	ed56 3a01 	vldr	s7, [r6, #-4]
 8007230:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007234:	ed92 2a00 	vldr	s4, [r2]
 8007238:	ed96 0a00 	vldr	s0, [r6]
 800723c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8007240:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007244:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007248:	ee77 4a87 	vadd.f32	s9, s15, s14
 800724c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8007250:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007254:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007258:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800725c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007260:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007264:	edd4 8a01 	vldr	s17, [r4, #4]
 8007268:	ed92 9a01 	vldr	s18, [r2, #4]
 800726c:	edd7 0a00 	vldr	s1, [r7]
 8007270:	edd1 2a01 	vldr	s5, [r1, #4]
 8007274:	ed95 7a01 	vldr	s14, [r5, #4]
 8007278:	ed93 6a01 	vldr	s12, [r3, #4]
 800727c:	edd0 5a01 	vldr	s11, [r0, #4]
 8007280:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007284:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007288:	ee39 5a62 	vsub.f32	s10, s18, s5
 800728c:	ee78 fac7 	vsub.f32	s31, s17, s14
 8007290:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007294:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007298:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800729c:	ee79 2a22 	vadd.f32	s5, s18, s5
 80072a0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80072a4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80072a8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80072ac:	ee75 8a6f 	vsub.f32	s17, s10, s31
 80072b0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80072b4:	ee35 5a2f 	vadd.f32	s10, s10, s31
 80072b8:	ee32 1a08 	vadd.f32	s2, s4, s16
 80072bc:	ee72 fa87 	vadd.f32	s31, s5, s14
 80072c0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80072c4:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80072c8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80072cc:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80072d0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80072d4:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80072d8:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80072dc:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80072e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80072e4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80072e8:	ee74 0a22 	vadd.f32	s1, s8, s5
 80072ec:	ee36 0a28 	vadd.f32	s0, s12, s17
 80072f0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80072f4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80072f8:	ee32 4a64 	vsub.f32	s8, s4, s9
 80072fc:	ee73 8a09 	vadd.f32	s17, s6, s18
 8007300:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007304:	ee33 9a49 	vsub.f32	s18, s6, s18
 8007308:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800730c:	ee35 3a85 	vadd.f32	s6, s11, s10
 8007310:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8007314:	ee33 5aa7 	vadd.f32	s10, s7, s15
 8007318:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800731c:	ee69 3aa6 	vmul.f32	s7, s19, s13
 8007320:	ee30 7a68 	vsub.f32	s14, s0, s17
 8007324:	ee35 8a03 	vadd.f32	s16, s10, s6
 8007328:	ee38 0a80 	vadd.f32	s0, s17, s0
 800732c:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007330:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007334:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007338:	eddd 1a02 	vldr	s3, [sp, #8]
 800733c:	ee35 5a43 	vsub.f32	s10, s10, s6
 8007340:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007344:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007348:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800734c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007350:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007354:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007358:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800735c:	ee39 6a06 	vadd.f32	s12, s18, s12
 8007360:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007364:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007368:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800736c:	ee22 7a07 	vmul.f32	s14, s4, s14
 8007370:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007374:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007378:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800737c:	ee31 1a09 	vadd.f32	s2, s2, s18
 8007380:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007384:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007388:	ee74 0a60 	vsub.f32	s1, s8, s1
 800738c:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007390:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007394:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007398:	ee72 1a21 	vadd.f32	s3, s4, s3
 800739c:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 80073a0:	ee38 2a89 	vadd.f32	s4, s17, s18
 80073a4:	ee2f 5a05 	vmul.f32	s10, s30, s10
 80073a8:	ee38 8a04 	vadd.f32	s16, s16, s8
 80073ac:	ee2e 9a25 	vmul.f32	s18, s28, s11
 80073b0:	ee2a 4a25 	vmul.f32	s8, s20, s11
 80073b4:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 80073b8:	eddd 5a03 	vldr	s11, [sp, #12]
 80073bc:	edc6 fa00 	vstr	s31, [r6]
 80073c0:	ee2b 0a80 	vmul.f32	s0, s23, s0
 80073c4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80073c8:	ee30 0a45 	vsub.f32	s0, s0, s10
 80073cc:	ee6a 4a03 	vmul.f32	s9, s20, s6
 80073d0:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80073d4:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80073d8:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80073dc:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80073e0:	ee25 6a86 	vmul.f32	s12, s11, s12
 80073e4:	ee74 4a89 	vadd.f32	s9, s9, s18
 80073e8:	ee34 3a43 	vsub.f32	s6, s8, s6
 80073ec:	ee78 8a85 	vadd.f32	s17, s17, s10
 80073f0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80073f4:	44c4      	add	ip, r8
 80073f6:	45e3      	cmp	fp, ip
 80073f8:	edc3 3a00 	vstr	s7, [r3]
 80073fc:	edc3 6a01 	vstr	s13, [r3, #4]
 8007400:	4456      	add	r6, sl
 8007402:	ed07 1a01 	vstr	s2, [r7, #-4]
 8007406:	edc7 0a00 	vstr	s1, [r7]
 800740a:	4453      	add	r3, sl
 800740c:	ed80 2a00 	vstr	s4, [r0]
 8007410:	edc0 2a01 	vstr	s5, [r0, #4]
 8007414:	4457      	add	r7, sl
 8007416:	edc2 1a00 	vstr	s3, [r2]
 800741a:	ed82 7a01 	vstr	s14, [r2, #4]
 800741e:	4450      	add	r0, sl
 8007420:	ed85 8a00 	vstr	s16, [r5]
 8007424:	ed85 0a01 	vstr	s0, [r5, #4]
 8007428:	4452      	add	r2, sl
 800742a:	edc1 4a00 	vstr	s9, [r1]
 800742e:	4455      	add	r5, sl
 8007430:	ed81 3a01 	vstr	s6, [r1, #4]
 8007434:	edc4 8a00 	vstr	s17, [r4]
 8007438:	ed84 6a01 	vstr	s12, [r4, #4]
 800743c:	4451      	add	r1, sl
 800743e:	4454      	add	r4, sl
 8007440:	f63f aeea 	bhi.w	8007218 <arm_radix8_butterfly_f32+0x2fc>
 8007444:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007446:	3308      	adds	r3, #8
 8007448:	930b      	str	r3, [sp, #44]	@ 0x2c
 800744a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800744c:	3308      	adds	r3, #8
 800744e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007452:	3308      	adds	r3, #8
 8007454:	9309      	str	r3, [sp, #36]	@ 0x24
 8007456:	9b08      	ldr	r3, [sp, #32]
 8007458:	3308      	adds	r3, #8
 800745a:	9308      	str	r3, [sp, #32]
 800745c:	9b07      	ldr	r3, [sp, #28]
 800745e:	3308      	adds	r3, #8
 8007460:	9307      	str	r3, [sp, #28]
 8007462:	9b06      	ldr	r3, [sp, #24]
 8007464:	3308      	adds	r3, #8
 8007466:	9306      	str	r3, [sp, #24]
 8007468:	9b05      	ldr	r3, [sp, #20]
 800746a:	3308      	adds	r3, #8
 800746c:	9305      	str	r3, [sp, #20]
 800746e:	9b04      	ldr	r3, [sp, #16]
 8007470:	3308      	adds	r3, #8
 8007472:	9304      	str	r3, [sp, #16]
 8007474:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007476:	f109 0901 	add.w	r9, r9, #1
 800747a:	454b      	cmp	r3, r9
 800747c:	f47f ae7d 	bne.w	800717a <arm_radix8_butterfly_f32+0x25e>
 8007480:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	b29b      	uxth	r3, r3
 8007486:	46d9      	mov	r9, fp
 8007488:	9310      	str	r3, [sp, #64]	@ 0x40
 800748a:	f8dd b03c 	ldr.w	fp, [sp, #60]	@ 0x3c
 800748e:	e554      	b.n	8006f3a <arm_radix8_butterfly_f32+0x1e>
 8007490:	b015      	add	sp, #84	@ 0x54
 8007492:	ecbd 8b10 	vpop	{d8-d15}
 8007496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749a:	bf00      	nop

0800749c <__cvt>:
 800749c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	ec57 6b10 	vmov	r6, r7, d0
 80074a4:	2f00      	cmp	r7, #0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4619      	mov	r1, r3
 80074aa:	463b      	mov	r3, r7
 80074ac:	bfbb      	ittet	lt
 80074ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80074b2:	461f      	movlt	r7, r3
 80074b4:	2300      	movge	r3, #0
 80074b6:	232d      	movlt	r3, #45	@ 0x2d
 80074b8:	700b      	strb	r3, [r1, #0]
 80074ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80074c0:	4691      	mov	r9, r2
 80074c2:	f023 0820 	bic.w	r8, r3, #32
 80074c6:	bfbc      	itt	lt
 80074c8:	4632      	movlt	r2, r6
 80074ca:	4616      	movlt	r6, r2
 80074cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80074d0:	d005      	beq.n	80074de <__cvt+0x42>
 80074d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80074d6:	d100      	bne.n	80074da <__cvt+0x3e>
 80074d8:	3401      	adds	r4, #1
 80074da:	2102      	movs	r1, #2
 80074dc:	e000      	b.n	80074e0 <__cvt+0x44>
 80074de:	2103      	movs	r1, #3
 80074e0:	ab03      	add	r3, sp, #12
 80074e2:	9301      	str	r3, [sp, #4]
 80074e4:	ab02      	add	r3, sp, #8
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	ec47 6b10 	vmov	d0, r6, r7
 80074ec:	4653      	mov	r3, sl
 80074ee:	4622      	mov	r2, r4
 80074f0:	f000 fe5a 	bl	80081a8 <_dtoa_r>
 80074f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80074f8:	4605      	mov	r5, r0
 80074fa:	d119      	bne.n	8007530 <__cvt+0x94>
 80074fc:	f019 0f01 	tst.w	r9, #1
 8007500:	d00e      	beq.n	8007520 <__cvt+0x84>
 8007502:	eb00 0904 	add.w	r9, r0, r4
 8007506:	2200      	movs	r2, #0
 8007508:	2300      	movs	r3, #0
 800750a:	4630      	mov	r0, r6
 800750c:	4639      	mov	r1, r7
 800750e:	f7f9 fadb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007512:	b108      	cbz	r0, 8007518 <__cvt+0x7c>
 8007514:	f8cd 900c 	str.w	r9, [sp, #12]
 8007518:	2230      	movs	r2, #48	@ 0x30
 800751a:	9b03      	ldr	r3, [sp, #12]
 800751c:	454b      	cmp	r3, r9
 800751e:	d31e      	bcc.n	800755e <__cvt+0xc2>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007524:	1b5b      	subs	r3, r3, r5
 8007526:	4628      	mov	r0, r5
 8007528:	6013      	str	r3, [r2, #0]
 800752a:	b004      	add	sp, #16
 800752c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007530:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007534:	eb00 0904 	add.w	r9, r0, r4
 8007538:	d1e5      	bne.n	8007506 <__cvt+0x6a>
 800753a:	7803      	ldrb	r3, [r0, #0]
 800753c:	2b30      	cmp	r3, #48	@ 0x30
 800753e:	d10a      	bne.n	8007556 <__cvt+0xba>
 8007540:	2200      	movs	r2, #0
 8007542:	2300      	movs	r3, #0
 8007544:	4630      	mov	r0, r6
 8007546:	4639      	mov	r1, r7
 8007548:	f7f9 fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800754c:	b918      	cbnz	r0, 8007556 <__cvt+0xba>
 800754e:	f1c4 0401 	rsb	r4, r4, #1
 8007552:	f8ca 4000 	str.w	r4, [sl]
 8007556:	f8da 3000 	ldr.w	r3, [sl]
 800755a:	4499      	add	r9, r3
 800755c:	e7d3      	b.n	8007506 <__cvt+0x6a>
 800755e:	1c59      	adds	r1, r3, #1
 8007560:	9103      	str	r1, [sp, #12]
 8007562:	701a      	strb	r2, [r3, #0]
 8007564:	e7d9      	b.n	800751a <__cvt+0x7e>

08007566 <__exponent>:
 8007566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007568:	2900      	cmp	r1, #0
 800756a:	bfba      	itte	lt
 800756c:	4249      	neglt	r1, r1
 800756e:	232d      	movlt	r3, #45	@ 0x2d
 8007570:	232b      	movge	r3, #43	@ 0x2b
 8007572:	2909      	cmp	r1, #9
 8007574:	7002      	strb	r2, [r0, #0]
 8007576:	7043      	strb	r3, [r0, #1]
 8007578:	dd29      	ble.n	80075ce <__exponent+0x68>
 800757a:	f10d 0307 	add.w	r3, sp, #7
 800757e:	461d      	mov	r5, r3
 8007580:	270a      	movs	r7, #10
 8007582:	461a      	mov	r2, r3
 8007584:	fbb1 f6f7 	udiv	r6, r1, r7
 8007588:	fb07 1416 	mls	r4, r7, r6, r1
 800758c:	3430      	adds	r4, #48	@ 0x30
 800758e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007592:	460c      	mov	r4, r1
 8007594:	2c63      	cmp	r4, #99	@ 0x63
 8007596:	f103 33ff 	add.w	r3, r3, #4294967295
 800759a:	4631      	mov	r1, r6
 800759c:	dcf1      	bgt.n	8007582 <__exponent+0x1c>
 800759e:	3130      	adds	r1, #48	@ 0x30
 80075a0:	1e94      	subs	r4, r2, #2
 80075a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80075a6:	1c41      	adds	r1, r0, #1
 80075a8:	4623      	mov	r3, r4
 80075aa:	42ab      	cmp	r3, r5
 80075ac:	d30a      	bcc.n	80075c4 <__exponent+0x5e>
 80075ae:	f10d 0309 	add.w	r3, sp, #9
 80075b2:	1a9b      	subs	r3, r3, r2
 80075b4:	42ac      	cmp	r4, r5
 80075b6:	bf88      	it	hi
 80075b8:	2300      	movhi	r3, #0
 80075ba:	3302      	adds	r3, #2
 80075bc:	4403      	add	r3, r0
 80075be:	1a18      	subs	r0, r3, r0
 80075c0:	b003      	add	sp, #12
 80075c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80075c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80075cc:	e7ed      	b.n	80075aa <__exponent+0x44>
 80075ce:	2330      	movs	r3, #48	@ 0x30
 80075d0:	3130      	adds	r1, #48	@ 0x30
 80075d2:	7083      	strb	r3, [r0, #2]
 80075d4:	70c1      	strb	r1, [r0, #3]
 80075d6:	1d03      	adds	r3, r0, #4
 80075d8:	e7f1      	b.n	80075be <__exponent+0x58>
	...

080075dc <_printf_float>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	b08d      	sub	sp, #52	@ 0x34
 80075e2:	460c      	mov	r4, r1
 80075e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80075e8:	4616      	mov	r6, r2
 80075ea:	461f      	mov	r7, r3
 80075ec:	4605      	mov	r5, r0
 80075ee:	f000 fcdb 	bl	8007fa8 <_localeconv_r>
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	9304      	str	r3, [sp, #16]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7f8 fe3a 	bl	8000270 <strlen>
 80075fc:	2300      	movs	r3, #0
 80075fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007600:	f8d8 3000 	ldr.w	r3, [r8]
 8007604:	9005      	str	r0, [sp, #20]
 8007606:	3307      	adds	r3, #7
 8007608:	f023 0307 	bic.w	r3, r3, #7
 800760c:	f103 0208 	add.w	r2, r3, #8
 8007610:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007614:	f8d4 b000 	ldr.w	fp, [r4]
 8007618:	f8c8 2000 	str.w	r2, [r8]
 800761c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007620:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007624:	9307      	str	r3, [sp, #28]
 8007626:	f8cd 8018 	str.w	r8, [sp, #24]
 800762a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	4b9c      	ldr	r3, [pc, #624]	@ (80078a4 <_printf_float+0x2c8>)
 8007634:	f04f 32ff 	mov.w	r2, #4294967295
 8007638:	f7f9 fa78 	bl	8000b2c <__aeabi_dcmpun>
 800763c:	bb70      	cbnz	r0, 800769c <_printf_float+0xc0>
 800763e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007642:	4b98      	ldr	r3, [pc, #608]	@ (80078a4 <_printf_float+0x2c8>)
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	f7f9 fa52 	bl	8000af0 <__aeabi_dcmple>
 800764c:	bb30      	cbnz	r0, 800769c <_printf_float+0xc0>
 800764e:	2200      	movs	r2, #0
 8007650:	2300      	movs	r3, #0
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	f7f9 fa41 	bl	8000adc <__aeabi_dcmplt>
 800765a:	b110      	cbz	r0, 8007662 <_printf_float+0x86>
 800765c:	232d      	movs	r3, #45	@ 0x2d
 800765e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007662:	4a91      	ldr	r2, [pc, #580]	@ (80078a8 <_printf_float+0x2cc>)
 8007664:	4b91      	ldr	r3, [pc, #580]	@ (80078ac <_printf_float+0x2d0>)
 8007666:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800766a:	bf94      	ite	ls
 800766c:	4690      	movls	r8, r2
 800766e:	4698      	movhi	r8, r3
 8007670:	2303      	movs	r3, #3
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f02b 0304 	bic.w	r3, fp, #4
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	f04f 0900 	mov.w	r9, #0
 800767e:	9700      	str	r7, [sp, #0]
 8007680:	4633      	mov	r3, r6
 8007682:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 f9d2 	bl	8007a30 <_printf_common>
 800768c:	3001      	adds	r0, #1
 800768e:	f040 808d 	bne.w	80077ac <_printf_float+0x1d0>
 8007692:	f04f 30ff 	mov.w	r0, #4294967295
 8007696:	b00d      	add	sp, #52	@ 0x34
 8007698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800769c:	4642      	mov	r2, r8
 800769e:	464b      	mov	r3, r9
 80076a0:	4640      	mov	r0, r8
 80076a2:	4649      	mov	r1, r9
 80076a4:	f7f9 fa42 	bl	8000b2c <__aeabi_dcmpun>
 80076a8:	b140      	cbz	r0, 80076bc <_printf_float+0xe0>
 80076aa:	464b      	mov	r3, r9
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	bfbc      	itt	lt
 80076b0:	232d      	movlt	r3, #45	@ 0x2d
 80076b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80076b6:	4a7e      	ldr	r2, [pc, #504]	@ (80078b0 <_printf_float+0x2d4>)
 80076b8:	4b7e      	ldr	r3, [pc, #504]	@ (80078b4 <_printf_float+0x2d8>)
 80076ba:	e7d4      	b.n	8007666 <_printf_float+0x8a>
 80076bc:	6863      	ldr	r3, [r4, #4]
 80076be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80076c2:	9206      	str	r2, [sp, #24]
 80076c4:	1c5a      	adds	r2, r3, #1
 80076c6:	d13b      	bne.n	8007740 <_printf_float+0x164>
 80076c8:	2306      	movs	r3, #6
 80076ca:	6063      	str	r3, [r4, #4]
 80076cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80076d0:	2300      	movs	r3, #0
 80076d2:	6022      	str	r2, [r4, #0]
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80076d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80076dc:	ab09      	add	r3, sp, #36	@ 0x24
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	6861      	ldr	r1, [r4, #4]
 80076e2:	ec49 8b10 	vmov	d0, r8, r9
 80076e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80076ea:	4628      	mov	r0, r5
 80076ec:	f7ff fed6 	bl	800749c <__cvt>
 80076f0:	9b06      	ldr	r3, [sp, #24]
 80076f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076f4:	2b47      	cmp	r3, #71	@ 0x47
 80076f6:	4680      	mov	r8, r0
 80076f8:	d129      	bne.n	800774e <_printf_float+0x172>
 80076fa:	1cc8      	adds	r0, r1, #3
 80076fc:	db02      	blt.n	8007704 <_printf_float+0x128>
 80076fe:	6863      	ldr	r3, [r4, #4]
 8007700:	4299      	cmp	r1, r3
 8007702:	dd41      	ble.n	8007788 <_printf_float+0x1ac>
 8007704:	f1aa 0a02 	sub.w	sl, sl, #2
 8007708:	fa5f fa8a 	uxtb.w	sl, sl
 800770c:	3901      	subs	r1, #1
 800770e:	4652      	mov	r2, sl
 8007710:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007714:	9109      	str	r1, [sp, #36]	@ 0x24
 8007716:	f7ff ff26 	bl	8007566 <__exponent>
 800771a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800771c:	1813      	adds	r3, r2, r0
 800771e:	2a01      	cmp	r2, #1
 8007720:	4681      	mov	r9, r0
 8007722:	6123      	str	r3, [r4, #16]
 8007724:	dc02      	bgt.n	800772c <_printf_float+0x150>
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	07d2      	lsls	r2, r2, #31
 800772a:	d501      	bpl.n	8007730 <_printf_float+0x154>
 800772c:	3301      	adds	r3, #1
 800772e:	6123      	str	r3, [r4, #16]
 8007730:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0a2      	beq.n	800767e <_printf_float+0xa2>
 8007738:	232d      	movs	r3, #45	@ 0x2d
 800773a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800773e:	e79e      	b.n	800767e <_printf_float+0xa2>
 8007740:	9a06      	ldr	r2, [sp, #24]
 8007742:	2a47      	cmp	r2, #71	@ 0x47
 8007744:	d1c2      	bne.n	80076cc <_printf_float+0xf0>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1c0      	bne.n	80076cc <_printf_float+0xf0>
 800774a:	2301      	movs	r3, #1
 800774c:	e7bd      	b.n	80076ca <_printf_float+0xee>
 800774e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007752:	d9db      	bls.n	800770c <_printf_float+0x130>
 8007754:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007758:	d118      	bne.n	800778c <_printf_float+0x1b0>
 800775a:	2900      	cmp	r1, #0
 800775c:	6863      	ldr	r3, [r4, #4]
 800775e:	dd0b      	ble.n	8007778 <_printf_float+0x19c>
 8007760:	6121      	str	r1, [r4, #16]
 8007762:	b913      	cbnz	r3, 800776a <_printf_float+0x18e>
 8007764:	6822      	ldr	r2, [r4, #0]
 8007766:	07d0      	lsls	r0, r2, #31
 8007768:	d502      	bpl.n	8007770 <_printf_float+0x194>
 800776a:	3301      	adds	r3, #1
 800776c:	440b      	add	r3, r1
 800776e:	6123      	str	r3, [r4, #16]
 8007770:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007772:	f04f 0900 	mov.w	r9, #0
 8007776:	e7db      	b.n	8007730 <_printf_float+0x154>
 8007778:	b913      	cbnz	r3, 8007780 <_printf_float+0x1a4>
 800777a:	6822      	ldr	r2, [r4, #0]
 800777c:	07d2      	lsls	r2, r2, #31
 800777e:	d501      	bpl.n	8007784 <_printf_float+0x1a8>
 8007780:	3302      	adds	r3, #2
 8007782:	e7f4      	b.n	800776e <_printf_float+0x192>
 8007784:	2301      	movs	r3, #1
 8007786:	e7f2      	b.n	800776e <_printf_float+0x192>
 8007788:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800778c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800778e:	4299      	cmp	r1, r3
 8007790:	db05      	blt.n	800779e <_printf_float+0x1c2>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	6121      	str	r1, [r4, #16]
 8007796:	07d8      	lsls	r0, r3, #31
 8007798:	d5ea      	bpl.n	8007770 <_printf_float+0x194>
 800779a:	1c4b      	adds	r3, r1, #1
 800779c:	e7e7      	b.n	800776e <_printf_float+0x192>
 800779e:	2900      	cmp	r1, #0
 80077a0:	bfd4      	ite	le
 80077a2:	f1c1 0202 	rsble	r2, r1, #2
 80077a6:	2201      	movgt	r2, #1
 80077a8:	4413      	add	r3, r2
 80077aa:	e7e0      	b.n	800776e <_printf_float+0x192>
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	055a      	lsls	r2, r3, #21
 80077b0:	d407      	bmi.n	80077c2 <_printf_float+0x1e6>
 80077b2:	6923      	ldr	r3, [r4, #16]
 80077b4:	4642      	mov	r2, r8
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	d12b      	bne.n	8007818 <_printf_float+0x23c>
 80077c0:	e767      	b.n	8007692 <_printf_float+0xb6>
 80077c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077c6:	f240 80dd 	bls.w	8007984 <_printf_float+0x3a8>
 80077ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80077ce:	2200      	movs	r2, #0
 80077d0:	2300      	movs	r3, #0
 80077d2:	f7f9 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	d033      	beq.n	8007842 <_printf_float+0x266>
 80077da:	4a37      	ldr	r2, [pc, #220]	@ (80078b8 <_printf_float+0x2dc>)
 80077dc:	2301      	movs	r3, #1
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f af54 	beq.w	8007692 <_printf_float+0xb6>
 80077ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80077ee:	4543      	cmp	r3, r8
 80077f0:	db02      	blt.n	80077f8 <_printf_float+0x21c>
 80077f2:	6823      	ldr	r3, [r4, #0]
 80077f4:	07d8      	lsls	r0, r3, #31
 80077f6:	d50f      	bpl.n	8007818 <_printf_float+0x23c>
 80077f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f af45 	beq.w	8007692 <_printf_float+0xb6>
 8007808:	f04f 0900 	mov.w	r9, #0
 800780c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007810:	f104 0a1a 	add.w	sl, r4, #26
 8007814:	45c8      	cmp	r8, r9
 8007816:	dc09      	bgt.n	800782c <_printf_float+0x250>
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	079b      	lsls	r3, r3, #30
 800781c:	f100 8103 	bmi.w	8007a26 <_printf_float+0x44a>
 8007820:	68e0      	ldr	r0, [r4, #12]
 8007822:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007824:	4298      	cmp	r0, r3
 8007826:	bfb8      	it	lt
 8007828:	4618      	movlt	r0, r3
 800782a:	e734      	b.n	8007696 <_printf_float+0xba>
 800782c:	2301      	movs	r3, #1
 800782e:	4652      	mov	r2, sl
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f af2b 	beq.w	8007692 <_printf_float+0xb6>
 800783c:	f109 0901 	add.w	r9, r9, #1
 8007840:	e7e8      	b.n	8007814 <_printf_float+0x238>
 8007842:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	dc39      	bgt.n	80078bc <_printf_float+0x2e0>
 8007848:	4a1b      	ldr	r2, [pc, #108]	@ (80078b8 <_printf_float+0x2dc>)
 800784a:	2301      	movs	r3, #1
 800784c:	4631      	mov	r1, r6
 800784e:	4628      	mov	r0, r5
 8007850:	47b8      	blx	r7
 8007852:	3001      	adds	r0, #1
 8007854:	f43f af1d 	beq.w	8007692 <_printf_float+0xb6>
 8007858:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800785c:	ea59 0303 	orrs.w	r3, r9, r3
 8007860:	d102      	bne.n	8007868 <_printf_float+0x28c>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	07d9      	lsls	r1, r3, #31
 8007866:	d5d7      	bpl.n	8007818 <_printf_float+0x23c>
 8007868:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	47b8      	blx	r7
 8007872:	3001      	adds	r0, #1
 8007874:	f43f af0d 	beq.w	8007692 <_printf_float+0xb6>
 8007878:	f04f 0a00 	mov.w	sl, #0
 800787c:	f104 0b1a 	add.w	fp, r4, #26
 8007880:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007882:	425b      	negs	r3, r3
 8007884:	4553      	cmp	r3, sl
 8007886:	dc01      	bgt.n	800788c <_printf_float+0x2b0>
 8007888:	464b      	mov	r3, r9
 800788a:	e793      	b.n	80077b4 <_printf_float+0x1d8>
 800788c:	2301      	movs	r3, #1
 800788e:	465a      	mov	r2, fp
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f aefb 	beq.w	8007692 <_printf_float+0xb6>
 800789c:	f10a 0a01 	add.w	sl, sl, #1
 80078a0:	e7ee      	b.n	8007880 <_printf_float+0x2a4>
 80078a2:	bf00      	nop
 80078a4:	7fefffff 	.word	0x7fefffff
 80078a8:	0801d1d8 	.word	0x0801d1d8
 80078ac:	0801d1dc 	.word	0x0801d1dc
 80078b0:	0801d1e0 	.word	0x0801d1e0
 80078b4:	0801d1e4 	.word	0x0801d1e4
 80078b8:	0801d1e8 	.word	0x0801d1e8
 80078bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078c2:	4553      	cmp	r3, sl
 80078c4:	bfa8      	it	ge
 80078c6:	4653      	movge	r3, sl
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	4699      	mov	r9, r3
 80078cc:	dc36      	bgt.n	800793c <_printf_float+0x360>
 80078ce:	f04f 0b00 	mov.w	fp, #0
 80078d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80078d6:	f104 021a 	add.w	r2, r4, #26
 80078da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80078dc:	9306      	str	r3, [sp, #24]
 80078de:	eba3 0309 	sub.w	r3, r3, r9
 80078e2:	455b      	cmp	r3, fp
 80078e4:	dc31      	bgt.n	800794a <_printf_float+0x36e>
 80078e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e8:	459a      	cmp	sl, r3
 80078ea:	dc3a      	bgt.n	8007962 <_printf_float+0x386>
 80078ec:	6823      	ldr	r3, [r4, #0]
 80078ee:	07da      	lsls	r2, r3, #31
 80078f0:	d437      	bmi.n	8007962 <_printf_float+0x386>
 80078f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078f4:	ebaa 0903 	sub.w	r9, sl, r3
 80078f8:	9b06      	ldr	r3, [sp, #24]
 80078fa:	ebaa 0303 	sub.w	r3, sl, r3
 80078fe:	4599      	cmp	r9, r3
 8007900:	bfa8      	it	ge
 8007902:	4699      	movge	r9, r3
 8007904:	f1b9 0f00 	cmp.w	r9, #0
 8007908:	dc33      	bgt.n	8007972 <_printf_float+0x396>
 800790a:	f04f 0800 	mov.w	r8, #0
 800790e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007912:	f104 0b1a 	add.w	fp, r4, #26
 8007916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007918:	ebaa 0303 	sub.w	r3, sl, r3
 800791c:	eba3 0309 	sub.w	r3, r3, r9
 8007920:	4543      	cmp	r3, r8
 8007922:	f77f af79 	ble.w	8007818 <_printf_float+0x23c>
 8007926:	2301      	movs	r3, #1
 8007928:	465a      	mov	r2, fp
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f aeae 	beq.w	8007692 <_printf_float+0xb6>
 8007936:	f108 0801 	add.w	r8, r8, #1
 800793a:	e7ec      	b.n	8007916 <_printf_float+0x33a>
 800793c:	4642      	mov	r2, r8
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	d1c2      	bne.n	80078ce <_printf_float+0x2f2>
 8007948:	e6a3      	b.n	8007692 <_printf_float+0xb6>
 800794a:	2301      	movs	r3, #1
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	9206      	str	r2, [sp, #24]
 8007952:	47b8      	blx	r7
 8007954:	3001      	adds	r0, #1
 8007956:	f43f ae9c 	beq.w	8007692 <_printf_float+0xb6>
 800795a:	9a06      	ldr	r2, [sp, #24]
 800795c:	f10b 0b01 	add.w	fp, fp, #1
 8007960:	e7bb      	b.n	80078da <_printf_float+0x2fe>
 8007962:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007966:	4631      	mov	r1, r6
 8007968:	4628      	mov	r0, r5
 800796a:	47b8      	blx	r7
 800796c:	3001      	adds	r0, #1
 800796e:	d1c0      	bne.n	80078f2 <_printf_float+0x316>
 8007970:	e68f      	b.n	8007692 <_printf_float+0xb6>
 8007972:	9a06      	ldr	r2, [sp, #24]
 8007974:	464b      	mov	r3, r9
 8007976:	4442      	add	r2, r8
 8007978:	4631      	mov	r1, r6
 800797a:	4628      	mov	r0, r5
 800797c:	47b8      	blx	r7
 800797e:	3001      	adds	r0, #1
 8007980:	d1c3      	bne.n	800790a <_printf_float+0x32e>
 8007982:	e686      	b.n	8007692 <_printf_float+0xb6>
 8007984:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007988:	f1ba 0f01 	cmp.w	sl, #1
 800798c:	dc01      	bgt.n	8007992 <_printf_float+0x3b6>
 800798e:	07db      	lsls	r3, r3, #31
 8007990:	d536      	bpl.n	8007a00 <_printf_float+0x424>
 8007992:	2301      	movs	r3, #1
 8007994:	4642      	mov	r2, r8
 8007996:	4631      	mov	r1, r6
 8007998:	4628      	mov	r0, r5
 800799a:	47b8      	blx	r7
 800799c:	3001      	adds	r0, #1
 800799e:	f43f ae78 	beq.w	8007692 <_printf_float+0xb6>
 80079a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079a6:	4631      	mov	r1, r6
 80079a8:	4628      	mov	r0, r5
 80079aa:	47b8      	blx	r7
 80079ac:	3001      	adds	r0, #1
 80079ae:	f43f ae70 	beq.w	8007692 <_printf_float+0xb6>
 80079b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80079be:	f7f9 f883 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c2:	b9c0      	cbnz	r0, 80079f6 <_printf_float+0x41a>
 80079c4:	4653      	mov	r3, sl
 80079c6:	f108 0201 	add.w	r2, r8, #1
 80079ca:	4631      	mov	r1, r6
 80079cc:	4628      	mov	r0, r5
 80079ce:	47b8      	blx	r7
 80079d0:	3001      	adds	r0, #1
 80079d2:	d10c      	bne.n	80079ee <_printf_float+0x412>
 80079d4:	e65d      	b.n	8007692 <_printf_float+0xb6>
 80079d6:	2301      	movs	r3, #1
 80079d8:	465a      	mov	r2, fp
 80079da:	4631      	mov	r1, r6
 80079dc:	4628      	mov	r0, r5
 80079de:	47b8      	blx	r7
 80079e0:	3001      	adds	r0, #1
 80079e2:	f43f ae56 	beq.w	8007692 <_printf_float+0xb6>
 80079e6:	f108 0801 	add.w	r8, r8, #1
 80079ea:	45d0      	cmp	r8, sl
 80079ec:	dbf3      	blt.n	80079d6 <_printf_float+0x3fa>
 80079ee:	464b      	mov	r3, r9
 80079f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80079f4:	e6df      	b.n	80077b6 <_printf_float+0x1da>
 80079f6:	f04f 0800 	mov.w	r8, #0
 80079fa:	f104 0b1a 	add.w	fp, r4, #26
 80079fe:	e7f4      	b.n	80079ea <_printf_float+0x40e>
 8007a00:	2301      	movs	r3, #1
 8007a02:	4642      	mov	r2, r8
 8007a04:	e7e1      	b.n	80079ca <_printf_float+0x3ee>
 8007a06:	2301      	movs	r3, #1
 8007a08:	464a      	mov	r2, r9
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	47b8      	blx	r7
 8007a10:	3001      	adds	r0, #1
 8007a12:	f43f ae3e 	beq.w	8007692 <_printf_float+0xb6>
 8007a16:	f108 0801 	add.w	r8, r8, #1
 8007a1a:	68e3      	ldr	r3, [r4, #12]
 8007a1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a1e:	1a5b      	subs	r3, r3, r1
 8007a20:	4543      	cmp	r3, r8
 8007a22:	dcf0      	bgt.n	8007a06 <_printf_float+0x42a>
 8007a24:	e6fc      	b.n	8007820 <_printf_float+0x244>
 8007a26:	f04f 0800 	mov.w	r8, #0
 8007a2a:	f104 0919 	add.w	r9, r4, #25
 8007a2e:	e7f4      	b.n	8007a1a <_printf_float+0x43e>

08007a30 <_printf_common>:
 8007a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a34:	4616      	mov	r6, r2
 8007a36:	4698      	mov	r8, r3
 8007a38:	688a      	ldr	r2, [r1, #8]
 8007a3a:	690b      	ldr	r3, [r1, #16]
 8007a3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a40:	4293      	cmp	r3, r2
 8007a42:	bfb8      	it	lt
 8007a44:	4613      	movlt	r3, r2
 8007a46:	6033      	str	r3, [r6, #0]
 8007a48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007a4c:	4607      	mov	r7, r0
 8007a4e:	460c      	mov	r4, r1
 8007a50:	b10a      	cbz	r2, 8007a56 <_printf_common+0x26>
 8007a52:	3301      	adds	r3, #1
 8007a54:	6033      	str	r3, [r6, #0]
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	0699      	lsls	r1, r3, #26
 8007a5a:	bf42      	ittt	mi
 8007a5c:	6833      	ldrmi	r3, [r6, #0]
 8007a5e:	3302      	addmi	r3, #2
 8007a60:	6033      	strmi	r3, [r6, #0]
 8007a62:	6825      	ldr	r5, [r4, #0]
 8007a64:	f015 0506 	ands.w	r5, r5, #6
 8007a68:	d106      	bne.n	8007a78 <_printf_common+0x48>
 8007a6a:	f104 0a19 	add.w	sl, r4, #25
 8007a6e:	68e3      	ldr	r3, [r4, #12]
 8007a70:	6832      	ldr	r2, [r6, #0]
 8007a72:	1a9b      	subs	r3, r3, r2
 8007a74:	42ab      	cmp	r3, r5
 8007a76:	dc26      	bgt.n	8007ac6 <_printf_common+0x96>
 8007a78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007a7c:	6822      	ldr	r2, [r4, #0]
 8007a7e:	3b00      	subs	r3, #0
 8007a80:	bf18      	it	ne
 8007a82:	2301      	movne	r3, #1
 8007a84:	0692      	lsls	r2, r2, #26
 8007a86:	d42b      	bmi.n	8007ae0 <_printf_common+0xb0>
 8007a88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007a8c:	4641      	mov	r1, r8
 8007a8e:	4638      	mov	r0, r7
 8007a90:	47c8      	blx	r9
 8007a92:	3001      	adds	r0, #1
 8007a94:	d01e      	beq.n	8007ad4 <_printf_common+0xa4>
 8007a96:	6823      	ldr	r3, [r4, #0]
 8007a98:	6922      	ldr	r2, [r4, #16]
 8007a9a:	f003 0306 	and.w	r3, r3, #6
 8007a9e:	2b04      	cmp	r3, #4
 8007aa0:	bf02      	ittt	eq
 8007aa2:	68e5      	ldreq	r5, [r4, #12]
 8007aa4:	6833      	ldreq	r3, [r6, #0]
 8007aa6:	1aed      	subeq	r5, r5, r3
 8007aa8:	68a3      	ldr	r3, [r4, #8]
 8007aaa:	bf0c      	ite	eq
 8007aac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ab0:	2500      	movne	r5, #0
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	bfc4      	itt	gt
 8007ab6:	1a9b      	subgt	r3, r3, r2
 8007ab8:	18ed      	addgt	r5, r5, r3
 8007aba:	2600      	movs	r6, #0
 8007abc:	341a      	adds	r4, #26
 8007abe:	42b5      	cmp	r5, r6
 8007ac0:	d11a      	bne.n	8007af8 <_printf_common+0xc8>
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	e008      	b.n	8007ad8 <_printf_common+0xa8>
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	4652      	mov	r2, sl
 8007aca:	4641      	mov	r1, r8
 8007acc:	4638      	mov	r0, r7
 8007ace:	47c8      	blx	r9
 8007ad0:	3001      	adds	r0, #1
 8007ad2:	d103      	bne.n	8007adc <_printf_common+0xac>
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007adc:	3501      	adds	r5, #1
 8007ade:	e7c6      	b.n	8007a6e <_printf_common+0x3e>
 8007ae0:	18e1      	adds	r1, r4, r3
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	2030      	movs	r0, #48	@ 0x30
 8007ae6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007aea:	4422      	add	r2, r4
 8007aec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007af0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007af4:	3302      	adds	r3, #2
 8007af6:	e7c7      	b.n	8007a88 <_printf_common+0x58>
 8007af8:	2301      	movs	r3, #1
 8007afa:	4622      	mov	r2, r4
 8007afc:	4641      	mov	r1, r8
 8007afe:	4638      	mov	r0, r7
 8007b00:	47c8      	blx	r9
 8007b02:	3001      	adds	r0, #1
 8007b04:	d0e6      	beq.n	8007ad4 <_printf_common+0xa4>
 8007b06:	3601      	adds	r6, #1
 8007b08:	e7d9      	b.n	8007abe <_printf_common+0x8e>
	...

08007b0c <_printf_i>:
 8007b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b10:	7e0f      	ldrb	r7, [r1, #24]
 8007b12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b14:	2f78      	cmp	r7, #120	@ 0x78
 8007b16:	4691      	mov	r9, r2
 8007b18:	4680      	mov	r8, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	469a      	mov	sl, r3
 8007b1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b22:	d807      	bhi.n	8007b34 <_printf_i+0x28>
 8007b24:	2f62      	cmp	r7, #98	@ 0x62
 8007b26:	d80a      	bhi.n	8007b3e <_printf_i+0x32>
 8007b28:	2f00      	cmp	r7, #0
 8007b2a:	f000 80d2 	beq.w	8007cd2 <_printf_i+0x1c6>
 8007b2e:	2f58      	cmp	r7, #88	@ 0x58
 8007b30:	f000 80b9 	beq.w	8007ca6 <_printf_i+0x19a>
 8007b34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b3c:	e03a      	b.n	8007bb4 <_printf_i+0xa8>
 8007b3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b42:	2b15      	cmp	r3, #21
 8007b44:	d8f6      	bhi.n	8007b34 <_printf_i+0x28>
 8007b46:	a101      	add	r1, pc, #4	@ (adr r1, 8007b4c <_printf_i+0x40>)
 8007b48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007b4c:	08007ba5 	.word	0x08007ba5
 8007b50:	08007bb9 	.word	0x08007bb9
 8007b54:	08007b35 	.word	0x08007b35
 8007b58:	08007b35 	.word	0x08007b35
 8007b5c:	08007b35 	.word	0x08007b35
 8007b60:	08007b35 	.word	0x08007b35
 8007b64:	08007bb9 	.word	0x08007bb9
 8007b68:	08007b35 	.word	0x08007b35
 8007b6c:	08007b35 	.word	0x08007b35
 8007b70:	08007b35 	.word	0x08007b35
 8007b74:	08007b35 	.word	0x08007b35
 8007b78:	08007cb9 	.word	0x08007cb9
 8007b7c:	08007be3 	.word	0x08007be3
 8007b80:	08007c73 	.word	0x08007c73
 8007b84:	08007b35 	.word	0x08007b35
 8007b88:	08007b35 	.word	0x08007b35
 8007b8c:	08007cdb 	.word	0x08007cdb
 8007b90:	08007b35 	.word	0x08007b35
 8007b94:	08007be3 	.word	0x08007be3
 8007b98:	08007b35 	.word	0x08007b35
 8007b9c:	08007b35 	.word	0x08007b35
 8007ba0:	08007c7b 	.word	0x08007c7b
 8007ba4:	6833      	ldr	r3, [r6, #0]
 8007ba6:	1d1a      	adds	r2, r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6032      	str	r2, [r6, #0]
 8007bac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bb0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e09d      	b.n	8007cf4 <_printf_i+0x1e8>
 8007bb8:	6833      	ldr	r3, [r6, #0]
 8007bba:	6820      	ldr	r0, [r4, #0]
 8007bbc:	1d19      	adds	r1, r3, #4
 8007bbe:	6031      	str	r1, [r6, #0]
 8007bc0:	0606      	lsls	r6, r0, #24
 8007bc2:	d501      	bpl.n	8007bc8 <_printf_i+0xbc>
 8007bc4:	681d      	ldr	r5, [r3, #0]
 8007bc6:	e003      	b.n	8007bd0 <_printf_i+0xc4>
 8007bc8:	0645      	lsls	r5, r0, #25
 8007bca:	d5fb      	bpl.n	8007bc4 <_printf_i+0xb8>
 8007bcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007bd0:	2d00      	cmp	r5, #0
 8007bd2:	da03      	bge.n	8007bdc <_printf_i+0xd0>
 8007bd4:	232d      	movs	r3, #45	@ 0x2d
 8007bd6:	426d      	negs	r5, r5
 8007bd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bdc:	4859      	ldr	r0, [pc, #356]	@ (8007d44 <_printf_i+0x238>)
 8007bde:	230a      	movs	r3, #10
 8007be0:	e011      	b.n	8007c06 <_printf_i+0xfa>
 8007be2:	6821      	ldr	r1, [r4, #0]
 8007be4:	6833      	ldr	r3, [r6, #0]
 8007be6:	0608      	lsls	r0, r1, #24
 8007be8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007bec:	d402      	bmi.n	8007bf4 <_printf_i+0xe8>
 8007bee:	0649      	lsls	r1, r1, #25
 8007bf0:	bf48      	it	mi
 8007bf2:	b2ad      	uxthmi	r5, r5
 8007bf4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007bf6:	4853      	ldr	r0, [pc, #332]	@ (8007d44 <_printf_i+0x238>)
 8007bf8:	6033      	str	r3, [r6, #0]
 8007bfa:	bf14      	ite	ne
 8007bfc:	230a      	movne	r3, #10
 8007bfe:	2308      	moveq	r3, #8
 8007c00:	2100      	movs	r1, #0
 8007c02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c06:	6866      	ldr	r6, [r4, #4]
 8007c08:	60a6      	str	r6, [r4, #8]
 8007c0a:	2e00      	cmp	r6, #0
 8007c0c:	bfa2      	ittt	ge
 8007c0e:	6821      	ldrge	r1, [r4, #0]
 8007c10:	f021 0104 	bicge.w	r1, r1, #4
 8007c14:	6021      	strge	r1, [r4, #0]
 8007c16:	b90d      	cbnz	r5, 8007c1c <_printf_i+0x110>
 8007c18:	2e00      	cmp	r6, #0
 8007c1a:	d04b      	beq.n	8007cb4 <_printf_i+0x1a8>
 8007c1c:	4616      	mov	r6, r2
 8007c1e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c22:	fb03 5711 	mls	r7, r3, r1, r5
 8007c26:	5dc7      	ldrb	r7, [r0, r7]
 8007c28:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c2c:	462f      	mov	r7, r5
 8007c2e:	42bb      	cmp	r3, r7
 8007c30:	460d      	mov	r5, r1
 8007c32:	d9f4      	bls.n	8007c1e <_printf_i+0x112>
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d10b      	bne.n	8007c50 <_printf_i+0x144>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	07df      	lsls	r7, r3, #31
 8007c3c:	d508      	bpl.n	8007c50 <_printf_i+0x144>
 8007c3e:	6923      	ldr	r3, [r4, #16]
 8007c40:	6861      	ldr	r1, [r4, #4]
 8007c42:	4299      	cmp	r1, r3
 8007c44:	bfde      	ittt	le
 8007c46:	2330      	movle	r3, #48	@ 0x30
 8007c48:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007c4c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007c50:	1b92      	subs	r2, r2, r6
 8007c52:	6122      	str	r2, [r4, #16]
 8007c54:	f8cd a000 	str.w	sl, [sp]
 8007c58:	464b      	mov	r3, r9
 8007c5a:	aa03      	add	r2, sp, #12
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	4640      	mov	r0, r8
 8007c60:	f7ff fee6 	bl	8007a30 <_printf_common>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d14a      	bne.n	8007cfe <_printf_i+0x1f2>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	b004      	add	sp, #16
 8007c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c72:	6823      	ldr	r3, [r4, #0]
 8007c74:	f043 0320 	orr.w	r3, r3, #32
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	4833      	ldr	r0, [pc, #204]	@ (8007d48 <_printf_i+0x23c>)
 8007c7c:	2778      	movs	r7, #120	@ 0x78
 8007c7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007c82:	6823      	ldr	r3, [r4, #0]
 8007c84:	6831      	ldr	r1, [r6, #0]
 8007c86:	061f      	lsls	r7, r3, #24
 8007c88:	f851 5b04 	ldr.w	r5, [r1], #4
 8007c8c:	d402      	bmi.n	8007c94 <_printf_i+0x188>
 8007c8e:	065f      	lsls	r7, r3, #25
 8007c90:	bf48      	it	mi
 8007c92:	b2ad      	uxthmi	r5, r5
 8007c94:	6031      	str	r1, [r6, #0]
 8007c96:	07d9      	lsls	r1, r3, #31
 8007c98:	bf44      	itt	mi
 8007c9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007c9e:	6023      	strmi	r3, [r4, #0]
 8007ca0:	b11d      	cbz	r5, 8007caa <_printf_i+0x19e>
 8007ca2:	2310      	movs	r3, #16
 8007ca4:	e7ac      	b.n	8007c00 <_printf_i+0xf4>
 8007ca6:	4827      	ldr	r0, [pc, #156]	@ (8007d44 <_printf_i+0x238>)
 8007ca8:	e7e9      	b.n	8007c7e <_printf_i+0x172>
 8007caa:	6823      	ldr	r3, [r4, #0]
 8007cac:	f023 0320 	bic.w	r3, r3, #32
 8007cb0:	6023      	str	r3, [r4, #0]
 8007cb2:	e7f6      	b.n	8007ca2 <_printf_i+0x196>
 8007cb4:	4616      	mov	r6, r2
 8007cb6:	e7bd      	b.n	8007c34 <_printf_i+0x128>
 8007cb8:	6833      	ldr	r3, [r6, #0]
 8007cba:	6825      	ldr	r5, [r4, #0]
 8007cbc:	6961      	ldr	r1, [r4, #20]
 8007cbe:	1d18      	adds	r0, r3, #4
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	062e      	lsls	r6, r5, #24
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	d501      	bpl.n	8007ccc <_printf_i+0x1c0>
 8007cc8:	6019      	str	r1, [r3, #0]
 8007cca:	e002      	b.n	8007cd2 <_printf_i+0x1c6>
 8007ccc:	0668      	lsls	r0, r5, #25
 8007cce:	d5fb      	bpl.n	8007cc8 <_printf_i+0x1bc>
 8007cd0:	8019      	strh	r1, [r3, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	6123      	str	r3, [r4, #16]
 8007cd6:	4616      	mov	r6, r2
 8007cd8:	e7bc      	b.n	8007c54 <_printf_i+0x148>
 8007cda:	6833      	ldr	r3, [r6, #0]
 8007cdc:	1d1a      	adds	r2, r3, #4
 8007cde:	6032      	str	r2, [r6, #0]
 8007ce0:	681e      	ldr	r6, [r3, #0]
 8007ce2:	6862      	ldr	r2, [r4, #4]
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f7f8 fa72 	bl	80001d0 <memchr>
 8007cec:	b108      	cbz	r0, 8007cf2 <_printf_i+0x1e6>
 8007cee:	1b80      	subs	r0, r0, r6
 8007cf0:	6060      	str	r0, [r4, #4]
 8007cf2:	6863      	ldr	r3, [r4, #4]
 8007cf4:	6123      	str	r3, [r4, #16]
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cfc:	e7aa      	b.n	8007c54 <_printf_i+0x148>
 8007cfe:	6923      	ldr	r3, [r4, #16]
 8007d00:	4632      	mov	r2, r6
 8007d02:	4649      	mov	r1, r9
 8007d04:	4640      	mov	r0, r8
 8007d06:	47d0      	blx	sl
 8007d08:	3001      	adds	r0, #1
 8007d0a:	d0ad      	beq.n	8007c68 <_printf_i+0x15c>
 8007d0c:	6823      	ldr	r3, [r4, #0]
 8007d0e:	079b      	lsls	r3, r3, #30
 8007d10:	d413      	bmi.n	8007d3a <_printf_i+0x22e>
 8007d12:	68e0      	ldr	r0, [r4, #12]
 8007d14:	9b03      	ldr	r3, [sp, #12]
 8007d16:	4298      	cmp	r0, r3
 8007d18:	bfb8      	it	lt
 8007d1a:	4618      	movlt	r0, r3
 8007d1c:	e7a6      	b.n	8007c6c <_printf_i+0x160>
 8007d1e:	2301      	movs	r3, #1
 8007d20:	4632      	mov	r2, r6
 8007d22:	4649      	mov	r1, r9
 8007d24:	4640      	mov	r0, r8
 8007d26:	47d0      	blx	sl
 8007d28:	3001      	adds	r0, #1
 8007d2a:	d09d      	beq.n	8007c68 <_printf_i+0x15c>
 8007d2c:	3501      	adds	r5, #1
 8007d2e:	68e3      	ldr	r3, [r4, #12]
 8007d30:	9903      	ldr	r1, [sp, #12]
 8007d32:	1a5b      	subs	r3, r3, r1
 8007d34:	42ab      	cmp	r3, r5
 8007d36:	dcf2      	bgt.n	8007d1e <_printf_i+0x212>
 8007d38:	e7eb      	b.n	8007d12 <_printf_i+0x206>
 8007d3a:	2500      	movs	r5, #0
 8007d3c:	f104 0619 	add.w	r6, r4, #25
 8007d40:	e7f5      	b.n	8007d2e <_printf_i+0x222>
 8007d42:	bf00      	nop
 8007d44:	0801d1ea 	.word	0x0801d1ea
 8007d48:	0801d1fb 	.word	0x0801d1fb

08007d4c <std>:
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	b510      	push	{r4, lr}
 8007d50:	4604      	mov	r4, r0
 8007d52:	e9c0 3300 	strd	r3, r3, [r0]
 8007d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d5a:	6083      	str	r3, [r0, #8]
 8007d5c:	8181      	strh	r1, [r0, #12]
 8007d5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d60:	81c2      	strh	r2, [r0, #14]
 8007d62:	6183      	str	r3, [r0, #24]
 8007d64:	4619      	mov	r1, r3
 8007d66:	2208      	movs	r2, #8
 8007d68:	305c      	adds	r0, #92	@ 0x5c
 8007d6a:	f000 f914 	bl	8007f96 <memset>
 8007d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007da4 <std+0x58>)
 8007d70:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d72:	4b0d      	ldr	r3, [pc, #52]	@ (8007da8 <std+0x5c>)
 8007d74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d76:	4b0d      	ldr	r3, [pc, #52]	@ (8007dac <std+0x60>)
 8007d78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007db0 <std+0x64>)
 8007d7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <std+0x68>)
 8007d80:	6224      	str	r4, [r4, #32]
 8007d82:	429c      	cmp	r4, r3
 8007d84:	d006      	beq.n	8007d94 <std+0x48>
 8007d86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d8a:	4294      	cmp	r4, r2
 8007d8c:	d002      	beq.n	8007d94 <std+0x48>
 8007d8e:	33d0      	adds	r3, #208	@ 0xd0
 8007d90:	429c      	cmp	r4, r3
 8007d92:	d105      	bne.n	8007da0 <std+0x54>
 8007d94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d9c:	f000 b978 	b.w	8008090 <__retarget_lock_init_recursive>
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	bf00      	nop
 8007da4:	08007f11 	.word	0x08007f11
 8007da8:	08007f33 	.word	0x08007f33
 8007dac:	08007f6b 	.word	0x08007f6b
 8007db0:	08007f8f 	.word	0x08007f8f
 8007db4:	20004358 	.word	0x20004358

08007db8 <stdio_exit_handler>:
 8007db8:	4a02      	ldr	r2, [pc, #8]	@ (8007dc4 <stdio_exit_handler+0xc>)
 8007dba:	4903      	ldr	r1, [pc, #12]	@ (8007dc8 <stdio_exit_handler+0x10>)
 8007dbc:	4803      	ldr	r0, [pc, #12]	@ (8007dcc <stdio_exit_handler+0x14>)
 8007dbe:	f000 b869 	b.w	8007e94 <_fwalk_sglue>
 8007dc2:	bf00      	nop
 8007dc4:	2000000c 	.word	0x2000000c
 8007dc8:	080099ed 	.word	0x080099ed
 8007dcc:	2000001c 	.word	0x2000001c

08007dd0 <cleanup_stdio>:
 8007dd0:	6841      	ldr	r1, [r0, #4]
 8007dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8007e04 <cleanup_stdio+0x34>)
 8007dd4:	4299      	cmp	r1, r3
 8007dd6:	b510      	push	{r4, lr}
 8007dd8:	4604      	mov	r4, r0
 8007dda:	d001      	beq.n	8007de0 <cleanup_stdio+0x10>
 8007ddc:	f001 fe06 	bl	80099ec <_fflush_r>
 8007de0:	68a1      	ldr	r1, [r4, #8]
 8007de2:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <cleanup_stdio+0x38>)
 8007de4:	4299      	cmp	r1, r3
 8007de6:	d002      	beq.n	8007dee <cleanup_stdio+0x1e>
 8007de8:	4620      	mov	r0, r4
 8007dea:	f001 fdff 	bl	80099ec <_fflush_r>
 8007dee:	68e1      	ldr	r1, [r4, #12]
 8007df0:	4b06      	ldr	r3, [pc, #24]	@ (8007e0c <cleanup_stdio+0x3c>)
 8007df2:	4299      	cmp	r1, r3
 8007df4:	d004      	beq.n	8007e00 <cleanup_stdio+0x30>
 8007df6:	4620      	mov	r0, r4
 8007df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dfc:	f001 bdf6 	b.w	80099ec <_fflush_r>
 8007e00:	bd10      	pop	{r4, pc}
 8007e02:	bf00      	nop
 8007e04:	20004358 	.word	0x20004358
 8007e08:	200043c0 	.word	0x200043c0
 8007e0c:	20004428 	.word	0x20004428

08007e10 <global_stdio_init.part.0>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4b0b      	ldr	r3, [pc, #44]	@ (8007e40 <global_stdio_init.part.0+0x30>)
 8007e14:	4c0b      	ldr	r4, [pc, #44]	@ (8007e44 <global_stdio_init.part.0+0x34>)
 8007e16:	4a0c      	ldr	r2, [pc, #48]	@ (8007e48 <global_stdio_init.part.0+0x38>)
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	2104      	movs	r1, #4
 8007e20:	f7ff ff94 	bl	8007d4c <std>
 8007e24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007e28:	2201      	movs	r2, #1
 8007e2a:	2109      	movs	r1, #9
 8007e2c:	f7ff ff8e 	bl	8007d4c <std>
 8007e30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007e34:	2202      	movs	r2, #2
 8007e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3a:	2112      	movs	r1, #18
 8007e3c:	f7ff bf86 	b.w	8007d4c <std>
 8007e40:	20004490 	.word	0x20004490
 8007e44:	20004358 	.word	0x20004358
 8007e48:	08007db9 	.word	0x08007db9

08007e4c <__sfp_lock_acquire>:
 8007e4c:	4801      	ldr	r0, [pc, #4]	@ (8007e54 <__sfp_lock_acquire+0x8>)
 8007e4e:	f000 b920 	b.w	8008092 <__retarget_lock_acquire_recursive>
 8007e52:	bf00      	nop
 8007e54:	20004499 	.word	0x20004499

08007e58 <__sfp_lock_release>:
 8007e58:	4801      	ldr	r0, [pc, #4]	@ (8007e60 <__sfp_lock_release+0x8>)
 8007e5a:	f000 b91b 	b.w	8008094 <__retarget_lock_release_recursive>
 8007e5e:	bf00      	nop
 8007e60:	20004499 	.word	0x20004499

08007e64 <__sinit>:
 8007e64:	b510      	push	{r4, lr}
 8007e66:	4604      	mov	r4, r0
 8007e68:	f7ff fff0 	bl	8007e4c <__sfp_lock_acquire>
 8007e6c:	6a23      	ldr	r3, [r4, #32]
 8007e6e:	b11b      	cbz	r3, 8007e78 <__sinit+0x14>
 8007e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e74:	f7ff bff0 	b.w	8007e58 <__sfp_lock_release>
 8007e78:	4b04      	ldr	r3, [pc, #16]	@ (8007e8c <__sinit+0x28>)
 8007e7a:	6223      	str	r3, [r4, #32]
 8007e7c:	4b04      	ldr	r3, [pc, #16]	@ (8007e90 <__sinit+0x2c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1f5      	bne.n	8007e70 <__sinit+0xc>
 8007e84:	f7ff ffc4 	bl	8007e10 <global_stdio_init.part.0>
 8007e88:	e7f2      	b.n	8007e70 <__sinit+0xc>
 8007e8a:	bf00      	nop
 8007e8c:	08007dd1 	.word	0x08007dd1
 8007e90:	20004490 	.word	0x20004490

08007e94 <_fwalk_sglue>:
 8007e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e98:	4607      	mov	r7, r0
 8007e9a:	4688      	mov	r8, r1
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	2600      	movs	r6, #0
 8007ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8007ea8:	d505      	bpl.n	8007eb6 <_fwalk_sglue+0x22>
 8007eaa:	6824      	ldr	r4, [r4, #0]
 8007eac:	2c00      	cmp	r4, #0
 8007eae:	d1f7      	bne.n	8007ea0 <_fwalk_sglue+0xc>
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eb6:	89ab      	ldrh	r3, [r5, #12]
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d907      	bls.n	8007ecc <_fwalk_sglue+0x38>
 8007ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	d003      	beq.n	8007ecc <_fwalk_sglue+0x38>
 8007ec4:	4629      	mov	r1, r5
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c0      	blx	r8
 8007eca:	4306      	orrs	r6, r0
 8007ecc:	3568      	adds	r5, #104	@ 0x68
 8007ece:	e7e9      	b.n	8007ea4 <_fwalk_sglue+0x10>

08007ed0 <siprintf>:
 8007ed0:	b40e      	push	{r1, r2, r3}
 8007ed2:	b500      	push	{lr}
 8007ed4:	b09c      	sub	sp, #112	@ 0x70
 8007ed6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ed8:	9002      	str	r0, [sp, #8]
 8007eda:	9006      	str	r0, [sp, #24]
 8007edc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ee0:	4809      	ldr	r0, [pc, #36]	@ (8007f08 <siprintf+0x38>)
 8007ee2:	9107      	str	r1, [sp, #28]
 8007ee4:	9104      	str	r1, [sp, #16]
 8007ee6:	4909      	ldr	r1, [pc, #36]	@ (8007f0c <siprintf+0x3c>)
 8007ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eec:	9105      	str	r1, [sp, #20]
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	a902      	add	r1, sp, #8
 8007ef4:	f001 fbfa 	bl	80096ec <_svfiprintf_r>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	b01c      	add	sp, #112	@ 0x70
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr
 8007f08:	20000018 	.word	0x20000018
 8007f0c:	ffff0208 	.word	0xffff0208

08007f10 <__sread>:
 8007f10:	b510      	push	{r4, lr}
 8007f12:	460c      	mov	r4, r1
 8007f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f18:	f000 f86c 	bl	8007ff4 <_read_r>
 8007f1c:	2800      	cmp	r0, #0
 8007f1e:	bfab      	itete	ge
 8007f20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f22:	89a3      	ldrhlt	r3, [r4, #12]
 8007f24:	181b      	addge	r3, r3, r0
 8007f26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f2a:	bfac      	ite	ge
 8007f2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f2e:	81a3      	strhlt	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__swrite>:
 8007f32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f36:	461f      	mov	r7, r3
 8007f38:	898b      	ldrh	r3, [r1, #12]
 8007f3a:	05db      	lsls	r3, r3, #23
 8007f3c:	4605      	mov	r5, r0
 8007f3e:	460c      	mov	r4, r1
 8007f40:	4616      	mov	r6, r2
 8007f42:	d505      	bpl.n	8007f50 <__swrite+0x1e>
 8007f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f48:	2302      	movs	r3, #2
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f000 f840 	bl	8007fd0 <_lseek_r>
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f5a:	81a3      	strh	r3, [r4, #12]
 8007f5c:	4632      	mov	r2, r6
 8007f5e:	463b      	mov	r3, r7
 8007f60:	4628      	mov	r0, r5
 8007f62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f66:	f000 b857 	b.w	8008018 <_write_r>

08007f6a <__sseek>:
 8007f6a:	b510      	push	{r4, lr}
 8007f6c:	460c      	mov	r4, r1
 8007f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f72:	f000 f82d 	bl	8007fd0 <_lseek_r>
 8007f76:	1c43      	adds	r3, r0, #1
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	bf15      	itete	ne
 8007f7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007f7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007f82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007f86:	81a3      	strheq	r3, [r4, #12]
 8007f88:	bf18      	it	ne
 8007f8a:	81a3      	strhne	r3, [r4, #12]
 8007f8c:	bd10      	pop	{r4, pc}

08007f8e <__sclose>:
 8007f8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f92:	f000 b80d 	b.w	8007fb0 <_close_r>

08007f96 <memset>:
 8007f96:	4402      	add	r2, r0
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d100      	bne.n	8007fa0 <memset+0xa>
 8007f9e:	4770      	bx	lr
 8007fa0:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa4:	e7f9      	b.n	8007f9a <memset+0x4>
	...

08007fa8 <_localeconv_r>:
 8007fa8:	4800      	ldr	r0, [pc, #0]	@ (8007fac <_localeconv_r+0x4>)
 8007faa:	4770      	bx	lr
 8007fac:	20000158 	.word	0x20000158

08007fb0 <_close_r>:
 8007fb0:	b538      	push	{r3, r4, r5, lr}
 8007fb2:	4d06      	ldr	r5, [pc, #24]	@ (8007fcc <_close_r+0x1c>)
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4608      	mov	r0, r1
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	f7f9 fba0 	bl	8001700 <_close>
 8007fc0:	1c43      	adds	r3, r0, #1
 8007fc2:	d102      	bne.n	8007fca <_close_r+0x1a>
 8007fc4:	682b      	ldr	r3, [r5, #0]
 8007fc6:	b103      	cbz	r3, 8007fca <_close_r+0x1a>
 8007fc8:	6023      	str	r3, [r4, #0]
 8007fca:	bd38      	pop	{r3, r4, r5, pc}
 8007fcc:	20004494 	.word	0x20004494

08007fd0 <_lseek_r>:
 8007fd0:	b538      	push	{r3, r4, r5, lr}
 8007fd2:	4d07      	ldr	r5, [pc, #28]	@ (8007ff0 <_lseek_r+0x20>)
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	4608      	mov	r0, r1
 8007fd8:	4611      	mov	r1, r2
 8007fda:	2200      	movs	r2, #0
 8007fdc:	602a      	str	r2, [r5, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f7f9 fbb5 	bl	800174e <_lseek>
 8007fe4:	1c43      	adds	r3, r0, #1
 8007fe6:	d102      	bne.n	8007fee <_lseek_r+0x1e>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	b103      	cbz	r3, 8007fee <_lseek_r+0x1e>
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	bd38      	pop	{r3, r4, r5, pc}
 8007ff0:	20004494 	.word	0x20004494

08007ff4 <_read_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	@ (8008014 <_read_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7f9 fb43 	bl	800168e <_read>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_read_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_read_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20004494 	.word	0x20004494

08008018 <_write_r>:
 8008018:	b538      	push	{r3, r4, r5, lr}
 800801a:	4d07      	ldr	r5, [pc, #28]	@ (8008038 <_write_r+0x20>)
 800801c:	4604      	mov	r4, r0
 800801e:	4608      	mov	r0, r1
 8008020:	4611      	mov	r1, r2
 8008022:	2200      	movs	r2, #0
 8008024:	602a      	str	r2, [r5, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	f7f9 fb4e 	bl	80016c8 <_write>
 800802c:	1c43      	adds	r3, r0, #1
 800802e:	d102      	bne.n	8008036 <_write_r+0x1e>
 8008030:	682b      	ldr	r3, [r5, #0]
 8008032:	b103      	cbz	r3, 8008036 <_write_r+0x1e>
 8008034:	6023      	str	r3, [r4, #0]
 8008036:	bd38      	pop	{r3, r4, r5, pc}
 8008038:	20004494 	.word	0x20004494

0800803c <__errno>:
 800803c:	4b01      	ldr	r3, [pc, #4]	@ (8008044 <__errno+0x8>)
 800803e:	6818      	ldr	r0, [r3, #0]
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	20000018 	.word	0x20000018

08008048 <__libc_init_array>:
 8008048:	b570      	push	{r4, r5, r6, lr}
 800804a:	4d0d      	ldr	r5, [pc, #52]	@ (8008080 <__libc_init_array+0x38>)
 800804c:	4c0d      	ldr	r4, [pc, #52]	@ (8008084 <__libc_init_array+0x3c>)
 800804e:	1b64      	subs	r4, r4, r5
 8008050:	10a4      	asrs	r4, r4, #2
 8008052:	2600      	movs	r6, #0
 8008054:	42a6      	cmp	r6, r4
 8008056:	d109      	bne.n	800806c <__libc_init_array+0x24>
 8008058:	4d0b      	ldr	r5, [pc, #44]	@ (8008088 <__libc_init_array+0x40>)
 800805a:	4c0c      	ldr	r4, [pc, #48]	@ (800808c <__libc_init_array+0x44>)
 800805c:	f002 f886 	bl	800a16c <_init>
 8008060:	1b64      	subs	r4, r4, r5
 8008062:	10a4      	asrs	r4, r4, #2
 8008064:	2600      	movs	r6, #0
 8008066:	42a6      	cmp	r6, r4
 8008068:	d105      	bne.n	8008076 <__libc_init_array+0x2e>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008070:	4798      	blx	r3
 8008072:	3601      	adds	r6, #1
 8008074:	e7ee      	b.n	8008054 <__libc_init_array+0xc>
 8008076:	f855 3b04 	ldr.w	r3, [r5], #4
 800807a:	4798      	blx	r3
 800807c:	3601      	adds	r6, #1
 800807e:	e7f2      	b.n	8008066 <__libc_init_array+0x1e>
 8008080:	0801d550 	.word	0x0801d550
 8008084:	0801d550 	.word	0x0801d550
 8008088:	0801d550 	.word	0x0801d550
 800808c:	0801d554 	.word	0x0801d554

08008090 <__retarget_lock_init_recursive>:
 8008090:	4770      	bx	lr

08008092 <__retarget_lock_acquire_recursive>:
 8008092:	4770      	bx	lr

08008094 <__retarget_lock_release_recursive>:
 8008094:	4770      	bx	lr

08008096 <quorem>:
 8008096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809a:	6903      	ldr	r3, [r0, #16]
 800809c:	690c      	ldr	r4, [r1, #16]
 800809e:	42a3      	cmp	r3, r4
 80080a0:	4607      	mov	r7, r0
 80080a2:	db7e      	blt.n	80081a2 <quorem+0x10c>
 80080a4:	3c01      	subs	r4, #1
 80080a6:	f101 0814 	add.w	r8, r1, #20
 80080aa:	00a3      	lsls	r3, r4, #2
 80080ac:	f100 0514 	add.w	r5, r0, #20
 80080b0:	9300      	str	r3, [sp, #0]
 80080b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080c0:	3301      	adds	r3, #1
 80080c2:	429a      	cmp	r2, r3
 80080c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80080cc:	d32e      	bcc.n	800812c <quorem+0x96>
 80080ce:	f04f 0a00 	mov.w	sl, #0
 80080d2:	46c4      	mov	ip, r8
 80080d4:	46ae      	mov	lr, r5
 80080d6:	46d3      	mov	fp, sl
 80080d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80080dc:	b298      	uxth	r0, r3
 80080de:	fb06 a000 	mla	r0, r6, r0, sl
 80080e2:	0c02      	lsrs	r2, r0, #16
 80080e4:	0c1b      	lsrs	r3, r3, #16
 80080e6:	fb06 2303 	mla	r3, r6, r3, r2
 80080ea:	f8de 2000 	ldr.w	r2, [lr]
 80080ee:	b280      	uxth	r0, r0
 80080f0:	b292      	uxth	r2, r2
 80080f2:	1a12      	subs	r2, r2, r0
 80080f4:	445a      	add	r2, fp
 80080f6:	f8de 0000 	ldr.w	r0, [lr]
 80080fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80080fe:	b29b      	uxth	r3, r3
 8008100:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008104:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008108:	b292      	uxth	r2, r2
 800810a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800810e:	45e1      	cmp	r9, ip
 8008110:	f84e 2b04 	str.w	r2, [lr], #4
 8008114:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008118:	d2de      	bcs.n	80080d8 <quorem+0x42>
 800811a:	9b00      	ldr	r3, [sp, #0]
 800811c:	58eb      	ldr	r3, [r5, r3]
 800811e:	b92b      	cbnz	r3, 800812c <quorem+0x96>
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	3b04      	subs	r3, #4
 8008124:	429d      	cmp	r5, r3
 8008126:	461a      	mov	r2, r3
 8008128:	d32f      	bcc.n	800818a <quorem+0xf4>
 800812a:	613c      	str	r4, [r7, #16]
 800812c:	4638      	mov	r0, r7
 800812e:	f001 f979 	bl	8009424 <__mcmp>
 8008132:	2800      	cmp	r0, #0
 8008134:	db25      	blt.n	8008182 <quorem+0xec>
 8008136:	4629      	mov	r1, r5
 8008138:	2000      	movs	r0, #0
 800813a:	f858 2b04 	ldr.w	r2, [r8], #4
 800813e:	f8d1 c000 	ldr.w	ip, [r1]
 8008142:	fa1f fe82 	uxth.w	lr, r2
 8008146:	fa1f f38c 	uxth.w	r3, ip
 800814a:	eba3 030e 	sub.w	r3, r3, lr
 800814e:	4403      	add	r3, r0
 8008150:	0c12      	lsrs	r2, r2, #16
 8008152:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008156:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008160:	45c1      	cmp	r9, r8
 8008162:	f841 3b04 	str.w	r3, [r1], #4
 8008166:	ea4f 4022 	mov.w	r0, r2, asr #16
 800816a:	d2e6      	bcs.n	800813a <quorem+0xa4>
 800816c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008170:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008174:	b922      	cbnz	r2, 8008180 <quorem+0xea>
 8008176:	3b04      	subs	r3, #4
 8008178:	429d      	cmp	r5, r3
 800817a:	461a      	mov	r2, r3
 800817c:	d30b      	bcc.n	8008196 <quorem+0x100>
 800817e:	613c      	str	r4, [r7, #16]
 8008180:	3601      	adds	r6, #1
 8008182:	4630      	mov	r0, r6
 8008184:	b003      	add	sp, #12
 8008186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818a:	6812      	ldr	r2, [r2, #0]
 800818c:	3b04      	subs	r3, #4
 800818e:	2a00      	cmp	r2, #0
 8008190:	d1cb      	bne.n	800812a <quorem+0x94>
 8008192:	3c01      	subs	r4, #1
 8008194:	e7c6      	b.n	8008124 <quorem+0x8e>
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	3b04      	subs	r3, #4
 800819a:	2a00      	cmp	r2, #0
 800819c:	d1ef      	bne.n	800817e <quorem+0xe8>
 800819e:	3c01      	subs	r4, #1
 80081a0:	e7ea      	b.n	8008178 <quorem+0xe2>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e7ee      	b.n	8008184 <quorem+0xee>
	...

080081a8 <_dtoa_r>:
 80081a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	69c7      	ldr	r7, [r0, #28]
 80081ae:	b099      	sub	sp, #100	@ 0x64
 80081b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80081b4:	ec55 4b10 	vmov	r4, r5, d0
 80081b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80081ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80081bc:	4683      	mov	fp, r0
 80081be:	920e      	str	r2, [sp, #56]	@ 0x38
 80081c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80081c2:	b97f      	cbnz	r7, 80081e4 <_dtoa_r+0x3c>
 80081c4:	2010      	movs	r0, #16
 80081c6:	f000 fdfd 	bl	8008dc4 <malloc>
 80081ca:	4602      	mov	r2, r0
 80081cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80081d0:	b920      	cbnz	r0, 80081dc <_dtoa_r+0x34>
 80081d2:	4ba7      	ldr	r3, [pc, #668]	@ (8008470 <_dtoa_r+0x2c8>)
 80081d4:	21ef      	movs	r1, #239	@ 0xef
 80081d6:	48a7      	ldr	r0, [pc, #668]	@ (8008474 <_dtoa_r+0x2cc>)
 80081d8:	f001 fc68 	bl	8009aac <__assert_func>
 80081dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80081e0:	6007      	str	r7, [r0, #0]
 80081e2:	60c7      	str	r7, [r0, #12]
 80081e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081e8:	6819      	ldr	r1, [r3, #0]
 80081ea:	b159      	cbz	r1, 8008204 <_dtoa_r+0x5c>
 80081ec:	685a      	ldr	r2, [r3, #4]
 80081ee:	604a      	str	r2, [r1, #4]
 80081f0:	2301      	movs	r3, #1
 80081f2:	4093      	lsls	r3, r2
 80081f4:	608b      	str	r3, [r1, #8]
 80081f6:	4658      	mov	r0, fp
 80081f8:	f000 feda 	bl	8008fb0 <_Bfree>
 80081fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008200:	2200      	movs	r2, #0
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	1e2b      	subs	r3, r5, #0
 8008206:	bfb9      	ittee	lt
 8008208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800820c:	9303      	strlt	r3, [sp, #12]
 800820e:	2300      	movge	r3, #0
 8008210:	6033      	strge	r3, [r6, #0]
 8008212:	9f03      	ldr	r7, [sp, #12]
 8008214:	4b98      	ldr	r3, [pc, #608]	@ (8008478 <_dtoa_r+0x2d0>)
 8008216:	bfbc      	itt	lt
 8008218:	2201      	movlt	r2, #1
 800821a:	6032      	strlt	r2, [r6, #0]
 800821c:	43bb      	bics	r3, r7
 800821e:	d112      	bne.n	8008246 <_dtoa_r+0x9e>
 8008220:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008222:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800822c:	4323      	orrs	r3, r4
 800822e:	f000 854d 	beq.w	8008ccc <_dtoa_r+0xb24>
 8008232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008234:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800848c <_dtoa_r+0x2e4>
 8008238:	2b00      	cmp	r3, #0
 800823a:	f000 854f 	beq.w	8008cdc <_dtoa_r+0xb34>
 800823e:	f10a 0303 	add.w	r3, sl, #3
 8008242:	f000 bd49 	b.w	8008cd8 <_dtoa_r+0xb30>
 8008246:	ed9d 7b02 	vldr	d7, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	ec51 0b17 	vmov	r0, r1, d7
 8008250:	2300      	movs	r3, #0
 8008252:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008256:	f7f8 fc37 	bl	8000ac8 <__aeabi_dcmpeq>
 800825a:	4680      	mov	r8, r0
 800825c:	b158      	cbz	r0, 8008276 <_dtoa_r+0xce>
 800825e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008260:	2301      	movs	r3, #1
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008266:	b113      	cbz	r3, 800826e <_dtoa_r+0xc6>
 8008268:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800826a:	4b84      	ldr	r3, [pc, #528]	@ (800847c <_dtoa_r+0x2d4>)
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008490 <_dtoa_r+0x2e8>
 8008272:	f000 bd33 	b.w	8008cdc <_dtoa_r+0xb34>
 8008276:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800827a:	aa16      	add	r2, sp, #88	@ 0x58
 800827c:	a917      	add	r1, sp, #92	@ 0x5c
 800827e:	4658      	mov	r0, fp
 8008280:	f001 f980 	bl	8009584 <__d2b>
 8008284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008288:	4681      	mov	r9, r0
 800828a:	2e00      	cmp	r6, #0
 800828c:	d077      	beq.n	800837e <_dtoa_r+0x1d6>
 800828e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008290:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008298:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800829c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80082a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80082a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80082a8:	4619      	mov	r1, r3
 80082aa:	2200      	movs	r2, #0
 80082ac:	4b74      	ldr	r3, [pc, #464]	@ (8008480 <_dtoa_r+0x2d8>)
 80082ae:	f7f7 ffeb 	bl	8000288 <__aeabi_dsub>
 80082b2:	a369      	add	r3, pc, #420	@ (adr r3, 8008458 <_dtoa_r+0x2b0>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 f99e 	bl	80005f8 <__aeabi_dmul>
 80082bc:	a368      	add	r3, pc, #416	@ (adr r3, 8008460 <_dtoa_r+0x2b8>)
 80082be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082c2:	f7f7 ffe3 	bl	800028c <__adddf3>
 80082c6:	4604      	mov	r4, r0
 80082c8:	4630      	mov	r0, r6
 80082ca:	460d      	mov	r5, r1
 80082cc:	f7f8 f92a 	bl	8000524 <__aeabi_i2d>
 80082d0:	a365      	add	r3, pc, #404	@ (adr r3, 8008468 <_dtoa_r+0x2c0>)
 80082d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082d6:	f7f8 f98f 	bl	80005f8 <__aeabi_dmul>
 80082da:	4602      	mov	r2, r0
 80082dc:	460b      	mov	r3, r1
 80082de:	4620      	mov	r0, r4
 80082e0:	4629      	mov	r1, r5
 80082e2:	f7f7 ffd3 	bl	800028c <__adddf3>
 80082e6:	4604      	mov	r4, r0
 80082e8:	460d      	mov	r5, r1
 80082ea:	f7f8 fc35 	bl	8000b58 <__aeabi_d2iz>
 80082ee:	2200      	movs	r2, #0
 80082f0:	4607      	mov	r7, r0
 80082f2:	2300      	movs	r3, #0
 80082f4:	4620      	mov	r0, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	f7f8 fbf0 	bl	8000adc <__aeabi_dcmplt>
 80082fc:	b140      	cbz	r0, 8008310 <_dtoa_r+0x168>
 80082fe:	4638      	mov	r0, r7
 8008300:	f7f8 f910 	bl	8000524 <__aeabi_i2d>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800830c:	b900      	cbnz	r0, 8008310 <_dtoa_r+0x168>
 800830e:	3f01      	subs	r7, #1
 8008310:	2f16      	cmp	r7, #22
 8008312:	d851      	bhi.n	80083b8 <_dtoa_r+0x210>
 8008314:	4b5b      	ldr	r3, [pc, #364]	@ (8008484 <_dtoa_r+0x2dc>)
 8008316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800831a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800831e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008322:	f7f8 fbdb 	bl	8000adc <__aeabi_dcmplt>
 8008326:	2800      	cmp	r0, #0
 8008328:	d048      	beq.n	80083bc <_dtoa_r+0x214>
 800832a:	3f01      	subs	r7, #1
 800832c:	2300      	movs	r3, #0
 800832e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008330:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008332:	1b9b      	subs	r3, r3, r6
 8008334:	1e5a      	subs	r2, r3, #1
 8008336:	bf44      	itt	mi
 8008338:	f1c3 0801 	rsbmi	r8, r3, #1
 800833c:	2300      	movmi	r3, #0
 800833e:	9208      	str	r2, [sp, #32]
 8008340:	bf54      	ite	pl
 8008342:	f04f 0800 	movpl.w	r8, #0
 8008346:	9308      	strmi	r3, [sp, #32]
 8008348:	2f00      	cmp	r7, #0
 800834a:	db39      	blt.n	80083c0 <_dtoa_r+0x218>
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008350:	443b      	add	r3, r7
 8008352:	9308      	str	r3, [sp, #32]
 8008354:	2300      	movs	r3, #0
 8008356:	930a      	str	r3, [sp, #40]	@ 0x28
 8008358:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800835a:	2b09      	cmp	r3, #9
 800835c:	d864      	bhi.n	8008428 <_dtoa_r+0x280>
 800835e:	2b05      	cmp	r3, #5
 8008360:	bfc4      	itt	gt
 8008362:	3b04      	subgt	r3, #4
 8008364:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008368:	f1a3 0302 	sub.w	r3, r3, #2
 800836c:	bfcc      	ite	gt
 800836e:	2400      	movgt	r4, #0
 8008370:	2401      	movle	r4, #1
 8008372:	2b03      	cmp	r3, #3
 8008374:	d863      	bhi.n	800843e <_dtoa_r+0x296>
 8008376:	e8df f003 	tbb	[pc, r3]
 800837a:	372a      	.short	0x372a
 800837c:	5535      	.short	0x5535
 800837e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008382:	441e      	add	r6, r3
 8008384:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008388:	2b20      	cmp	r3, #32
 800838a:	bfc1      	itttt	gt
 800838c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008390:	409f      	lslgt	r7, r3
 8008392:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008396:	fa24 f303 	lsrgt.w	r3, r4, r3
 800839a:	bfd6      	itet	le
 800839c:	f1c3 0320 	rsble	r3, r3, #32
 80083a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80083a4:	fa04 f003 	lslle.w	r0, r4, r3
 80083a8:	f7f8 f8ac 	bl	8000504 <__aeabi_ui2d>
 80083ac:	2201      	movs	r2, #1
 80083ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80083b2:	3e01      	subs	r6, #1
 80083b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80083b6:	e777      	b.n	80082a8 <_dtoa_r+0x100>
 80083b8:	2301      	movs	r3, #1
 80083ba:	e7b8      	b.n	800832e <_dtoa_r+0x186>
 80083bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80083be:	e7b7      	b.n	8008330 <_dtoa_r+0x188>
 80083c0:	427b      	negs	r3, r7
 80083c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80083c4:	2300      	movs	r3, #0
 80083c6:	eba8 0807 	sub.w	r8, r8, r7
 80083ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083cc:	e7c4      	b.n	8008358 <_dtoa_r+0x1b0>
 80083ce:	2300      	movs	r3, #0
 80083d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	dc35      	bgt.n	8008444 <_dtoa_r+0x29c>
 80083d8:	2301      	movs	r3, #1
 80083da:	9300      	str	r3, [sp, #0]
 80083dc:	9307      	str	r3, [sp, #28]
 80083de:	461a      	mov	r2, r3
 80083e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e2:	e00b      	b.n	80083fc <_dtoa_r+0x254>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e7f3      	b.n	80083d0 <_dtoa_r+0x228>
 80083e8:	2300      	movs	r3, #0
 80083ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083ee:	18fb      	adds	r3, r7, r3
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	9307      	str	r3, [sp, #28]
 80083f8:	bfb8      	it	lt
 80083fa:	2301      	movlt	r3, #1
 80083fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008400:	2100      	movs	r1, #0
 8008402:	2204      	movs	r2, #4
 8008404:	f102 0514 	add.w	r5, r2, #20
 8008408:	429d      	cmp	r5, r3
 800840a:	d91f      	bls.n	800844c <_dtoa_r+0x2a4>
 800840c:	6041      	str	r1, [r0, #4]
 800840e:	4658      	mov	r0, fp
 8008410:	f000 fd8e 	bl	8008f30 <_Balloc>
 8008414:	4682      	mov	sl, r0
 8008416:	2800      	cmp	r0, #0
 8008418:	d13c      	bne.n	8008494 <_dtoa_r+0x2ec>
 800841a:	4b1b      	ldr	r3, [pc, #108]	@ (8008488 <_dtoa_r+0x2e0>)
 800841c:	4602      	mov	r2, r0
 800841e:	f240 11af 	movw	r1, #431	@ 0x1af
 8008422:	e6d8      	b.n	80081d6 <_dtoa_r+0x2e>
 8008424:	2301      	movs	r3, #1
 8008426:	e7e0      	b.n	80083ea <_dtoa_r+0x242>
 8008428:	2401      	movs	r4, #1
 800842a:	2300      	movs	r3, #0
 800842c:	9309      	str	r3, [sp, #36]	@ 0x24
 800842e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008430:	f04f 33ff 	mov.w	r3, #4294967295
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	9307      	str	r3, [sp, #28]
 8008438:	2200      	movs	r2, #0
 800843a:	2312      	movs	r3, #18
 800843c:	e7d0      	b.n	80083e0 <_dtoa_r+0x238>
 800843e:	2301      	movs	r3, #1
 8008440:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008442:	e7f5      	b.n	8008430 <_dtoa_r+0x288>
 8008444:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	9307      	str	r3, [sp, #28]
 800844a:	e7d7      	b.n	80083fc <_dtoa_r+0x254>
 800844c:	3101      	adds	r1, #1
 800844e:	0052      	lsls	r2, r2, #1
 8008450:	e7d8      	b.n	8008404 <_dtoa_r+0x25c>
 8008452:	bf00      	nop
 8008454:	f3af 8000 	nop.w
 8008458:	636f4361 	.word	0x636f4361
 800845c:	3fd287a7 	.word	0x3fd287a7
 8008460:	8b60c8b3 	.word	0x8b60c8b3
 8008464:	3fc68a28 	.word	0x3fc68a28
 8008468:	509f79fb 	.word	0x509f79fb
 800846c:	3fd34413 	.word	0x3fd34413
 8008470:	0801d219 	.word	0x0801d219
 8008474:	0801d230 	.word	0x0801d230
 8008478:	7ff00000 	.word	0x7ff00000
 800847c:	0801d1e9 	.word	0x0801d1e9
 8008480:	3ff80000 	.word	0x3ff80000
 8008484:	0801d328 	.word	0x0801d328
 8008488:	0801d288 	.word	0x0801d288
 800848c:	0801d215 	.word	0x0801d215
 8008490:	0801d1e8 	.word	0x0801d1e8
 8008494:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008498:	6018      	str	r0, [r3, #0]
 800849a:	9b07      	ldr	r3, [sp, #28]
 800849c:	2b0e      	cmp	r3, #14
 800849e:	f200 80a4 	bhi.w	80085ea <_dtoa_r+0x442>
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	f000 80a1 	beq.w	80085ea <_dtoa_r+0x442>
 80084a8:	2f00      	cmp	r7, #0
 80084aa:	dd33      	ble.n	8008514 <_dtoa_r+0x36c>
 80084ac:	4bad      	ldr	r3, [pc, #692]	@ (8008764 <_dtoa_r+0x5bc>)
 80084ae:	f007 020f 	and.w	r2, r7, #15
 80084b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084b6:	ed93 7b00 	vldr	d7, [r3]
 80084ba:	05f8      	lsls	r0, r7, #23
 80084bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80084c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80084c4:	d516      	bpl.n	80084f4 <_dtoa_r+0x34c>
 80084c6:	4ba8      	ldr	r3, [pc, #672]	@ (8008768 <_dtoa_r+0x5c0>)
 80084c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80084d0:	f7f8 f9bc 	bl	800084c <__aeabi_ddiv>
 80084d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084d8:	f004 040f 	and.w	r4, r4, #15
 80084dc:	2603      	movs	r6, #3
 80084de:	4da2      	ldr	r5, [pc, #648]	@ (8008768 <_dtoa_r+0x5c0>)
 80084e0:	b954      	cbnz	r4, 80084f8 <_dtoa_r+0x350>
 80084e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	f7f8 f9af 	bl	800084c <__aeabi_ddiv>
 80084ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80084f2:	e028      	b.n	8008546 <_dtoa_r+0x39e>
 80084f4:	2602      	movs	r6, #2
 80084f6:	e7f2      	b.n	80084de <_dtoa_r+0x336>
 80084f8:	07e1      	lsls	r1, r4, #31
 80084fa:	d508      	bpl.n	800850e <_dtoa_r+0x366>
 80084fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008500:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008504:	f7f8 f878 	bl	80005f8 <__aeabi_dmul>
 8008508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800850c:	3601      	adds	r6, #1
 800850e:	1064      	asrs	r4, r4, #1
 8008510:	3508      	adds	r5, #8
 8008512:	e7e5      	b.n	80084e0 <_dtoa_r+0x338>
 8008514:	f000 80d2 	beq.w	80086bc <_dtoa_r+0x514>
 8008518:	427c      	negs	r4, r7
 800851a:	4b92      	ldr	r3, [pc, #584]	@ (8008764 <_dtoa_r+0x5bc>)
 800851c:	4d92      	ldr	r5, [pc, #584]	@ (8008768 <_dtoa_r+0x5c0>)
 800851e:	f004 020f 	and.w	r2, r4, #15
 8008522:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852e:	f7f8 f863 	bl	80005f8 <__aeabi_dmul>
 8008532:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008536:	1124      	asrs	r4, r4, #4
 8008538:	2300      	movs	r3, #0
 800853a:	2602      	movs	r6, #2
 800853c:	2c00      	cmp	r4, #0
 800853e:	f040 80b2 	bne.w	80086a6 <_dtoa_r+0x4fe>
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1d3      	bne.n	80084ee <_dtoa_r+0x346>
 8008546:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008548:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80b7 	beq.w	80086c0 <_dtoa_r+0x518>
 8008552:	4b86      	ldr	r3, [pc, #536]	@ (800876c <_dtoa_r+0x5c4>)
 8008554:	2200      	movs	r2, #0
 8008556:	4620      	mov	r0, r4
 8008558:	4629      	mov	r1, r5
 800855a:	f7f8 fabf 	bl	8000adc <__aeabi_dcmplt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f000 80ae 	beq.w	80086c0 <_dtoa_r+0x518>
 8008564:	9b07      	ldr	r3, [sp, #28]
 8008566:	2b00      	cmp	r3, #0
 8008568:	f000 80aa 	beq.w	80086c0 <_dtoa_r+0x518>
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	dd37      	ble.n	80085e2 <_dtoa_r+0x43a>
 8008572:	1e7b      	subs	r3, r7, #1
 8008574:	9304      	str	r3, [sp, #16]
 8008576:	4620      	mov	r0, r4
 8008578:	4b7d      	ldr	r3, [pc, #500]	@ (8008770 <_dtoa_r+0x5c8>)
 800857a:	2200      	movs	r2, #0
 800857c:	4629      	mov	r1, r5
 800857e:	f7f8 f83b 	bl	80005f8 <__aeabi_dmul>
 8008582:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008586:	9c00      	ldr	r4, [sp, #0]
 8008588:	3601      	adds	r6, #1
 800858a:	4630      	mov	r0, r6
 800858c:	f7f7 ffca 	bl	8000524 <__aeabi_i2d>
 8008590:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008594:	f7f8 f830 	bl	80005f8 <__aeabi_dmul>
 8008598:	4b76      	ldr	r3, [pc, #472]	@ (8008774 <_dtoa_r+0x5cc>)
 800859a:	2200      	movs	r2, #0
 800859c:	f7f7 fe76 	bl	800028c <__adddf3>
 80085a0:	4605      	mov	r5, r0
 80085a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80085a6:	2c00      	cmp	r4, #0
 80085a8:	f040 808d 	bne.w	80086c6 <_dtoa_r+0x51e>
 80085ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085b0:	4b71      	ldr	r3, [pc, #452]	@ (8008778 <_dtoa_r+0x5d0>)
 80085b2:	2200      	movs	r2, #0
 80085b4:	f7f7 fe68 	bl	8000288 <__aeabi_dsub>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80085c0:	462a      	mov	r2, r5
 80085c2:	4633      	mov	r3, r6
 80085c4:	f7f8 faa8 	bl	8000b18 <__aeabi_dcmpgt>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f040 828b 	bne.w	8008ae4 <_dtoa_r+0x93c>
 80085ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d2:	462a      	mov	r2, r5
 80085d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80085d8:	f7f8 fa80 	bl	8000adc <__aeabi_dcmplt>
 80085dc:	2800      	cmp	r0, #0
 80085de:	f040 8128 	bne.w	8008832 <_dtoa_r+0x68a>
 80085e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80085e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80085ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f2c0 815a 	blt.w	80088a6 <_dtoa_r+0x6fe>
 80085f2:	2f0e      	cmp	r7, #14
 80085f4:	f300 8157 	bgt.w	80088a6 <_dtoa_r+0x6fe>
 80085f8:	4b5a      	ldr	r3, [pc, #360]	@ (8008764 <_dtoa_r+0x5bc>)
 80085fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085fe:	ed93 7b00 	vldr	d7, [r3]
 8008602:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008604:	2b00      	cmp	r3, #0
 8008606:	ed8d 7b00 	vstr	d7, [sp]
 800860a:	da03      	bge.n	8008614 <_dtoa_r+0x46c>
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f340 8101 	ble.w	8008816 <_dtoa_r+0x66e>
 8008614:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008618:	4656      	mov	r6, sl
 800861a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800861e:	4620      	mov	r0, r4
 8008620:	4629      	mov	r1, r5
 8008622:	f7f8 f913 	bl	800084c <__aeabi_ddiv>
 8008626:	f7f8 fa97 	bl	8000b58 <__aeabi_d2iz>
 800862a:	4680      	mov	r8, r0
 800862c:	f7f7 ff7a 	bl	8000524 <__aeabi_i2d>
 8008630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008634:	f7f7 ffe0 	bl	80005f8 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4620      	mov	r0, r4
 800863e:	4629      	mov	r1, r5
 8008640:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008644:	f7f7 fe20 	bl	8000288 <__aeabi_dsub>
 8008648:	f806 4b01 	strb.w	r4, [r6], #1
 800864c:	9d07      	ldr	r5, [sp, #28]
 800864e:	eba6 040a 	sub.w	r4, r6, sl
 8008652:	42a5      	cmp	r5, r4
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	f040 8117 	bne.w	800888a <_dtoa_r+0x6e2>
 800865c:	f7f7 fe16 	bl	800028c <__adddf3>
 8008660:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008664:	4604      	mov	r4, r0
 8008666:	460d      	mov	r5, r1
 8008668:	f7f8 fa56 	bl	8000b18 <__aeabi_dcmpgt>
 800866c:	2800      	cmp	r0, #0
 800866e:	f040 80f9 	bne.w	8008864 <_dtoa_r+0x6bc>
 8008672:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008676:	4620      	mov	r0, r4
 8008678:	4629      	mov	r1, r5
 800867a:	f7f8 fa25 	bl	8000ac8 <__aeabi_dcmpeq>
 800867e:	b118      	cbz	r0, 8008688 <_dtoa_r+0x4e0>
 8008680:	f018 0f01 	tst.w	r8, #1
 8008684:	f040 80ee 	bne.w	8008864 <_dtoa_r+0x6bc>
 8008688:	4649      	mov	r1, r9
 800868a:	4658      	mov	r0, fp
 800868c:	f000 fc90 	bl	8008fb0 <_Bfree>
 8008690:	2300      	movs	r3, #0
 8008692:	7033      	strb	r3, [r6, #0]
 8008694:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008696:	3701      	adds	r7, #1
 8008698:	601f      	str	r7, [r3, #0]
 800869a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 831d 	beq.w	8008cdc <_dtoa_r+0xb34>
 80086a2:	601e      	str	r6, [r3, #0]
 80086a4:	e31a      	b.n	8008cdc <_dtoa_r+0xb34>
 80086a6:	07e2      	lsls	r2, r4, #31
 80086a8:	d505      	bpl.n	80086b6 <_dtoa_r+0x50e>
 80086aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80086ae:	f7f7 ffa3 	bl	80005f8 <__aeabi_dmul>
 80086b2:	3601      	adds	r6, #1
 80086b4:	2301      	movs	r3, #1
 80086b6:	1064      	asrs	r4, r4, #1
 80086b8:	3508      	adds	r5, #8
 80086ba:	e73f      	b.n	800853c <_dtoa_r+0x394>
 80086bc:	2602      	movs	r6, #2
 80086be:	e742      	b.n	8008546 <_dtoa_r+0x39e>
 80086c0:	9c07      	ldr	r4, [sp, #28]
 80086c2:	9704      	str	r7, [sp, #16]
 80086c4:	e761      	b.n	800858a <_dtoa_r+0x3e2>
 80086c6:	4b27      	ldr	r3, [pc, #156]	@ (8008764 <_dtoa_r+0x5bc>)
 80086c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086d2:	4454      	add	r4, sl
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d053      	beq.n	8008780 <_dtoa_r+0x5d8>
 80086d8:	4928      	ldr	r1, [pc, #160]	@ (800877c <_dtoa_r+0x5d4>)
 80086da:	2000      	movs	r0, #0
 80086dc:	f7f8 f8b6 	bl	800084c <__aeabi_ddiv>
 80086e0:	4633      	mov	r3, r6
 80086e2:	462a      	mov	r2, r5
 80086e4:	f7f7 fdd0 	bl	8000288 <__aeabi_dsub>
 80086e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80086ec:	4656      	mov	r6, sl
 80086ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f2:	f7f8 fa31 	bl	8000b58 <__aeabi_d2iz>
 80086f6:	4605      	mov	r5, r0
 80086f8:	f7f7 ff14 	bl	8000524 <__aeabi_i2d>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008704:	f7f7 fdc0 	bl	8000288 <__aeabi_dsub>
 8008708:	3530      	adds	r5, #48	@ 0x30
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008712:	f806 5b01 	strb.w	r5, [r6], #1
 8008716:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800871a:	f7f8 f9df 	bl	8000adc <__aeabi_dcmplt>
 800871e:	2800      	cmp	r0, #0
 8008720:	d171      	bne.n	8008806 <_dtoa_r+0x65e>
 8008722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008726:	4911      	ldr	r1, [pc, #68]	@ (800876c <_dtoa_r+0x5c4>)
 8008728:	2000      	movs	r0, #0
 800872a:	f7f7 fdad 	bl	8000288 <__aeabi_dsub>
 800872e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008732:	f7f8 f9d3 	bl	8000adc <__aeabi_dcmplt>
 8008736:	2800      	cmp	r0, #0
 8008738:	f040 8095 	bne.w	8008866 <_dtoa_r+0x6be>
 800873c:	42a6      	cmp	r6, r4
 800873e:	f43f af50 	beq.w	80085e2 <_dtoa_r+0x43a>
 8008742:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008746:	4b0a      	ldr	r3, [pc, #40]	@ (8008770 <_dtoa_r+0x5c8>)
 8008748:	2200      	movs	r2, #0
 800874a:	f7f7 ff55 	bl	80005f8 <__aeabi_dmul>
 800874e:	4b08      	ldr	r3, [pc, #32]	@ (8008770 <_dtoa_r+0x5c8>)
 8008750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008754:	2200      	movs	r2, #0
 8008756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008762:	e7c4      	b.n	80086ee <_dtoa_r+0x546>
 8008764:	0801d328 	.word	0x0801d328
 8008768:	0801d300 	.word	0x0801d300
 800876c:	3ff00000 	.word	0x3ff00000
 8008770:	40240000 	.word	0x40240000
 8008774:	401c0000 	.word	0x401c0000
 8008778:	40140000 	.word	0x40140000
 800877c:	3fe00000 	.word	0x3fe00000
 8008780:	4631      	mov	r1, r6
 8008782:	4628      	mov	r0, r5
 8008784:	f7f7 ff38 	bl	80005f8 <__aeabi_dmul>
 8008788:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800878c:	9415      	str	r4, [sp, #84]	@ 0x54
 800878e:	4656      	mov	r6, sl
 8008790:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008794:	f7f8 f9e0 	bl	8000b58 <__aeabi_d2iz>
 8008798:	4605      	mov	r5, r0
 800879a:	f7f7 fec3 	bl	8000524 <__aeabi_i2d>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087a6:	f7f7 fd6f 	bl	8000288 <__aeabi_dsub>
 80087aa:	3530      	adds	r5, #48	@ 0x30
 80087ac:	f806 5b01 	strb.w	r5, [r6], #1
 80087b0:	4602      	mov	r2, r0
 80087b2:	460b      	mov	r3, r1
 80087b4:	42a6      	cmp	r6, r4
 80087b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087ba:	f04f 0200 	mov.w	r2, #0
 80087be:	d124      	bne.n	800880a <_dtoa_r+0x662>
 80087c0:	4bac      	ldr	r3, [pc, #688]	@ (8008a74 <_dtoa_r+0x8cc>)
 80087c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087c6:	f7f7 fd61 	bl	800028c <__adddf3>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087d2:	f7f8 f9a1 	bl	8000b18 <__aeabi_dcmpgt>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d145      	bne.n	8008866 <_dtoa_r+0x6be>
 80087da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087de:	49a5      	ldr	r1, [pc, #660]	@ (8008a74 <_dtoa_r+0x8cc>)
 80087e0:	2000      	movs	r0, #0
 80087e2:	f7f7 fd51 	bl	8000288 <__aeabi_dsub>
 80087e6:	4602      	mov	r2, r0
 80087e8:	460b      	mov	r3, r1
 80087ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087ee:	f7f8 f975 	bl	8000adc <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f43f aef5 	beq.w	80085e2 <_dtoa_r+0x43a>
 80087f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80087fa:	1e73      	subs	r3, r6, #1
 80087fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80087fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008802:	2b30      	cmp	r3, #48	@ 0x30
 8008804:	d0f8      	beq.n	80087f8 <_dtoa_r+0x650>
 8008806:	9f04      	ldr	r7, [sp, #16]
 8008808:	e73e      	b.n	8008688 <_dtoa_r+0x4e0>
 800880a:	4b9b      	ldr	r3, [pc, #620]	@ (8008a78 <_dtoa_r+0x8d0>)
 800880c:	f7f7 fef4 	bl	80005f8 <__aeabi_dmul>
 8008810:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008814:	e7bc      	b.n	8008790 <_dtoa_r+0x5e8>
 8008816:	d10c      	bne.n	8008832 <_dtoa_r+0x68a>
 8008818:	4b98      	ldr	r3, [pc, #608]	@ (8008a7c <_dtoa_r+0x8d4>)
 800881a:	2200      	movs	r2, #0
 800881c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008820:	f7f7 feea 	bl	80005f8 <__aeabi_dmul>
 8008824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008828:	f7f8 f96c 	bl	8000b04 <__aeabi_dcmpge>
 800882c:	2800      	cmp	r0, #0
 800882e:	f000 8157 	beq.w	8008ae0 <_dtoa_r+0x938>
 8008832:	2400      	movs	r4, #0
 8008834:	4625      	mov	r5, r4
 8008836:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008838:	43db      	mvns	r3, r3
 800883a:	9304      	str	r3, [sp, #16]
 800883c:	4656      	mov	r6, sl
 800883e:	2700      	movs	r7, #0
 8008840:	4621      	mov	r1, r4
 8008842:	4658      	mov	r0, fp
 8008844:	f000 fbb4 	bl	8008fb0 <_Bfree>
 8008848:	2d00      	cmp	r5, #0
 800884a:	d0dc      	beq.n	8008806 <_dtoa_r+0x65e>
 800884c:	b12f      	cbz	r7, 800885a <_dtoa_r+0x6b2>
 800884e:	42af      	cmp	r7, r5
 8008850:	d003      	beq.n	800885a <_dtoa_r+0x6b2>
 8008852:	4639      	mov	r1, r7
 8008854:	4658      	mov	r0, fp
 8008856:	f000 fbab 	bl	8008fb0 <_Bfree>
 800885a:	4629      	mov	r1, r5
 800885c:	4658      	mov	r0, fp
 800885e:	f000 fba7 	bl	8008fb0 <_Bfree>
 8008862:	e7d0      	b.n	8008806 <_dtoa_r+0x65e>
 8008864:	9704      	str	r7, [sp, #16]
 8008866:	4633      	mov	r3, r6
 8008868:	461e      	mov	r6, r3
 800886a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800886e:	2a39      	cmp	r2, #57	@ 0x39
 8008870:	d107      	bne.n	8008882 <_dtoa_r+0x6da>
 8008872:	459a      	cmp	sl, r3
 8008874:	d1f8      	bne.n	8008868 <_dtoa_r+0x6c0>
 8008876:	9a04      	ldr	r2, [sp, #16]
 8008878:	3201      	adds	r2, #1
 800887a:	9204      	str	r2, [sp, #16]
 800887c:	2230      	movs	r2, #48	@ 0x30
 800887e:	f88a 2000 	strb.w	r2, [sl]
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	3201      	adds	r2, #1
 8008886:	701a      	strb	r2, [r3, #0]
 8008888:	e7bd      	b.n	8008806 <_dtoa_r+0x65e>
 800888a:	4b7b      	ldr	r3, [pc, #492]	@ (8008a78 <_dtoa_r+0x8d0>)
 800888c:	2200      	movs	r2, #0
 800888e:	f7f7 feb3 	bl	80005f8 <__aeabi_dmul>
 8008892:	2200      	movs	r2, #0
 8008894:	2300      	movs	r3, #0
 8008896:	4604      	mov	r4, r0
 8008898:	460d      	mov	r5, r1
 800889a:	f7f8 f915 	bl	8000ac8 <__aeabi_dcmpeq>
 800889e:	2800      	cmp	r0, #0
 80088a0:	f43f aebb 	beq.w	800861a <_dtoa_r+0x472>
 80088a4:	e6f0      	b.n	8008688 <_dtoa_r+0x4e0>
 80088a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80088a8:	2a00      	cmp	r2, #0
 80088aa:	f000 80db 	beq.w	8008a64 <_dtoa_r+0x8bc>
 80088ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80088b0:	2a01      	cmp	r2, #1
 80088b2:	f300 80bf 	bgt.w	8008a34 <_dtoa_r+0x88c>
 80088b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80088b8:	2a00      	cmp	r2, #0
 80088ba:	f000 80b7 	beq.w	8008a2c <_dtoa_r+0x884>
 80088be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80088c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80088c4:	4646      	mov	r6, r8
 80088c6:	9a08      	ldr	r2, [sp, #32]
 80088c8:	2101      	movs	r1, #1
 80088ca:	441a      	add	r2, r3
 80088cc:	4658      	mov	r0, fp
 80088ce:	4498      	add	r8, r3
 80088d0:	9208      	str	r2, [sp, #32]
 80088d2:	f000 fc21 	bl	8009118 <__i2b>
 80088d6:	4605      	mov	r5, r0
 80088d8:	b15e      	cbz	r6, 80088f2 <_dtoa_r+0x74a>
 80088da:	9b08      	ldr	r3, [sp, #32]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	dd08      	ble.n	80088f2 <_dtoa_r+0x74a>
 80088e0:	42b3      	cmp	r3, r6
 80088e2:	9a08      	ldr	r2, [sp, #32]
 80088e4:	bfa8      	it	ge
 80088e6:	4633      	movge	r3, r6
 80088e8:	eba8 0803 	sub.w	r8, r8, r3
 80088ec:	1af6      	subs	r6, r6, r3
 80088ee:	1ad3      	subs	r3, r2, r3
 80088f0:	9308      	str	r3, [sp, #32]
 80088f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088f4:	b1f3      	cbz	r3, 8008934 <_dtoa_r+0x78c>
 80088f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f000 80b7 	beq.w	8008a6c <_dtoa_r+0x8c4>
 80088fe:	b18c      	cbz	r4, 8008924 <_dtoa_r+0x77c>
 8008900:	4629      	mov	r1, r5
 8008902:	4622      	mov	r2, r4
 8008904:	4658      	mov	r0, fp
 8008906:	f000 fcc7 	bl	8009298 <__pow5mult>
 800890a:	464a      	mov	r2, r9
 800890c:	4601      	mov	r1, r0
 800890e:	4605      	mov	r5, r0
 8008910:	4658      	mov	r0, fp
 8008912:	f000 fc17 	bl	8009144 <__multiply>
 8008916:	4649      	mov	r1, r9
 8008918:	9004      	str	r0, [sp, #16]
 800891a:	4658      	mov	r0, fp
 800891c:	f000 fb48 	bl	8008fb0 <_Bfree>
 8008920:	9b04      	ldr	r3, [sp, #16]
 8008922:	4699      	mov	r9, r3
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	1b1a      	subs	r2, r3, r4
 8008928:	d004      	beq.n	8008934 <_dtoa_r+0x78c>
 800892a:	4649      	mov	r1, r9
 800892c:	4658      	mov	r0, fp
 800892e:	f000 fcb3 	bl	8009298 <__pow5mult>
 8008932:	4681      	mov	r9, r0
 8008934:	2101      	movs	r1, #1
 8008936:	4658      	mov	r0, fp
 8008938:	f000 fbee 	bl	8009118 <__i2b>
 800893c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800893e:	4604      	mov	r4, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	f000 81cf 	beq.w	8008ce4 <_dtoa_r+0xb3c>
 8008946:	461a      	mov	r2, r3
 8008948:	4601      	mov	r1, r0
 800894a:	4658      	mov	r0, fp
 800894c:	f000 fca4 	bl	8009298 <__pow5mult>
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	2b01      	cmp	r3, #1
 8008954:	4604      	mov	r4, r0
 8008956:	f300 8095 	bgt.w	8008a84 <_dtoa_r+0x8dc>
 800895a:	9b02      	ldr	r3, [sp, #8]
 800895c:	2b00      	cmp	r3, #0
 800895e:	f040 8087 	bne.w	8008a70 <_dtoa_r+0x8c8>
 8008962:	9b03      	ldr	r3, [sp, #12]
 8008964:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008968:	2b00      	cmp	r3, #0
 800896a:	f040 8089 	bne.w	8008a80 <_dtoa_r+0x8d8>
 800896e:	9b03      	ldr	r3, [sp, #12]
 8008970:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008974:	0d1b      	lsrs	r3, r3, #20
 8008976:	051b      	lsls	r3, r3, #20
 8008978:	b12b      	cbz	r3, 8008986 <_dtoa_r+0x7de>
 800897a:	9b08      	ldr	r3, [sp, #32]
 800897c:	3301      	adds	r3, #1
 800897e:	9308      	str	r3, [sp, #32]
 8008980:	f108 0801 	add.w	r8, r8, #1
 8008984:	2301      	movs	r3, #1
 8008986:	930a      	str	r3, [sp, #40]	@ 0x28
 8008988:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898a:	2b00      	cmp	r3, #0
 800898c:	f000 81b0 	beq.w	8008cf0 <_dtoa_r+0xb48>
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008996:	6918      	ldr	r0, [r3, #16]
 8008998:	f000 fb72 	bl	8009080 <__hi0bits>
 800899c:	f1c0 0020 	rsb	r0, r0, #32
 80089a0:	9b08      	ldr	r3, [sp, #32]
 80089a2:	4418      	add	r0, r3
 80089a4:	f010 001f 	ands.w	r0, r0, #31
 80089a8:	d077      	beq.n	8008a9a <_dtoa_r+0x8f2>
 80089aa:	f1c0 0320 	rsb	r3, r0, #32
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	dd6b      	ble.n	8008a8a <_dtoa_r+0x8e2>
 80089b2:	9b08      	ldr	r3, [sp, #32]
 80089b4:	f1c0 001c 	rsb	r0, r0, #28
 80089b8:	4403      	add	r3, r0
 80089ba:	4480      	add	r8, r0
 80089bc:	4406      	add	r6, r0
 80089be:	9308      	str	r3, [sp, #32]
 80089c0:	f1b8 0f00 	cmp.w	r8, #0
 80089c4:	dd05      	ble.n	80089d2 <_dtoa_r+0x82a>
 80089c6:	4649      	mov	r1, r9
 80089c8:	4642      	mov	r2, r8
 80089ca:	4658      	mov	r0, fp
 80089cc:	f000 fcbe 	bl	800934c <__lshift>
 80089d0:	4681      	mov	r9, r0
 80089d2:	9b08      	ldr	r3, [sp, #32]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	dd05      	ble.n	80089e4 <_dtoa_r+0x83c>
 80089d8:	4621      	mov	r1, r4
 80089da:	461a      	mov	r2, r3
 80089dc:	4658      	mov	r0, fp
 80089de:	f000 fcb5 	bl	800934c <__lshift>
 80089e2:	4604      	mov	r4, r0
 80089e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d059      	beq.n	8008a9e <_dtoa_r+0x8f6>
 80089ea:	4621      	mov	r1, r4
 80089ec:	4648      	mov	r0, r9
 80089ee:	f000 fd19 	bl	8009424 <__mcmp>
 80089f2:	2800      	cmp	r0, #0
 80089f4:	da53      	bge.n	8008a9e <_dtoa_r+0x8f6>
 80089f6:	1e7b      	subs	r3, r7, #1
 80089f8:	9304      	str	r3, [sp, #16]
 80089fa:	4649      	mov	r1, r9
 80089fc:	2300      	movs	r3, #0
 80089fe:	220a      	movs	r2, #10
 8008a00:	4658      	mov	r0, fp
 8008a02:	f000 faf7 	bl	8008ff4 <__multadd>
 8008a06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a08:	4681      	mov	r9, r0
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 8172 	beq.w	8008cf4 <_dtoa_r+0xb4c>
 8008a10:	2300      	movs	r3, #0
 8008a12:	4629      	mov	r1, r5
 8008a14:	220a      	movs	r2, #10
 8008a16:	4658      	mov	r0, fp
 8008a18:	f000 faec 	bl	8008ff4 <__multadd>
 8008a1c:	9b00      	ldr	r3, [sp, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	4605      	mov	r5, r0
 8008a22:	dc67      	bgt.n	8008af4 <_dtoa_r+0x94c>
 8008a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	dc41      	bgt.n	8008aae <_dtoa_r+0x906>
 8008a2a:	e063      	b.n	8008af4 <_dtoa_r+0x94c>
 8008a2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008a2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008a32:	e746      	b.n	80088c2 <_dtoa_r+0x71a>
 8008a34:	9b07      	ldr	r3, [sp, #28]
 8008a36:	1e5c      	subs	r4, r3, #1
 8008a38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a3a:	42a3      	cmp	r3, r4
 8008a3c:	bfbf      	itttt	lt
 8008a3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008a40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008a42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008a44:	1ae3      	sublt	r3, r4, r3
 8008a46:	bfb4      	ite	lt
 8008a48:	18d2      	addlt	r2, r2, r3
 8008a4a:	1b1c      	subge	r4, r3, r4
 8008a4c:	9b07      	ldr	r3, [sp, #28]
 8008a4e:	bfbc      	itt	lt
 8008a50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008a52:	2400      	movlt	r4, #0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	bfb5      	itete	lt
 8008a58:	eba8 0603 	sublt.w	r6, r8, r3
 8008a5c:	9b07      	ldrge	r3, [sp, #28]
 8008a5e:	2300      	movlt	r3, #0
 8008a60:	4646      	movge	r6, r8
 8008a62:	e730      	b.n	80088c6 <_dtoa_r+0x71e>
 8008a64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008a66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008a68:	4646      	mov	r6, r8
 8008a6a:	e735      	b.n	80088d8 <_dtoa_r+0x730>
 8008a6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a6e:	e75c      	b.n	800892a <_dtoa_r+0x782>
 8008a70:	2300      	movs	r3, #0
 8008a72:	e788      	b.n	8008986 <_dtoa_r+0x7de>
 8008a74:	3fe00000 	.word	0x3fe00000
 8008a78:	40240000 	.word	0x40240000
 8008a7c:	40140000 	.word	0x40140000
 8008a80:	9b02      	ldr	r3, [sp, #8]
 8008a82:	e780      	b.n	8008986 <_dtoa_r+0x7de>
 8008a84:	2300      	movs	r3, #0
 8008a86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a88:	e782      	b.n	8008990 <_dtoa_r+0x7e8>
 8008a8a:	d099      	beq.n	80089c0 <_dtoa_r+0x818>
 8008a8c:	9a08      	ldr	r2, [sp, #32]
 8008a8e:	331c      	adds	r3, #28
 8008a90:	441a      	add	r2, r3
 8008a92:	4498      	add	r8, r3
 8008a94:	441e      	add	r6, r3
 8008a96:	9208      	str	r2, [sp, #32]
 8008a98:	e792      	b.n	80089c0 <_dtoa_r+0x818>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	e7f6      	b.n	8008a8c <_dtoa_r+0x8e4>
 8008a9e:	9b07      	ldr	r3, [sp, #28]
 8008aa0:	9704      	str	r7, [sp, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	dc20      	bgt.n	8008ae8 <_dtoa_r+0x940>
 8008aa6:	9300      	str	r3, [sp, #0]
 8008aa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aaa:	2b02      	cmp	r3, #2
 8008aac:	dd1e      	ble.n	8008aec <_dtoa_r+0x944>
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	f47f aec0 	bne.w	8008836 <_dtoa_r+0x68e>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	2205      	movs	r2, #5
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fa9a 	bl	8008ff4 <__multadd>
 8008ac0:	4601      	mov	r1, r0
 8008ac2:	4604      	mov	r4, r0
 8008ac4:	4648      	mov	r0, r9
 8008ac6:	f000 fcad 	bl	8009424 <__mcmp>
 8008aca:	2800      	cmp	r0, #0
 8008acc:	f77f aeb3 	ble.w	8008836 <_dtoa_r+0x68e>
 8008ad0:	4656      	mov	r6, sl
 8008ad2:	2331      	movs	r3, #49	@ 0x31
 8008ad4:	f806 3b01 	strb.w	r3, [r6], #1
 8008ad8:	9b04      	ldr	r3, [sp, #16]
 8008ada:	3301      	adds	r3, #1
 8008adc:	9304      	str	r3, [sp, #16]
 8008ade:	e6ae      	b.n	800883e <_dtoa_r+0x696>
 8008ae0:	9c07      	ldr	r4, [sp, #28]
 8008ae2:	9704      	str	r7, [sp, #16]
 8008ae4:	4625      	mov	r5, r4
 8008ae6:	e7f3      	b.n	8008ad0 <_dtoa_r+0x928>
 8008ae8:	9b07      	ldr	r3, [sp, #28]
 8008aea:	9300      	str	r3, [sp, #0]
 8008aec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	f000 8104 	beq.w	8008cfc <_dtoa_r+0xb54>
 8008af4:	2e00      	cmp	r6, #0
 8008af6:	dd05      	ble.n	8008b04 <_dtoa_r+0x95c>
 8008af8:	4629      	mov	r1, r5
 8008afa:	4632      	mov	r2, r6
 8008afc:	4658      	mov	r0, fp
 8008afe:	f000 fc25 	bl	800934c <__lshift>
 8008b02:	4605      	mov	r5, r0
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d05a      	beq.n	8008bc0 <_dtoa_r+0xa18>
 8008b0a:	6869      	ldr	r1, [r5, #4]
 8008b0c:	4658      	mov	r0, fp
 8008b0e:	f000 fa0f 	bl	8008f30 <_Balloc>
 8008b12:	4606      	mov	r6, r0
 8008b14:	b928      	cbnz	r0, 8008b22 <_dtoa_r+0x97a>
 8008b16:	4b84      	ldr	r3, [pc, #528]	@ (8008d28 <_dtoa_r+0xb80>)
 8008b18:	4602      	mov	r2, r0
 8008b1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008b1e:	f7ff bb5a 	b.w	80081d6 <_dtoa_r+0x2e>
 8008b22:	692a      	ldr	r2, [r5, #16]
 8008b24:	3202      	adds	r2, #2
 8008b26:	0092      	lsls	r2, r2, #2
 8008b28:	f105 010c 	add.w	r1, r5, #12
 8008b2c:	300c      	adds	r0, #12
 8008b2e:	f000 ffaf 	bl	8009a90 <memcpy>
 8008b32:	2201      	movs	r2, #1
 8008b34:	4631      	mov	r1, r6
 8008b36:	4658      	mov	r0, fp
 8008b38:	f000 fc08 	bl	800934c <__lshift>
 8008b3c:	f10a 0301 	add.w	r3, sl, #1
 8008b40:	9307      	str	r3, [sp, #28]
 8008b42:	9b00      	ldr	r3, [sp, #0]
 8008b44:	4453      	add	r3, sl
 8008b46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b48:	9b02      	ldr	r3, [sp, #8]
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	462f      	mov	r7, r5
 8008b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b52:	4605      	mov	r5, r0
 8008b54:	9b07      	ldr	r3, [sp, #28]
 8008b56:	4621      	mov	r1, r4
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4648      	mov	r0, r9
 8008b5c:	9300      	str	r3, [sp, #0]
 8008b5e:	f7ff fa9a 	bl	8008096 <quorem>
 8008b62:	4639      	mov	r1, r7
 8008b64:	9002      	str	r0, [sp, #8]
 8008b66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008b6a:	4648      	mov	r0, r9
 8008b6c:	f000 fc5a 	bl	8009424 <__mcmp>
 8008b70:	462a      	mov	r2, r5
 8008b72:	9008      	str	r0, [sp, #32]
 8008b74:	4621      	mov	r1, r4
 8008b76:	4658      	mov	r0, fp
 8008b78:	f000 fc70 	bl	800945c <__mdiff>
 8008b7c:	68c2      	ldr	r2, [r0, #12]
 8008b7e:	4606      	mov	r6, r0
 8008b80:	bb02      	cbnz	r2, 8008bc4 <_dtoa_r+0xa1c>
 8008b82:	4601      	mov	r1, r0
 8008b84:	4648      	mov	r0, r9
 8008b86:	f000 fc4d 	bl	8009424 <__mcmp>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	4631      	mov	r1, r6
 8008b8e:	4658      	mov	r0, fp
 8008b90:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b92:	f000 fa0d 	bl	8008fb0 <_Bfree>
 8008b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b9a:	9e07      	ldr	r6, [sp, #28]
 8008b9c:	ea43 0102 	orr.w	r1, r3, r2
 8008ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ba2:	4319      	orrs	r1, r3
 8008ba4:	d110      	bne.n	8008bc8 <_dtoa_r+0xa20>
 8008ba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008baa:	d029      	beq.n	8008c00 <_dtoa_r+0xa58>
 8008bac:	9b08      	ldr	r3, [sp, #32]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	dd02      	ble.n	8008bb8 <_dtoa_r+0xa10>
 8008bb2:	9b02      	ldr	r3, [sp, #8]
 8008bb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008bb8:	9b00      	ldr	r3, [sp, #0]
 8008bba:	f883 8000 	strb.w	r8, [r3]
 8008bbe:	e63f      	b.n	8008840 <_dtoa_r+0x698>
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	e7bb      	b.n	8008b3c <_dtoa_r+0x994>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	e7e1      	b.n	8008b8c <_dtoa_r+0x9e4>
 8008bc8:	9b08      	ldr	r3, [sp, #32]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	db04      	blt.n	8008bd8 <_dtoa_r+0xa30>
 8008bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008bd4:	430b      	orrs	r3, r1
 8008bd6:	d120      	bne.n	8008c1a <_dtoa_r+0xa72>
 8008bd8:	2a00      	cmp	r2, #0
 8008bda:	dded      	ble.n	8008bb8 <_dtoa_r+0xa10>
 8008bdc:	4649      	mov	r1, r9
 8008bde:	2201      	movs	r2, #1
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fbb3 	bl	800934c <__lshift>
 8008be6:	4621      	mov	r1, r4
 8008be8:	4681      	mov	r9, r0
 8008bea:	f000 fc1b 	bl	8009424 <__mcmp>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	dc03      	bgt.n	8008bfa <_dtoa_r+0xa52>
 8008bf2:	d1e1      	bne.n	8008bb8 <_dtoa_r+0xa10>
 8008bf4:	f018 0f01 	tst.w	r8, #1
 8008bf8:	d0de      	beq.n	8008bb8 <_dtoa_r+0xa10>
 8008bfa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008bfe:	d1d8      	bne.n	8008bb2 <_dtoa_r+0xa0a>
 8008c00:	9a00      	ldr	r2, [sp, #0]
 8008c02:	2339      	movs	r3, #57	@ 0x39
 8008c04:	7013      	strb	r3, [r2, #0]
 8008c06:	4633      	mov	r3, r6
 8008c08:	461e      	mov	r6, r3
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008c10:	2a39      	cmp	r2, #57	@ 0x39
 8008c12:	d052      	beq.n	8008cba <_dtoa_r+0xb12>
 8008c14:	3201      	adds	r2, #1
 8008c16:	701a      	strb	r2, [r3, #0]
 8008c18:	e612      	b.n	8008840 <_dtoa_r+0x698>
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	dd07      	ble.n	8008c2e <_dtoa_r+0xa86>
 8008c1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c22:	d0ed      	beq.n	8008c00 <_dtoa_r+0xa58>
 8008c24:	9a00      	ldr	r2, [sp, #0]
 8008c26:	f108 0301 	add.w	r3, r8, #1
 8008c2a:	7013      	strb	r3, [r2, #0]
 8008c2c:	e608      	b.n	8008840 <_dtoa_r+0x698>
 8008c2e:	9b07      	ldr	r3, [sp, #28]
 8008c30:	9a07      	ldr	r2, [sp, #28]
 8008c32:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008c36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d028      	beq.n	8008c8e <_dtoa_r+0xae6>
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	2300      	movs	r3, #0
 8008c40:	220a      	movs	r2, #10
 8008c42:	4658      	mov	r0, fp
 8008c44:	f000 f9d6 	bl	8008ff4 <__multadd>
 8008c48:	42af      	cmp	r7, r5
 8008c4a:	4681      	mov	r9, r0
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	f04f 020a 	mov.w	r2, #10
 8008c54:	4639      	mov	r1, r7
 8008c56:	4658      	mov	r0, fp
 8008c58:	d107      	bne.n	8008c6a <_dtoa_r+0xac2>
 8008c5a:	f000 f9cb 	bl	8008ff4 <__multadd>
 8008c5e:	4607      	mov	r7, r0
 8008c60:	4605      	mov	r5, r0
 8008c62:	9b07      	ldr	r3, [sp, #28]
 8008c64:	3301      	adds	r3, #1
 8008c66:	9307      	str	r3, [sp, #28]
 8008c68:	e774      	b.n	8008b54 <_dtoa_r+0x9ac>
 8008c6a:	f000 f9c3 	bl	8008ff4 <__multadd>
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4607      	mov	r7, r0
 8008c72:	2300      	movs	r3, #0
 8008c74:	220a      	movs	r2, #10
 8008c76:	4658      	mov	r0, fp
 8008c78:	f000 f9bc 	bl	8008ff4 <__multadd>
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	e7f0      	b.n	8008c62 <_dtoa_r+0xaba>
 8008c80:	9b00      	ldr	r3, [sp, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bfcc      	ite	gt
 8008c86:	461e      	movgt	r6, r3
 8008c88:	2601      	movle	r6, #1
 8008c8a:	4456      	add	r6, sl
 8008c8c:	2700      	movs	r7, #0
 8008c8e:	4649      	mov	r1, r9
 8008c90:	2201      	movs	r2, #1
 8008c92:	4658      	mov	r0, fp
 8008c94:	f000 fb5a 	bl	800934c <__lshift>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	4681      	mov	r9, r0
 8008c9c:	f000 fbc2 	bl	8009424 <__mcmp>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	dcb0      	bgt.n	8008c06 <_dtoa_r+0xa5e>
 8008ca4:	d102      	bne.n	8008cac <_dtoa_r+0xb04>
 8008ca6:	f018 0f01 	tst.w	r8, #1
 8008caa:	d1ac      	bne.n	8008c06 <_dtoa_r+0xa5e>
 8008cac:	4633      	mov	r3, r6
 8008cae:	461e      	mov	r6, r3
 8008cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb4:	2a30      	cmp	r2, #48	@ 0x30
 8008cb6:	d0fa      	beq.n	8008cae <_dtoa_r+0xb06>
 8008cb8:	e5c2      	b.n	8008840 <_dtoa_r+0x698>
 8008cba:	459a      	cmp	sl, r3
 8008cbc:	d1a4      	bne.n	8008c08 <_dtoa_r+0xa60>
 8008cbe:	9b04      	ldr	r3, [sp, #16]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	9304      	str	r3, [sp, #16]
 8008cc4:	2331      	movs	r3, #49	@ 0x31
 8008cc6:	f88a 3000 	strb.w	r3, [sl]
 8008cca:	e5b9      	b.n	8008840 <_dtoa_r+0x698>
 8008ccc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008cce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008d2c <_dtoa_r+0xb84>
 8008cd2:	b11b      	cbz	r3, 8008cdc <_dtoa_r+0xb34>
 8008cd4:	f10a 0308 	add.w	r3, sl, #8
 8008cd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4650      	mov	r0, sl
 8008cde:	b019      	add	sp, #100	@ 0x64
 8008ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ce6:	2b01      	cmp	r3, #1
 8008ce8:	f77f ae37 	ble.w	800895a <_dtoa_r+0x7b2>
 8008cec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8008cf0:	2001      	movs	r0, #1
 8008cf2:	e655      	b.n	80089a0 <_dtoa_r+0x7f8>
 8008cf4:	9b00      	ldr	r3, [sp, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f77f aed6 	ble.w	8008aa8 <_dtoa_r+0x900>
 8008cfc:	4656      	mov	r6, sl
 8008cfe:	4621      	mov	r1, r4
 8008d00:	4648      	mov	r0, r9
 8008d02:	f7ff f9c8 	bl	8008096 <quorem>
 8008d06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008d0a:	f806 8b01 	strb.w	r8, [r6], #1
 8008d0e:	9b00      	ldr	r3, [sp, #0]
 8008d10:	eba6 020a 	sub.w	r2, r6, sl
 8008d14:	4293      	cmp	r3, r2
 8008d16:	ddb3      	ble.n	8008c80 <_dtoa_r+0xad8>
 8008d18:	4649      	mov	r1, r9
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	4658      	mov	r0, fp
 8008d20:	f000 f968 	bl	8008ff4 <__multadd>
 8008d24:	4681      	mov	r9, r0
 8008d26:	e7ea      	b.n	8008cfe <_dtoa_r+0xb56>
 8008d28:	0801d288 	.word	0x0801d288
 8008d2c:	0801d20c 	.word	0x0801d20c

08008d30 <_free_r>:
 8008d30:	b538      	push	{r3, r4, r5, lr}
 8008d32:	4605      	mov	r5, r0
 8008d34:	2900      	cmp	r1, #0
 8008d36:	d041      	beq.n	8008dbc <_free_r+0x8c>
 8008d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3c:	1f0c      	subs	r4, r1, #4
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	bfb8      	it	lt
 8008d42:	18e4      	addlt	r4, r4, r3
 8008d44:	f000 f8e8 	bl	8008f18 <__malloc_lock>
 8008d48:	4a1d      	ldr	r2, [pc, #116]	@ (8008dc0 <_free_r+0x90>)
 8008d4a:	6813      	ldr	r3, [r2, #0]
 8008d4c:	b933      	cbnz	r3, 8008d5c <_free_r+0x2c>
 8008d4e:	6063      	str	r3, [r4, #4]
 8008d50:	6014      	str	r4, [r2, #0]
 8008d52:	4628      	mov	r0, r5
 8008d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d58:	f000 b8e4 	b.w	8008f24 <__malloc_unlock>
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	d908      	bls.n	8008d72 <_free_r+0x42>
 8008d60:	6820      	ldr	r0, [r4, #0]
 8008d62:	1821      	adds	r1, r4, r0
 8008d64:	428b      	cmp	r3, r1
 8008d66:	bf01      	itttt	eq
 8008d68:	6819      	ldreq	r1, [r3, #0]
 8008d6a:	685b      	ldreq	r3, [r3, #4]
 8008d6c:	1809      	addeq	r1, r1, r0
 8008d6e:	6021      	streq	r1, [r4, #0]
 8008d70:	e7ed      	b.n	8008d4e <_free_r+0x1e>
 8008d72:	461a      	mov	r2, r3
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	b10b      	cbz	r3, 8008d7c <_free_r+0x4c>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d9fa      	bls.n	8008d72 <_free_r+0x42>
 8008d7c:	6811      	ldr	r1, [r2, #0]
 8008d7e:	1850      	adds	r0, r2, r1
 8008d80:	42a0      	cmp	r0, r4
 8008d82:	d10b      	bne.n	8008d9c <_free_r+0x6c>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	4401      	add	r1, r0
 8008d88:	1850      	adds	r0, r2, r1
 8008d8a:	4283      	cmp	r3, r0
 8008d8c:	6011      	str	r1, [r2, #0]
 8008d8e:	d1e0      	bne.n	8008d52 <_free_r+0x22>
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	6053      	str	r3, [r2, #4]
 8008d96:	4408      	add	r0, r1
 8008d98:	6010      	str	r0, [r2, #0]
 8008d9a:	e7da      	b.n	8008d52 <_free_r+0x22>
 8008d9c:	d902      	bls.n	8008da4 <_free_r+0x74>
 8008d9e:	230c      	movs	r3, #12
 8008da0:	602b      	str	r3, [r5, #0]
 8008da2:	e7d6      	b.n	8008d52 <_free_r+0x22>
 8008da4:	6820      	ldr	r0, [r4, #0]
 8008da6:	1821      	adds	r1, r4, r0
 8008da8:	428b      	cmp	r3, r1
 8008daa:	bf04      	itt	eq
 8008dac:	6819      	ldreq	r1, [r3, #0]
 8008dae:	685b      	ldreq	r3, [r3, #4]
 8008db0:	6063      	str	r3, [r4, #4]
 8008db2:	bf04      	itt	eq
 8008db4:	1809      	addeq	r1, r1, r0
 8008db6:	6021      	streq	r1, [r4, #0]
 8008db8:	6054      	str	r4, [r2, #4]
 8008dba:	e7ca      	b.n	8008d52 <_free_r+0x22>
 8008dbc:	bd38      	pop	{r3, r4, r5, pc}
 8008dbe:	bf00      	nop
 8008dc0:	200044a0 	.word	0x200044a0

08008dc4 <malloc>:
 8008dc4:	4b02      	ldr	r3, [pc, #8]	@ (8008dd0 <malloc+0xc>)
 8008dc6:	4601      	mov	r1, r0
 8008dc8:	6818      	ldr	r0, [r3, #0]
 8008dca:	f000 b825 	b.w	8008e18 <_malloc_r>
 8008dce:	bf00      	nop
 8008dd0:	20000018 	.word	0x20000018

08008dd4 <sbrk_aligned>:
 8008dd4:	b570      	push	{r4, r5, r6, lr}
 8008dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8008e14 <sbrk_aligned+0x40>)
 8008dd8:	460c      	mov	r4, r1
 8008dda:	6831      	ldr	r1, [r6, #0]
 8008ddc:	4605      	mov	r5, r0
 8008dde:	b911      	cbnz	r1, 8008de6 <sbrk_aligned+0x12>
 8008de0:	f000 fe46 	bl	8009a70 <_sbrk_r>
 8008de4:	6030      	str	r0, [r6, #0]
 8008de6:	4621      	mov	r1, r4
 8008de8:	4628      	mov	r0, r5
 8008dea:	f000 fe41 	bl	8009a70 <_sbrk_r>
 8008dee:	1c43      	adds	r3, r0, #1
 8008df0:	d103      	bne.n	8008dfa <sbrk_aligned+0x26>
 8008df2:	f04f 34ff 	mov.w	r4, #4294967295
 8008df6:	4620      	mov	r0, r4
 8008df8:	bd70      	pop	{r4, r5, r6, pc}
 8008dfa:	1cc4      	adds	r4, r0, #3
 8008dfc:	f024 0403 	bic.w	r4, r4, #3
 8008e00:	42a0      	cmp	r0, r4
 8008e02:	d0f8      	beq.n	8008df6 <sbrk_aligned+0x22>
 8008e04:	1a21      	subs	r1, r4, r0
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fe32 	bl	8009a70 <_sbrk_r>
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	d1f2      	bne.n	8008df6 <sbrk_aligned+0x22>
 8008e10:	e7ef      	b.n	8008df2 <sbrk_aligned+0x1e>
 8008e12:	bf00      	nop
 8008e14:	2000449c 	.word	0x2000449c

08008e18 <_malloc_r>:
 8008e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	1ccd      	adds	r5, r1, #3
 8008e1e:	f025 0503 	bic.w	r5, r5, #3
 8008e22:	3508      	adds	r5, #8
 8008e24:	2d0c      	cmp	r5, #12
 8008e26:	bf38      	it	cc
 8008e28:	250c      	movcc	r5, #12
 8008e2a:	2d00      	cmp	r5, #0
 8008e2c:	4606      	mov	r6, r0
 8008e2e:	db01      	blt.n	8008e34 <_malloc_r+0x1c>
 8008e30:	42a9      	cmp	r1, r5
 8008e32:	d904      	bls.n	8008e3e <_malloc_r+0x26>
 8008e34:	230c      	movs	r3, #12
 8008e36:	6033      	str	r3, [r6, #0]
 8008e38:	2000      	movs	r0, #0
 8008e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f14 <_malloc_r+0xfc>
 8008e42:	f000 f869 	bl	8008f18 <__malloc_lock>
 8008e46:	f8d8 3000 	ldr.w	r3, [r8]
 8008e4a:	461c      	mov	r4, r3
 8008e4c:	bb44      	cbnz	r4, 8008ea0 <_malloc_r+0x88>
 8008e4e:	4629      	mov	r1, r5
 8008e50:	4630      	mov	r0, r6
 8008e52:	f7ff ffbf 	bl	8008dd4 <sbrk_aligned>
 8008e56:	1c43      	adds	r3, r0, #1
 8008e58:	4604      	mov	r4, r0
 8008e5a:	d158      	bne.n	8008f0e <_malloc_r+0xf6>
 8008e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8008e60:	4627      	mov	r7, r4
 8008e62:	2f00      	cmp	r7, #0
 8008e64:	d143      	bne.n	8008eee <_malloc_r+0xd6>
 8008e66:	2c00      	cmp	r4, #0
 8008e68:	d04b      	beq.n	8008f02 <_malloc_r+0xea>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	4639      	mov	r1, r7
 8008e6e:	4630      	mov	r0, r6
 8008e70:	eb04 0903 	add.w	r9, r4, r3
 8008e74:	f000 fdfc 	bl	8009a70 <_sbrk_r>
 8008e78:	4581      	cmp	r9, r0
 8008e7a:	d142      	bne.n	8008f02 <_malloc_r+0xea>
 8008e7c:	6821      	ldr	r1, [r4, #0]
 8008e7e:	1a6d      	subs	r5, r5, r1
 8008e80:	4629      	mov	r1, r5
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7ff ffa6 	bl	8008dd4 <sbrk_aligned>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d03a      	beq.n	8008f02 <_malloc_r+0xea>
 8008e8c:	6823      	ldr	r3, [r4, #0]
 8008e8e:	442b      	add	r3, r5
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	f8d8 3000 	ldr.w	r3, [r8]
 8008e96:	685a      	ldr	r2, [r3, #4]
 8008e98:	bb62      	cbnz	r2, 8008ef4 <_malloc_r+0xdc>
 8008e9a:	f8c8 7000 	str.w	r7, [r8]
 8008e9e:	e00f      	b.n	8008ec0 <_malloc_r+0xa8>
 8008ea0:	6822      	ldr	r2, [r4, #0]
 8008ea2:	1b52      	subs	r2, r2, r5
 8008ea4:	d420      	bmi.n	8008ee8 <_malloc_r+0xd0>
 8008ea6:	2a0b      	cmp	r2, #11
 8008ea8:	d917      	bls.n	8008eda <_malloc_r+0xc2>
 8008eaa:	1961      	adds	r1, r4, r5
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	6025      	str	r5, [r4, #0]
 8008eb0:	bf18      	it	ne
 8008eb2:	6059      	strne	r1, [r3, #4]
 8008eb4:	6863      	ldr	r3, [r4, #4]
 8008eb6:	bf08      	it	eq
 8008eb8:	f8c8 1000 	streq.w	r1, [r8]
 8008ebc:	5162      	str	r2, [r4, r5]
 8008ebe:	604b      	str	r3, [r1, #4]
 8008ec0:	4630      	mov	r0, r6
 8008ec2:	f000 f82f 	bl	8008f24 <__malloc_unlock>
 8008ec6:	f104 000b 	add.w	r0, r4, #11
 8008eca:	1d23      	adds	r3, r4, #4
 8008ecc:	f020 0007 	bic.w	r0, r0, #7
 8008ed0:	1ac2      	subs	r2, r0, r3
 8008ed2:	bf1c      	itt	ne
 8008ed4:	1a1b      	subne	r3, r3, r0
 8008ed6:	50a3      	strne	r3, [r4, r2]
 8008ed8:	e7af      	b.n	8008e3a <_malloc_r+0x22>
 8008eda:	6862      	ldr	r2, [r4, #4]
 8008edc:	42a3      	cmp	r3, r4
 8008ede:	bf0c      	ite	eq
 8008ee0:	f8c8 2000 	streq.w	r2, [r8]
 8008ee4:	605a      	strne	r2, [r3, #4]
 8008ee6:	e7eb      	b.n	8008ec0 <_malloc_r+0xa8>
 8008ee8:	4623      	mov	r3, r4
 8008eea:	6864      	ldr	r4, [r4, #4]
 8008eec:	e7ae      	b.n	8008e4c <_malloc_r+0x34>
 8008eee:	463c      	mov	r4, r7
 8008ef0:	687f      	ldr	r7, [r7, #4]
 8008ef2:	e7b6      	b.n	8008e62 <_malloc_r+0x4a>
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d1fb      	bne.n	8008ef4 <_malloc_r+0xdc>
 8008efc:	2300      	movs	r3, #0
 8008efe:	6053      	str	r3, [r2, #4]
 8008f00:	e7de      	b.n	8008ec0 <_malloc_r+0xa8>
 8008f02:	230c      	movs	r3, #12
 8008f04:	6033      	str	r3, [r6, #0]
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 f80c 	bl	8008f24 <__malloc_unlock>
 8008f0c:	e794      	b.n	8008e38 <_malloc_r+0x20>
 8008f0e:	6005      	str	r5, [r0, #0]
 8008f10:	e7d6      	b.n	8008ec0 <_malloc_r+0xa8>
 8008f12:	bf00      	nop
 8008f14:	200044a0 	.word	0x200044a0

08008f18 <__malloc_lock>:
 8008f18:	4801      	ldr	r0, [pc, #4]	@ (8008f20 <__malloc_lock+0x8>)
 8008f1a:	f7ff b8ba 	b.w	8008092 <__retarget_lock_acquire_recursive>
 8008f1e:	bf00      	nop
 8008f20:	20004498 	.word	0x20004498

08008f24 <__malloc_unlock>:
 8008f24:	4801      	ldr	r0, [pc, #4]	@ (8008f2c <__malloc_unlock+0x8>)
 8008f26:	f7ff b8b5 	b.w	8008094 <__retarget_lock_release_recursive>
 8008f2a:	bf00      	nop
 8008f2c:	20004498 	.word	0x20004498

08008f30 <_Balloc>:
 8008f30:	b570      	push	{r4, r5, r6, lr}
 8008f32:	69c6      	ldr	r6, [r0, #28]
 8008f34:	4604      	mov	r4, r0
 8008f36:	460d      	mov	r5, r1
 8008f38:	b976      	cbnz	r6, 8008f58 <_Balloc+0x28>
 8008f3a:	2010      	movs	r0, #16
 8008f3c:	f7ff ff42 	bl	8008dc4 <malloc>
 8008f40:	4602      	mov	r2, r0
 8008f42:	61e0      	str	r0, [r4, #28]
 8008f44:	b920      	cbnz	r0, 8008f50 <_Balloc+0x20>
 8008f46:	4b18      	ldr	r3, [pc, #96]	@ (8008fa8 <_Balloc+0x78>)
 8008f48:	4818      	ldr	r0, [pc, #96]	@ (8008fac <_Balloc+0x7c>)
 8008f4a:	216b      	movs	r1, #107	@ 0x6b
 8008f4c:	f000 fdae 	bl	8009aac <__assert_func>
 8008f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008f54:	6006      	str	r6, [r0, #0]
 8008f56:	60c6      	str	r6, [r0, #12]
 8008f58:	69e6      	ldr	r6, [r4, #28]
 8008f5a:	68f3      	ldr	r3, [r6, #12]
 8008f5c:	b183      	cbz	r3, 8008f80 <_Balloc+0x50>
 8008f5e:	69e3      	ldr	r3, [r4, #28]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008f66:	b9b8      	cbnz	r0, 8008f98 <_Balloc+0x68>
 8008f68:	2101      	movs	r1, #1
 8008f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008f6e:	1d72      	adds	r2, r6, #5
 8008f70:	0092      	lsls	r2, r2, #2
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 fdb8 	bl	8009ae8 <_calloc_r>
 8008f78:	b160      	cbz	r0, 8008f94 <_Balloc+0x64>
 8008f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008f7e:	e00e      	b.n	8008f9e <_Balloc+0x6e>
 8008f80:	2221      	movs	r2, #33	@ 0x21
 8008f82:	2104      	movs	r1, #4
 8008f84:	4620      	mov	r0, r4
 8008f86:	f000 fdaf 	bl	8009ae8 <_calloc_r>
 8008f8a:	69e3      	ldr	r3, [r4, #28]
 8008f8c:	60f0      	str	r0, [r6, #12]
 8008f8e:	68db      	ldr	r3, [r3, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e4      	bne.n	8008f5e <_Balloc+0x2e>
 8008f94:	2000      	movs	r0, #0
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	6802      	ldr	r2, [r0, #0]
 8008f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008fa4:	e7f7      	b.n	8008f96 <_Balloc+0x66>
 8008fa6:	bf00      	nop
 8008fa8:	0801d219 	.word	0x0801d219
 8008fac:	0801d299 	.word	0x0801d299

08008fb0 <_Bfree>:
 8008fb0:	b570      	push	{r4, r5, r6, lr}
 8008fb2:	69c6      	ldr	r6, [r0, #28]
 8008fb4:	4605      	mov	r5, r0
 8008fb6:	460c      	mov	r4, r1
 8008fb8:	b976      	cbnz	r6, 8008fd8 <_Bfree+0x28>
 8008fba:	2010      	movs	r0, #16
 8008fbc:	f7ff ff02 	bl	8008dc4 <malloc>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	61e8      	str	r0, [r5, #28]
 8008fc4:	b920      	cbnz	r0, 8008fd0 <_Bfree+0x20>
 8008fc6:	4b09      	ldr	r3, [pc, #36]	@ (8008fec <_Bfree+0x3c>)
 8008fc8:	4809      	ldr	r0, [pc, #36]	@ (8008ff0 <_Bfree+0x40>)
 8008fca:	218f      	movs	r1, #143	@ 0x8f
 8008fcc:	f000 fd6e 	bl	8009aac <__assert_func>
 8008fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fd4:	6006      	str	r6, [r0, #0]
 8008fd6:	60c6      	str	r6, [r0, #12]
 8008fd8:	b13c      	cbz	r4, 8008fea <_Bfree+0x3a>
 8008fda:	69eb      	ldr	r3, [r5, #28]
 8008fdc:	6862      	ldr	r2, [r4, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008fe4:	6021      	str	r1, [r4, #0]
 8008fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008fea:	bd70      	pop	{r4, r5, r6, pc}
 8008fec:	0801d219 	.word	0x0801d219
 8008ff0:	0801d299 	.word	0x0801d299

08008ff4 <__multadd>:
 8008ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff8:	690d      	ldr	r5, [r1, #16]
 8008ffa:	4607      	mov	r7, r0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	461e      	mov	r6, r3
 8009000:	f101 0c14 	add.w	ip, r1, #20
 8009004:	2000      	movs	r0, #0
 8009006:	f8dc 3000 	ldr.w	r3, [ip]
 800900a:	b299      	uxth	r1, r3
 800900c:	fb02 6101 	mla	r1, r2, r1, r6
 8009010:	0c1e      	lsrs	r6, r3, #16
 8009012:	0c0b      	lsrs	r3, r1, #16
 8009014:	fb02 3306 	mla	r3, r2, r6, r3
 8009018:	b289      	uxth	r1, r1
 800901a:	3001      	adds	r0, #1
 800901c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009020:	4285      	cmp	r5, r0
 8009022:	f84c 1b04 	str.w	r1, [ip], #4
 8009026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800902a:	dcec      	bgt.n	8009006 <__multadd+0x12>
 800902c:	b30e      	cbz	r6, 8009072 <__multadd+0x7e>
 800902e:	68a3      	ldr	r3, [r4, #8]
 8009030:	42ab      	cmp	r3, r5
 8009032:	dc19      	bgt.n	8009068 <__multadd+0x74>
 8009034:	6861      	ldr	r1, [r4, #4]
 8009036:	4638      	mov	r0, r7
 8009038:	3101      	adds	r1, #1
 800903a:	f7ff ff79 	bl	8008f30 <_Balloc>
 800903e:	4680      	mov	r8, r0
 8009040:	b928      	cbnz	r0, 800904e <__multadd+0x5a>
 8009042:	4602      	mov	r2, r0
 8009044:	4b0c      	ldr	r3, [pc, #48]	@ (8009078 <__multadd+0x84>)
 8009046:	480d      	ldr	r0, [pc, #52]	@ (800907c <__multadd+0x88>)
 8009048:	21ba      	movs	r1, #186	@ 0xba
 800904a:	f000 fd2f 	bl	8009aac <__assert_func>
 800904e:	6922      	ldr	r2, [r4, #16]
 8009050:	3202      	adds	r2, #2
 8009052:	f104 010c 	add.w	r1, r4, #12
 8009056:	0092      	lsls	r2, r2, #2
 8009058:	300c      	adds	r0, #12
 800905a:	f000 fd19 	bl	8009a90 <memcpy>
 800905e:	4621      	mov	r1, r4
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ffa5 	bl	8008fb0 <_Bfree>
 8009066:	4644      	mov	r4, r8
 8009068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800906c:	3501      	adds	r5, #1
 800906e:	615e      	str	r6, [r3, #20]
 8009070:	6125      	str	r5, [r4, #16]
 8009072:	4620      	mov	r0, r4
 8009074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009078:	0801d288 	.word	0x0801d288
 800907c:	0801d299 	.word	0x0801d299

08009080 <__hi0bits>:
 8009080:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009084:	4603      	mov	r3, r0
 8009086:	bf36      	itet	cc
 8009088:	0403      	lslcc	r3, r0, #16
 800908a:	2000      	movcs	r0, #0
 800908c:	2010      	movcc	r0, #16
 800908e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009092:	bf3c      	itt	cc
 8009094:	021b      	lslcc	r3, r3, #8
 8009096:	3008      	addcc	r0, #8
 8009098:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800909c:	bf3c      	itt	cc
 800909e:	011b      	lslcc	r3, r3, #4
 80090a0:	3004      	addcc	r0, #4
 80090a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090a6:	bf3c      	itt	cc
 80090a8:	009b      	lslcc	r3, r3, #2
 80090aa:	3002      	addcc	r0, #2
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	db05      	blt.n	80090bc <__hi0bits+0x3c>
 80090b0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80090b4:	f100 0001 	add.w	r0, r0, #1
 80090b8:	bf08      	it	eq
 80090ba:	2020      	moveq	r0, #32
 80090bc:	4770      	bx	lr

080090be <__lo0bits>:
 80090be:	6803      	ldr	r3, [r0, #0]
 80090c0:	4602      	mov	r2, r0
 80090c2:	f013 0007 	ands.w	r0, r3, #7
 80090c6:	d00b      	beq.n	80090e0 <__lo0bits+0x22>
 80090c8:	07d9      	lsls	r1, r3, #31
 80090ca:	d421      	bmi.n	8009110 <__lo0bits+0x52>
 80090cc:	0798      	lsls	r0, r3, #30
 80090ce:	bf49      	itett	mi
 80090d0:	085b      	lsrmi	r3, r3, #1
 80090d2:	089b      	lsrpl	r3, r3, #2
 80090d4:	2001      	movmi	r0, #1
 80090d6:	6013      	strmi	r3, [r2, #0]
 80090d8:	bf5c      	itt	pl
 80090da:	6013      	strpl	r3, [r2, #0]
 80090dc:	2002      	movpl	r0, #2
 80090de:	4770      	bx	lr
 80090e0:	b299      	uxth	r1, r3
 80090e2:	b909      	cbnz	r1, 80090e8 <__lo0bits+0x2a>
 80090e4:	0c1b      	lsrs	r3, r3, #16
 80090e6:	2010      	movs	r0, #16
 80090e8:	b2d9      	uxtb	r1, r3
 80090ea:	b909      	cbnz	r1, 80090f0 <__lo0bits+0x32>
 80090ec:	3008      	adds	r0, #8
 80090ee:	0a1b      	lsrs	r3, r3, #8
 80090f0:	0719      	lsls	r1, r3, #28
 80090f2:	bf04      	itt	eq
 80090f4:	091b      	lsreq	r3, r3, #4
 80090f6:	3004      	addeq	r0, #4
 80090f8:	0799      	lsls	r1, r3, #30
 80090fa:	bf04      	itt	eq
 80090fc:	089b      	lsreq	r3, r3, #2
 80090fe:	3002      	addeq	r0, #2
 8009100:	07d9      	lsls	r1, r3, #31
 8009102:	d403      	bmi.n	800910c <__lo0bits+0x4e>
 8009104:	085b      	lsrs	r3, r3, #1
 8009106:	f100 0001 	add.w	r0, r0, #1
 800910a:	d003      	beq.n	8009114 <__lo0bits+0x56>
 800910c:	6013      	str	r3, [r2, #0]
 800910e:	4770      	bx	lr
 8009110:	2000      	movs	r0, #0
 8009112:	4770      	bx	lr
 8009114:	2020      	movs	r0, #32
 8009116:	4770      	bx	lr

08009118 <__i2b>:
 8009118:	b510      	push	{r4, lr}
 800911a:	460c      	mov	r4, r1
 800911c:	2101      	movs	r1, #1
 800911e:	f7ff ff07 	bl	8008f30 <_Balloc>
 8009122:	4602      	mov	r2, r0
 8009124:	b928      	cbnz	r0, 8009132 <__i2b+0x1a>
 8009126:	4b05      	ldr	r3, [pc, #20]	@ (800913c <__i2b+0x24>)
 8009128:	4805      	ldr	r0, [pc, #20]	@ (8009140 <__i2b+0x28>)
 800912a:	f240 1145 	movw	r1, #325	@ 0x145
 800912e:	f000 fcbd 	bl	8009aac <__assert_func>
 8009132:	2301      	movs	r3, #1
 8009134:	6144      	str	r4, [r0, #20]
 8009136:	6103      	str	r3, [r0, #16]
 8009138:	bd10      	pop	{r4, pc}
 800913a:	bf00      	nop
 800913c:	0801d288 	.word	0x0801d288
 8009140:	0801d299 	.word	0x0801d299

08009144 <__multiply>:
 8009144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009148:	4614      	mov	r4, r2
 800914a:	690a      	ldr	r2, [r1, #16]
 800914c:	6923      	ldr	r3, [r4, #16]
 800914e:	429a      	cmp	r2, r3
 8009150:	bfa8      	it	ge
 8009152:	4623      	movge	r3, r4
 8009154:	460f      	mov	r7, r1
 8009156:	bfa4      	itt	ge
 8009158:	460c      	movge	r4, r1
 800915a:	461f      	movge	r7, r3
 800915c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009160:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009164:	68a3      	ldr	r3, [r4, #8]
 8009166:	6861      	ldr	r1, [r4, #4]
 8009168:	eb0a 0609 	add.w	r6, sl, r9
 800916c:	42b3      	cmp	r3, r6
 800916e:	b085      	sub	sp, #20
 8009170:	bfb8      	it	lt
 8009172:	3101      	addlt	r1, #1
 8009174:	f7ff fedc 	bl	8008f30 <_Balloc>
 8009178:	b930      	cbnz	r0, 8009188 <__multiply+0x44>
 800917a:	4602      	mov	r2, r0
 800917c:	4b44      	ldr	r3, [pc, #272]	@ (8009290 <__multiply+0x14c>)
 800917e:	4845      	ldr	r0, [pc, #276]	@ (8009294 <__multiply+0x150>)
 8009180:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009184:	f000 fc92 	bl	8009aac <__assert_func>
 8009188:	f100 0514 	add.w	r5, r0, #20
 800918c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009190:	462b      	mov	r3, r5
 8009192:	2200      	movs	r2, #0
 8009194:	4543      	cmp	r3, r8
 8009196:	d321      	bcc.n	80091dc <__multiply+0x98>
 8009198:	f107 0114 	add.w	r1, r7, #20
 800919c:	f104 0214 	add.w	r2, r4, #20
 80091a0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80091a4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80091a8:	9302      	str	r3, [sp, #8]
 80091aa:	1b13      	subs	r3, r2, r4
 80091ac:	3b15      	subs	r3, #21
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	3304      	adds	r3, #4
 80091b4:	f104 0715 	add.w	r7, r4, #21
 80091b8:	42ba      	cmp	r2, r7
 80091ba:	bf38      	it	cc
 80091bc:	2304      	movcc	r3, #4
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	9b02      	ldr	r3, [sp, #8]
 80091c2:	9103      	str	r1, [sp, #12]
 80091c4:	428b      	cmp	r3, r1
 80091c6:	d80c      	bhi.n	80091e2 <__multiply+0x9e>
 80091c8:	2e00      	cmp	r6, #0
 80091ca:	dd03      	ble.n	80091d4 <__multiply+0x90>
 80091cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05b      	beq.n	800928c <__multiply+0x148>
 80091d4:	6106      	str	r6, [r0, #16]
 80091d6:	b005      	add	sp, #20
 80091d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091dc:	f843 2b04 	str.w	r2, [r3], #4
 80091e0:	e7d8      	b.n	8009194 <__multiply+0x50>
 80091e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80091e6:	f1ba 0f00 	cmp.w	sl, #0
 80091ea:	d024      	beq.n	8009236 <__multiply+0xf2>
 80091ec:	f104 0e14 	add.w	lr, r4, #20
 80091f0:	46a9      	mov	r9, r5
 80091f2:	f04f 0c00 	mov.w	ip, #0
 80091f6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091fa:	f8d9 3000 	ldr.w	r3, [r9]
 80091fe:	fa1f fb87 	uxth.w	fp, r7
 8009202:	b29b      	uxth	r3, r3
 8009204:	fb0a 330b 	mla	r3, sl, fp, r3
 8009208:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800920c:	f8d9 7000 	ldr.w	r7, [r9]
 8009210:	4463      	add	r3, ip
 8009212:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009216:	fb0a c70b 	mla	r7, sl, fp, ip
 800921a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800921e:	b29b      	uxth	r3, r3
 8009220:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009224:	4572      	cmp	r2, lr
 8009226:	f849 3b04 	str.w	r3, [r9], #4
 800922a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800922e:	d8e2      	bhi.n	80091f6 <__multiply+0xb2>
 8009230:	9b01      	ldr	r3, [sp, #4]
 8009232:	f845 c003 	str.w	ip, [r5, r3]
 8009236:	9b03      	ldr	r3, [sp, #12]
 8009238:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800923c:	3104      	adds	r1, #4
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	d021      	beq.n	8009288 <__multiply+0x144>
 8009244:	682b      	ldr	r3, [r5, #0]
 8009246:	f104 0c14 	add.w	ip, r4, #20
 800924a:	46ae      	mov	lr, r5
 800924c:	f04f 0a00 	mov.w	sl, #0
 8009250:	f8bc b000 	ldrh.w	fp, [ip]
 8009254:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009258:	fb09 770b 	mla	r7, r9, fp, r7
 800925c:	4457      	add	r7, sl
 800925e:	b29b      	uxth	r3, r3
 8009260:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009264:	f84e 3b04 	str.w	r3, [lr], #4
 8009268:	f85c 3b04 	ldr.w	r3, [ip], #4
 800926c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009270:	f8be 3000 	ldrh.w	r3, [lr]
 8009274:	fb09 330a 	mla	r3, r9, sl, r3
 8009278:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800927c:	4562      	cmp	r2, ip
 800927e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009282:	d8e5      	bhi.n	8009250 <__multiply+0x10c>
 8009284:	9f01      	ldr	r7, [sp, #4]
 8009286:	51eb      	str	r3, [r5, r7]
 8009288:	3504      	adds	r5, #4
 800928a:	e799      	b.n	80091c0 <__multiply+0x7c>
 800928c:	3e01      	subs	r6, #1
 800928e:	e79b      	b.n	80091c8 <__multiply+0x84>
 8009290:	0801d288 	.word	0x0801d288
 8009294:	0801d299 	.word	0x0801d299

08009298 <__pow5mult>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	4615      	mov	r5, r2
 800929e:	f012 0203 	ands.w	r2, r2, #3
 80092a2:	4607      	mov	r7, r0
 80092a4:	460e      	mov	r6, r1
 80092a6:	d007      	beq.n	80092b8 <__pow5mult+0x20>
 80092a8:	4c25      	ldr	r4, [pc, #148]	@ (8009340 <__pow5mult+0xa8>)
 80092aa:	3a01      	subs	r2, #1
 80092ac:	2300      	movs	r3, #0
 80092ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80092b2:	f7ff fe9f 	bl	8008ff4 <__multadd>
 80092b6:	4606      	mov	r6, r0
 80092b8:	10ad      	asrs	r5, r5, #2
 80092ba:	d03d      	beq.n	8009338 <__pow5mult+0xa0>
 80092bc:	69fc      	ldr	r4, [r7, #28]
 80092be:	b97c      	cbnz	r4, 80092e0 <__pow5mult+0x48>
 80092c0:	2010      	movs	r0, #16
 80092c2:	f7ff fd7f 	bl	8008dc4 <malloc>
 80092c6:	4602      	mov	r2, r0
 80092c8:	61f8      	str	r0, [r7, #28]
 80092ca:	b928      	cbnz	r0, 80092d8 <__pow5mult+0x40>
 80092cc:	4b1d      	ldr	r3, [pc, #116]	@ (8009344 <__pow5mult+0xac>)
 80092ce:	481e      	ldr	r0, [pc, #120]	@ (8009348 <__pow5mult+0xb0>)
 80092d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80092d4:	f000 fbea 	bl	8009aac <__assert_func>
 80092d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80092dc:	6004      	str	r4, [r0, #0]
 80092de:	60c4      	str	r4, [r0, #12]
 80092e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80092e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80092e8:	b94c      	cbnz	r4, 80092fe <__pow5mult+0x66>
 80092ea:	f240 2171 	movw	r1, #625	@ 0x271
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7ff ff12 	bl	8009118 <__i2b>
 80092f4:	2300      	movs	r3, #0
 80092f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80092fa:	4604      	mov	r4, r0
 80092fc:	6003      	str	r3, [r0, #0]
 80092fe:	f04f 0900 	mov.w	r9, #0
 8009302:	07eb      	lsls	r3, r5, #31
 8009304:	d50a      	bpl.n	800931c <__pow5mult+0x84>
 8009306:	4631      	mov	r1, r6
 8009308:	4622      	mov	r2, r4
 800930a:	4638      	mov	r0, r7
 800930c:	f7ff ff1a 	bl	8009144 <__multiply>
 8009310:	4631      	mov	r1, r6
 8009312:	4680      	mov	r8, r0
 8009314:	4638      	mov	r0, r7
 8009316:	f7ff fe4b 	bl	8008fb0 <_Bfree>
 800931a:	4646      	mov	r6, r8
 800931c:	106d      	asrs	r5, r5, #1
 800931e:	d00b      	beq.n	8009338 <__pow5mult+0xa0>
 8009320:	6820      	ldr	r0, [r4, #0]
 8009322:	b938      	cbnz	r0, 8009334 <__pow5mult+0x9c>
 8009324:	4622      	mov	r2, r4
 8009326:	4621      	mov	r1, r4
 8009328:	4638      	mov	r0, r7
 800932a:	f7ff ff0b 	bl	8009144 <__multiply>
 800932e:	6020      	str	r0, [r4, #0]
 8009330:	f8c0 9000 	str.w	r9, [r0]
 8009334:	4604      	mov	r4, r0
 8009336:	e7e4      	b.n	8009302 <__pow5mult+0x6a>
 8009338:	4630      	mov	r0, r6
 800933a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800933e:	bf00      	nop
 8009340:	0801d2f4 	.word	0x0801d2f4
 8009344:	0801d219 	.word	0x0801d219
 8009348:	0801d299 	.word	0x0801d299

0800934c <__lshift>:
 800934c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009350:	460c      	mov	r4, r1
 8009352:	6849      	ldr	r1, [r1, #4]
 8009354:	6923      	ldr	r3, [r4, #16]
 8009356:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	4607      	mov	r7, r0
 800935e:	4691      	mov	r9, r2
 8009360:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009364:	f108 0601 	add.w	r6, r8, #1
 8009368:	42b3      	cmp	r3, r6
 800936a:	db0b      	blt.n	8009384 <__lshift+0x38>
 800936c:	4638      	mov	r0, r7
 800936e:	f7ff fddf 	bl	8008f30 <_Balloc>
 8009372:	4605      	mov	r5, r0
 8009374:	b948      	cbnz	r0, 800938a <__lshift+0x3e>
 8009376:	4602      	mov	r2, r0
 8009378:	4b28      	ldr	r3, [pc, #160]	@ (800941c <__lshift+0xd0>)
 800937a:	4829      	ldr	r0, [pc, #164]	@ (8009420 <__lshift+0xd4>)
 800937c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009380:	f000 fb94 	bl	8009aac <__assert_func>
 8009384:	3101      	adds	r1, #1
 8009386:	005b      	lsls	r3, r3, #1
 8009388:	e7ee      	b.n	8009368 <__lshift+0x1c>
 800938a:	2300      	movs	r3, #0
 800938c:	f100 0114 	add.w	r1, r0, #20
 8009390:	f100 0210 	add.w	r2, r0, #16
 8009394:	4618      	mov	r0, r3
 8009396:	4553      	cmp	r3, sl
 8009398:	db33      	blt.n	8009402 <__lshift+0xb6>
 800939a:	6920      	ldr	r0, [r4, #16]
 800939c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093a0:	f104 0314 	add.w	r3, r4, #20
 80093a4:	f019 091f 	ands.w	r9, r9, #31
 80093a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093b0:	d02b      	beq.n	800940a <__lshift+0xbe>
 80093b2:	f1c9 0e20 	rsb	lr, r9, #32
 80093b6:	468a      	mov	sl, r1
 80093b8:	2200      	movs	r2, #0
 80093ba:	6818      	ldr	r0, [r3, #0]
 80093bc:	fa00 f009 	lsl.w	r0, r0, r9
 80093c0:	4310      	orrs	r0, r2
 80093c2:	f84a 0b04 	str.w	r0, [sl], #4
 80093c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80093ca:	459c      	cmp	ip, r3
 80093cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80093d0:	d8f3      	bhi.n	80093ba <__lshift+0x6e>
 80093d2:	ebac 0304 	sub.w	r3, ip, r4
 80093d6:	3b15      	subs	r3, #21
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	3304      	adds	r3, #4
 80093de:	f104 0015 	add.w	r0, r4, #21
 80093e2:	4584      	cmp	ip, r0
 80093e4:	bf38      	it	cc
 80093e6:	2304      	movcc	r3, #4
 80093e8:	50ca      	str	r2, [r1, r3]
 80093ea:	b10a      	cbz	r2, 80093f0 <__lshift+0xa4>
 80093ec:	f108 0602 	add.w	r6, r8, #2
 80093f0:	3e01      	subs	r6, #1
 80093f2:	4638      	mov	r0, r7
 80093f4:	612e      	str	r6, [r5, #16]
 80093f6:	4621      	mov	r1, r4
 80093f8:	f7ff fdda 	bl	8008fb0 <_Bfree>
 80093fc:	4628      	mov	r0, r5
 80093fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009402:	f842 0f04 	str.w	r0, [r2, #4]!
 8009406:	3301      	adds	r3, #1
 8009408:	e7c5      	b.n	8009396 <__lshift+0x4a>
 800940a:	3904      	subs	r1, #4
 800940c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009410:	f841 2f04 	str.w	r2, [r1, #4]!
 8009414:	459c      	cmp	ip, r3
 8009416:	d8f9      	bhi.n	800940c <__lshift+0xc0>
 8009418:	e7ea      	b.n	80093f0 <__lshift+0xa4>
 800941a:	bf00      	nop
 800941c:	0801d288 	.word	0x0801d288
 8009420:	0801d299 	.word	0x0801d299

08009424 <__mcmp>:
 8009424:	690a      	ldr	r2, [r1, #16]
 8009426:	4603      	mov	r3, r0
 8009428:	6900      	ldr	r0, [r0, #16]
 800942a:	1a80      	subs	r0, r0, r2
 800942c:	b530      	push	{r4, r5, lr}
 800942e:	d10e      	bne.n	800944e <__mcmp+0x2a>
 8009430:	3314      	adds	r3, #20
 8009432:	3114      	adds	r1, #20
 8009434:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009438:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800943c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009440:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009444:	4295      	cmp	r5, r2
 8009446:	d003      	beq.n	8009450 <__mcmp+0x2c>
 8009448:	d205      	bcs.n	8009456 <__mcmp+0x32>
 800944a:	f04f 30ff 	mov.w	r0, #4294967295
 800944e:	bd30      	pop	{r4, r5, pc}
 8009450:	42a3      	cmp	r3, r4
 8009452:	d3f3      	bcc.n	800943c <__mcmp+0x18>
 8009454:	e7fb      	b.n	800944e <__mcmp+0x2a>
 8009456:	2001      	movs	r0, #1
 8009458:	e7f9      	b.n	800944e <__mcmp+0x2a>
	...

0800945c <__mdiff>:
 800945c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	4689      	mov	r9, r1
 8009462:	4606      	mov	r6, r0
 8009464:	4611      	mov	r1, r2
 8009466:	4648      	mov	r0, r9
 8009468:	4614      	mov	r4, r2
 800946a:	f7ff ffdb 	bl	8009424 <__mcmp>
 800946e:	1e05      	subs	r5, r0, #0
 8009470:	d112      	bne.n	8009498 <__mdiff+0x3c>
 8009472:	4629      	mov	r1, r5
 8009474:	4630      	mov	r0, r6
 8009476:	f7ff fd5b 	bl	8008f30 <_Balloc>
 800947a:	4602      	mov	r2, r0
 800947c:	b928      	cbnz	r0, 800948a <__mdiff+0x2e>
 800947e:	4b3f      	ldr	r3, [pc, #252]	@ (800957c <__mdiff+0x120>)
 8009480:	f240 2137 	movw	r1, #567	@ 0x237
 8009484:	483e      	ldr	r0, [pc, #248]	@ (8009580 <__mdiff+0x124>)
 8009486:	f000 fb11 	bl	8009aac <__assert_func>
 800948a:	2301      	movs	r3, #1
 800948c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009490:	4610      	mov	r0, r2
 8009492:	b003      	add	sp, #12
 8009494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009498:	bfbc      	itt	lt
 800949a:	464b      	movlt	r3, r9
 800949c:	46a1      	movlt	r9, r4
 800949e:	4630      	mov	r0, r6
 80094a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80094a4:	bfba      	itte	lt
 80094a6:	461c      	movlt	r4, r3
 80094a8:	2501      	movlt	r5, #1
 80094aa:	2500      	movge	r5, #0
 80094ac:	f7ff fd40 	bl	8008f30 <_Balloc>
 80094b0:	4602      	mov	r2, r0
 80094b2:	b918      	cbnz	r0, 80094bc <__mdiff+0x60>
 80094b4:	4b31      	ldr	r3, [pc, #196]	@ (800957c <__mdiff+0x120>)
 80094b6:	f240 2145 	movw	r1, #581	@ 0x245
 80094ba:	e7e3      	b.n	8009484 <__mdiff+0x28>
 80094bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80094c0:	6926      	ldr	r6, [r4, #16]
 80094c2:	60c5      	str	r5, [r0, #12]
 80094c4:	f109 0310 	add.w	r3, r9, #16
 80094c8:	f109 0514 	add.w	r5, r9, #20
 80094cc:	f104 0e14 	add.w	lr, r4, #20
 80094d0:	f100 0b14 	add.w	fp, r0, #20
 80094d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80094d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80094dc:	9301      	str	r3, [sp, #4]
 80094de:	46d9      	mov	r9, fp
 80094e0:	f04f 0c00 	mov.w	ip, #0
 80094e4:	9b01      	ldr	r3, [sp, #4]
 80094e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80094ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80094ee:	9301      	str	r3, [sp, #4]
 80094f0:	fa1f f38a 	uxth.w	r3, sl
 80094f4:	4619      	mov	r1, r3
 80094f6:	b283      	uxth	r3, r0
 80094f8:	1acb      	subs	r3, r1, r3
 80094fa:	0c00      	lsrs	r0, r0, #16
 80094fc:	4463      	add	r3, ip
 80094fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009502:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009506:	b29b      	uxth	r3, r3
 8009508:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800950c:	4576      	cmp	r6, lr
 800950e:	f849 3b04 	str.w	r3, [r9], #4
 8009512:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009516:	d8e5      	bhi.n	80094e4 <__mdiff+0x88>
 8009518:	1b33      	subs	r3, r6, r4
 800951a:	3b15      	subs	r3, #21
 800951c:	f023 0303 	bic.w	r3, r3, #3
 8009520:	3415      	adds	r4, #21
 8009522:	3304      	adds	r3, #4
 8009524:	42a6      	cmp	r6, r4
 8009526:	bf38      	it	cc
 8009528:	2304      	movcc	r3, #4
 800952a:	441d      	add	r5, r3
 800952c:	445b      	add	r3, fp
 800952e:	461e      	mov	r6, r3
 8009530:	462c      	mov	r4, r5
 8009532:	4544      	cmp	r4, r8
 8009534:	d30e      	bcc.n	8009554 <__mdiff+0xf8>
 8009536:	f108 0103 	add.w	r1, r8, #3
 800953a:	1b49      	subs	r1, r1, r5
 800953c:	f021 0103 	bic.w	r1, r1, #3
 8009540:	3d03      	subs	r5, #3
 8009542:	45a8      	cmp	r8, r5
 8009544:	bf38      	it	cc
 8009546:	2100      	movcc	r1, #0
 8009548:	440b      	add	r3, r1
 800954a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800954e:	b191      	cbz	r1, 8009576 <__mdiff+0x11a>
 8009550:	6117      	str	r7, [r2, #16]
 8009552:	e79d      	b.n	8009490 <__mdiff+0x34>
 8009554:	f854 1b04 	ldr.w	r1, [r4], #4
 8009558:	46e6      	mov	lr, ip
 800955a:	0c08      	lsrs	r0, r1, #16
 800955c:	fa1c fc81 	uxtah	ip, ip, r1
 8009560:	4471      	add	r1, lr
 8009562:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009566:	b289      	uxth	r1, r1
 8009568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800956c:	f846 1b04 	str.w	r1, [r6], #4
 8009570:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009574:	e7dd      	b.n	8009532 <__mdiff+0xd6>
 8009576:	3f01      	subs	r7, #1
 8009578:	e7e7      	b.n	800954a <__mdiff+0xee>
 800957a:	bf00      	nop
 800957c:	0801d288 	.word	0x0801d288
 8009580:	0801d299 	.word	0x0801d299

08009584 <__d2b>:
 8009584:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009588:	460f      	mov	r7, r1
 800958a:	2101      	movs	r1, #1
 800958c:	ec59 8b10 	vmov	r8, r9, d0
 8009590:	4616      	mov	r6, r2
 8009592:	f7ff fccd 	bl	8008f30 <_Balloc>
 8009596:	4604      	mov	r4, r0
 8009598:	b930      	cbnz	r0, 80095a8 <__d2b+0x24>
 800959a:	4602      	mov	r2, r0
 800959c:	4b23      	ldr	r3, [pc, #140]	@ (800962c <__d2b+0xa8>)
 800959e:	4824      	ldr	r0, [pc, #144]	@ (8009630 <__d2b+0xac>)
 80095a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80095a4:	f000 fa82 	bl	8009aac <__assert_func>
 80095a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80095ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80095b0:	b10d      	cbz	r5, 80095b6 <__d2b+0x32>
 80095b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	f1b8 0300 	subs.w	r3, r8, #0
 80095bc:	d023      	beq.n	8009606 <__d2b+0x82>
 80095be:	4668      	mov	r0, sp
 80095c0:	9300      	str	r3, [sp, #0]
 80095c2:	f7ff fd7c 	bl	80090be <__lo0bits>
 80095c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80095ca:	b1d0      	cbz	r0, 8009602 <__d2b+0x7e>
 80095cc:	f1c0 0320 	rsb	r3, r0, #32
 80095d0:	fa02 f303 	lsl.w	r3, r2, r3
 80095d4:	430b      	orrs	r3, r1
 80095d6:	40c2      	lsrs	r2, r0
 80095d8:	6163      	str	r3, [r4, #20]
 80095da:	9201      	str	r2, [sp, #4]
 80095dc:	9b01      	ldr	r3, [sp, #4]
 80095de:	61a3      	str	r3, [r4, #24]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	bf0c      	ite	eq
 80095e4:	2201      	moveq	r2, #1
 80095e6:	2202      	movne	r2, #2
 80095e8:	6122      	str	r2, [r4, #16]
 80095ea:	b1a5      	cbz	r5, 8009616 <__d2b+0x92>
 80095ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80095f0:	4405      	add	r5, r0
 80095f2:	603d      	str	r5, [r7, #0]
 80095f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	4620      	mov	r0, r4
 80095fc:	b003      	add	sp, #12
 80095fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009602:	6161      	str	r1, [r4, #20]
 8009604:	e7ea      	b.n	80095dc <__d2b+0x58>
 8009606:	a801      	add	r0, sp, #4
 8009608:	f7ff fd59 	bl	80090be <__lo0bits>
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	6163      	str	r3, [r4, #20]
 8009610:	3020      	adds	r0, #32
 8009612:	2201      	movs	r2, #1
 8009614:	e7e8      	b.n	80095e8 <__d2b+0x64>
 8009616:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800961a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800961e:	6038      	str	r0, [r7, #0]
 8009620:	6918      	ldr	r0, [r3, #16]
 8009622:	f7ff fd2d 	bl	8009080 <__hi0bits>
 8009626:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800962a:	e7e5      	b.n	80095f8 <__d2b+0x74>
 800962c:	0801d288 	.word	0x0801d288
 8009630:	0801d299 	.word	0x0801d299

08009634 <__ssputs_r>:
 8009634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009638:	688e      	ldr	r6, [r1, #8]
 800963a:	461f      	mov	r7, r3
 800963c:	42be      	cmp	r6, r7
 800963e:	680b      	ldr	r3, [r1, #0]
 8009640:	4682      	mov	sl, r0
 8009642:	460c      	mov	r4, r1
 8009644:	4690      	mov	r8, r2
 8009646:	d82d      	bhi.n	80096a4 <__ssputs_r+0x70>
 8009648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800964c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009650:	d026      	beq.n	80096a0 <__ssputs_r+0x6c>
 8009652:	6965      	ldr	r5, [r4, #20]
 8009654:	6909      	ldr	r1, [r1, #16]
 8009656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800965a:	eba3 0901 	sub.w	r9, r3, r1
 800965e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009662:	1c7b      	adds	r3, r7, #1
 8009664:	444b      	add	r3, r9
 8009666:	106d      	asrs	r5, r5, #1
 8009668:	429d      	cmp	r5, r3
 800966a:	bf38      	it	cc
 800966c:	461d      	movcc	r5, r3
 800966e:	0553      	lsls	r3, r2, #21
 8009670:	d527      	bpl.n	80096c2 <__ssputs_r+0x8e>
 8009672:	4629      	mov	r1, r5
 8009674:	f7ff fbd0 	bl	8008e18 <_malloc_r>
 8009678:	4606      	mov	r6, r0
 800967a:	b360      	cbz	r0, 80096d6 <__ssputs_r+0xa2>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	464a      	mov	r2, r9
 8009680:	f000 fa06 	bl	8009a90 <memcpy>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800968a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	6126      	str	r6, [r4, #16]
 8009692:	6165      	str	r5, [r4, #20]
 8009694:	444e      	add	r6, r9
 8009696:	eba5 0509 	sub.w	r5, r5, r9
 800969a:	6026      	str	r6, [r4, #0]
 800969c:	60a5      	str	r5, [r4, #8]
 800969e:	463e      	mov	r6, r7
 80096a0:	42be      	cmp	r6, r7
 80096a2:	d900      	bls.n	80096a6 <__ssputs_r+0x72>
 80096a4:	463e      	mov	r6, r7
 80096a6:	6820      	ldr	r0, [r4, #0]
 80096a8:	4632      	mov	r2, r6
 80096aa:	4641      	mov	r1, r8
 80096ac:	f000 f9c6 	bl	8009a3c <memmove>
 80096b0:	68a3      	ldr	r3, [r4, #8]
 80096b2:	1b9b      	subs	r3, r3, r6
 80096b4:	60a3      	str	r3, [r4, #8]
 80096b6:	6823      	ldr	r3, [r4, #0]
 80096b8:	4433      	add	r3, r6
 80096ba:	6023      	str	r3, [r4, #0]
 80096bc:	2000      	movs	r0, #0
 80096be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096c2:	462a      	mov	r2, r5
 80096c4:	f000 fa36 	bl	8009b34 <_realloc_r>
 80096c8:	4606      	mov	r6, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d1e0      	bne.n	8009690 <__ssputs_r+0x5c>
 80096ce:	6921      	ldr	r1, [r4, #16]
 80096d0:	4650      	mov	r0, sl
 80096d2:	f7ff fb2d 	bl	8008d30 <_free_r>
 80096d6:	230c      	movs	r3, #12
 80096d8:	f8ca 3000 	str.w	r3, [sl]
 80096dc:	89a3      	ldrh	r3, [r4, #12]
 80096de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096e2:	81a3      	strh	r3, [r4, #12]
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295
 80096e8:	e7e9      	b.n	80096be <__ssputs_r+0x8a>
	...

080096ec <_svfiprintf_r>:
 80096ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f0:	4698      	mov	r8, r3
 80096f2:	898b      	ldrh	r3, [r1, #12]
 80096f4:	061b      	lsls	r3, r3, #24
 80096f6:	b09d      	sub	sp, #116	@ 0x74
 80096f8:	4607      	mov	r7, r0
 80096fa:	460d      	mov	r5, r1
 80096fc:	4614      	mov	r4, r2
 80096fe:	d510      	bpl.n	8009722 <_svfiprintf_r+0x36>
 8009700:	690b      	ldr	r3, [r1, #16]
 8009702:	b973      	cbnz	r3, 8009722 <_svfiprintf_r+0x36>
 8009704:	2140      	movs	r1, #64	@ 0x40
 8009706:	f7ff fb87 	bl	8008e18 <_malloc_r>
 800970a:	6028      	str	r0, [r5, #0]
 800970c:	6128      	str	r0, [r5, #16]
 800970e:	b930      	cbnz	r0, 800971e <_svfiprintf_r+0x32>
 8009710:	230c      	movs	r3, #12
 8009712:	603b      	str	r3, [r7, #0]
 8009714:	f04f 30ff 	mov.w	r0, #4294967295
 8009718:	b01d      	add	sp, #116	@ 0x74
 800971a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971e:	2340      	movs	r3, #64	@ 0x40
 8009720:	616b      	str	r3, [r5, #20]
 8009722:	2300      	movs	r3, #0
 8009724:	9309      	str	r3, [sp, #36]	@ 0x24
 8009726:	2320      	movs	r3, #32
 8009728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800972c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009730:	2330      	movs	r3, #48	@ 0x30
 8009732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80098d0 <_svfiprintf_r+0x1e4>
 8009736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800973a:	f04f 0901 	mov.w	r9, #1
 800973e:	4623      	mov	r3, r4
 8009740:	469a      	mov	sl, r3
 8009742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009746:	b10a      	cbz	r2, 800974c <_svfiprintf_r+0x60>
 8009748:	2a25      	cmp	r2, #37	@ 0x25
 800974a:	d1f9      	bne.n	8009740 <_svfiprintf_r+0x54>
 800974c:	ebba 0b04 	subs.w	fp, sl, r4
 8009750:	d00b      	beq.n	800976a <_svfiprintf_r+0x7e>
 8009752:	465b      	mov	r3, fp
 8009754:	4622      	mov	r2, r4
 8009756:	4629      	mov	r1, r5
 8009758:	4638      	mov	r0, r7
 800975a:	f7ff ff6b 	bl	8009634 <__ssputs_r>
 800975e:	3001      	adds	r0, #1
 8009760:	f000 80a7 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009766:	445a      	add	r2, fp
 8009768:	9209      	str	r2, [sp, #36]	@ 0x24
 800976a:	f89a 3000 	ldrb.w	r3, [sl]
 800976e:	2b00      	cmp	r3, #0
 8009770:	f000 809f 	beq.w	80098b2 <_svfiprintf_r+0x1c6>
 8009774:	2300      	movs	r3, #0
 8009776:	f04f 32ff 	mov.w	r2, #4294967295
 800977a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800977e:	f10a 0a01 	add.w	sl, sl, #1
 8009782:	9304      	str	r3, [sp, #16]
 8009784:	9307      	str	r3, [sp, #28]
 8009786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800978a:	931a      	str	r3, [sp, #104]	@ 0x68
 800978c:	4654      	mov	r4, sl
 800978e:	2205      	movs	r2, #5
 8009790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009794:	484e      	ldr	r0, [pc, #312]	@ (80098d0 <_svfiprintf_r+0x1e4>)
 8009796:	f7f6 fd1b 	bl	80001d0 <memchr>
 800979a:	9a04      	ldr	r2, [sp, #16]
 800979c:	b9d8      	cbnz	r0, 80097d6 <_svfiprintf_r+0xea>
 800979e:	06d0      	lsls	r0, r2, #27
 80097a0:	bf44      	itt	mi
 80097a2:	2320      	movmi	r3, #32
 80097a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097a8:	0711      	lsls	r1, r2, #28
 80097aa:	bf44      	itt	mi
 80097ac:	232b      	movmi	r3, #43	@ 0x2b
 80097ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80097b2:	f89a 3000 	ldrb.w	r3, [sl]
 80097b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80097b8:	d015      	beq.n	80097e6 <_svfiprintf_r+0xfa>
 80097ba:	9a07      	ldr	r2, [sp, #28]
 80097bc:	4654      	mov	r4, sl
 80097be:	2000      	movs	r0, #0
 80097c0:	f04f 0c0a 	mov.w	ip, #10
 80097c4:	4621      	mov	r1, r4
 80097c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ca:	3b30      	subs	r3, #48	@ 0x30
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	d94b      	bls.n	8009868 <_svfiprintf_r+0x17c>
 80097d0:	b1b0      	cbz	r0, 8009800 <_svfiprintf_r+0x114>
 80097d2:	9207      	str	r2, [sp, #28]
 80097d4:	e014      	b.n	8009800 <_svfiprintf_r+0x114>
 80097d6:	eba0 0308 	sub.w	r3, r0, r8
 80097da:	fa09 f303 	lsl.w	r3, r9, r3
 80097de:	4313      	orrs	r3, r2
 80097e0:	9304      	str	r3, [sp, #16]
 80097e2:	46a2      	mov	sl, r4
 80097e4:	e7d2      	b.n	800978c <_svfiprintf_r+0xa0>
 80097e6:	9b03      	ldr	r3, [sp, #12]
 80097e8:	1d19      	adds	r1, r3, #4
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	9103      	str	r1, [sp, #12]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	bfbb      	ittet	lt
 80097f2:	425b      	neglt	r3, r3
 80097f4:	f042 0202 	orrlt.w	r2, r2, #2
 80097f8:	9307      	strge	r3, [sp, #28]
 80097fa:	9307      	strlt	r3, [sp, #28]
 80097fc:	bfb8      	it	lt
 80097fe:	9204      	strlt	r2, [sp, #16]
 8009800:	7823      	ldrb	r3, [r4, #0]
 8009802:	2b2e      	cmp	r3, #46	@ 0x2e
 8009804:	d10a      	bne.n	800981c <_svfiprintf_r+0x130>
 8009806:	7863      	ldrb	r3, [r4, #1]
 8009808:	2b2a      	cmp	r3, #42	@ 0x2a
 800980a:	d132      	bne.n	8009872 <_svfiprintf_r+0x186>
 800980c:	9b03      	ldr	r3, [sp, #12]
 800980e:	1d1a      	adds	r2, r3, #4
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	9203      	str	r2, [sp, #12]
 8009814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009818:	3402      	adds	r4, #2
 800981a:	9305      	str	r3, [sp, #20]
 800981c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80098e0 <_svfiprintf_r+0x1f4>
 8009820:	7821      	ldrb	r1, [r4, #0]
 8009822:	2203      	movs	r2, #3
 8009824:	4650      	mov	r0, sl
 8009826:	f7f6 fcd3 	bl	80001d0 <memchr>
 800982a:	b138      	cbz	r0, 800983c <_svfiprintf_r+0x150>
 800982c:	9b04      	ldr	r3, [sp, #16]
 800982e:	eba0 000a 	sub.w	r0, r0, sl
 8009832:	2240      	movs	r2, #64	@ 0x40
 8009834:	4082      	lsls	r2, r0
 8009836:	4313      	orrs	r3, r2
 8009838:	3401      	adds	r4, #1
 800983a:	9304      	str	r3, [sp, #16]
 800983c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009840:	4824      	ldr	r0, [pc, #144]	@ (80098d4 <_svfiprintf_r+0x1e8>)
 8009842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009846:	2206      	movs	r2, #6
 8009848:	f7f6 fcc2 	bl	80001d0 <memchr>
 800984c:	2800      	cmp	r0, #0
 800984e:	d036      	beq.n	80098be <_svfiprintf_r+0x1d2>
 8009850:	4b21      	ldr	r3, [pc, #132]	@ (80098d8 <_svfiprintf_r+0x1ec>)
 8009852:	bb1b      	cbnz	r3, 800989c <_svfiprintf_r+0x1b0>
 8009854:	9b03      	ldr	r3, [sp, #12]
 8009856:	3307      	adds	r3, #7
 8009858:	f023 0307 	bic.w	r3, r3, #7
 800985c:	3308      	adds	r3, #8
 800985e:	9303      	str	r3, [sp, #12]
 8009860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009862:	4433      	add	r3, r6
 8009864:	9309      	str	r3, [sp, #36]	@ 0x24
 8009866:	e76a      	b.n	800973e <_svfiprintf_r+0x52>
 8009868:	fb0c 3202 	mla	r2, ip, r2, r3
 800986c:	460c      	mov	r4, r1
 800986e:	2001      	movs	r0, #1
 8009870:	e7a8      	b.n	80097c4 <_svfiprintf_r+0xd8>
 8009872:	2300      	movs	r3, #0
 8009874:	3401      	adds	r4, #1
 8009876:	9305      	str	r3, [sp, #20]
 8009878:	4619      	mov	r1, r3
 800987a:	f04f 0c0a 	mov.w	ip, #10
 800987e:	4620      	mov	r0, r4
 8009880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009884:	3a30      	subs	r2, #48	@ 0x30
 8009886:	2a09      	cmp	r2, #9
 8009888:	d903      	bls.n	8009892 <_svfiprintf_r+0x1a6>
 800988a:	2b00      	cmp	r3, #0
 800988c:	d0c6      	beq.n	800981c <_svfiprintf_r+0x130>
 800988e:	9105      	str	r1, [sp, #20]
 8009890:	e7c4      	b.n	800981c <_svfiprintf_r+0x130>
 8009892:	fb0c 2101 	mla	r1, ip, r1, r2
 8009896:	4604      	mov	r4, r0
 8009898:	2301      	movs	r3, #1
 800989a:	e7f0      	b.n	800987e <_svfiprintf_r+0x192>
 800989c:	ab03      	add	r3, sp, #12
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	462a      	mov	r2, r5
 80098a2:	4b0e      	ldr	r3, [pc, #56]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098a4:	a904      	add	r1, sp, #16
 80098a6:	4638      	mov	r0, r7
 80098a8:	f7fd fe98 	bl	80075dc <_printf_float>
 80098ac:	1c42      	adds	r2, r0, #1
 80098ae:	4606      	mov	r6, r0
 80098b0:	d1d6      	bne.n	8009860 <_svfiprintf_r+0x174>
 80098b2:	89ab      	ldrh	r3, [r5, #12]
 80098b4:	065b      	lsls	r3, r3, #25
 80098b6:	f53f af2d 	bmi.w	8009714 <_svfiprintf_r+0x28>
 80098ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80098bc:	e72c      	b.n	8009718 <_svfiprintf_r+0x2c>
 80098be:	ab03      	add	r3, sp, #12
 80098c0:	9300      	str	r3, [sp, #0]
 80098c2:	462a      	mov	r2, r5
 80098c4:	4b05      	ldr	r3, [pc, #20]	@ (80098dc <_svfiprintf_r+0x1f0>)
 80098c6:	a904      	add	r1, sp, #16
 80098c8:	4638      	mov	r0, r7
 80098ca:	f7fe f91f 	bl	8007b0c <_printf_i>
 80098ce:	e7ed      	b.n	80098ac <_svfiprintf_r+0x1c0>
 80098d0:	0801d3f0 	.word	0x0801d3f0
 80098d4:	0801d3fa 	.word	0x0801d3fa
 80098d8:	080075dd 	.word	0x080075dd
 80098dc:	08009635 	.word	0x08009635
 80098e0:	0801d3f6 	.word	0x0801d3f6

080098e4 <__sflush_r>:
 80098e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80098e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ec:	0716      	lsls	r6, r2, #28
 80098ee:	4605      	mov	r5, r0
 80098f0:	460c      	mov	r4, r1
 80098f2:	d454      	bmi.n	800999e <__sflush_r+0xba>
 80098f4:	684b      	ldr	r3, [r1, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	dc02      	bgt.n	8009900 <__sflush_r+0x1c>
 80098fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	dd48      	ble.n	8009992 <__sflush_r+0xae>
 8009900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009902:	2e00      	cmp	r6, #0
 8009904:	d045      	beq.n	8009992 <__sflush_r+0xae>
 8009906:	2300      	movs	r3, #0
 8009908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800990c:	682f      	ldr	r7, [r5, #0]
 800990e:	6a21      	ldr	r1, [r4, #32]
 8009910:	602b      	str	r3, [r5, #0]
 8009912:	d030      	beq.n	8009976 <__sflush_r+0x92>
 8009914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	0759      	lsls	r1, r3, #29
 800991a:	d505      	bpl.n	8009928 <__sflush_r+0x44>
 800991c:	6863      	ldr	r3, [r4, #4]
 800991e:	1ad2      	subs	r2, r2, r3
 8009920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009922:	b10b      	cbz	r3, 8009928 <__sflush_r+0x44>
 8009924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009926:	1ad2      	subs	r2, r2, r3
 8009928:	2300      	movs	r3, #0
 800992a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800992c:	6a21      	ldr	r1, [r4, #32]
 800992e:	4628      	mov	r0, r5
 8009930:	47b0      	blx	r6
 8009932:	1c43      	adds	r3, r0, #1
 8009934:	89a3      	ldrh	r3, [r4, #12]
 8009936:	d106      	bne.n	8009946 <__sflush_r+0x62>
 8009938:	6829      	ldr	r1, [r5, #0]
 800993a:	291d      	cmp	r1, #29
 800993c:	d82b      	bhi.n	8009996 <__sflush_r+0xb2>
 800993e:	4a2a      	ldr	r2, [pc, #168]	@ (80099e8 <__sflush_r+0x104>)
 8009940:	410a      	asrs	r2, r1
 8009942:	07d6      	lsls	r6, r2, #31
 8009944:	d427      	bmi.n	8009996 <__sflush_r+0xb2>
 8009946:	2200      	movs	r2, #0
 8009948:	6062      	str	r2, [r4, #4]
 800994a:	04d9      	lsls	r1, r3, #19
 800994c:	6922      	ldr	r2, [r4, #16]
 800994e:	6022      	str	r2, [r4, #0]
 8009950:	d504      	bpl.n	800995c <__sflush_r+0x78>
 8009952:	1c42      	adds	r2, r0, #1
 8009954:	d101      	bne.n	800995a <__sflush_r+0x76>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	b903      	cbnz	r3, 800995c <__sflush_r+0x78>
 800995a:	6560      	str	r0, [r4, #84]	@ 0x54
 800995c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800995e:	602f      	str	r7, [r5, #0]
 8009960:	b1b9      	cbz	r1, 8009992 <__sflush_r+0xae>
 8009962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009966:	4299      	cmp	r1, r3
 8009968:	d002      	beq.n	8009970 <__sflush_r+0x8c>
 800996a:	4628      	mov	r0, r5
 800996c:	f7ff f9e0 	bl	8008d30 <_free_r>
 8009970:	2300      	movs	r3, #0
 8009972:	6363      	str	r3, [r4, #52]	@ 0x34
 8009974:	e00d      	b.n	8009992 <__sflush_r+0xae>
 8009976:	2301      	movs	r3, #1
 8009978:	4628      	mov	r0, r5
 800997a:	47b0      	blx	r6
 800997c:	4602      	mov	r2, r0
 800997e:	1c50      	adds	r0, r2, #1
 8009980:	d1c9      	bne.n	8009916 <__sflush_r+0x32>
 8009982:	682b      	ldr	r3, [r5, #0]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c6      	beq.n	8009916 <__sflush_r+0x32>
 8009988:	2b1d      	cmp	r3, #29
 800998a:	d001      	beq.n	8009990 <__sflush_r+0xac>
 800998c:	2b16      	cmp	r3, #22
 800998e:	d11e      	bne.n	80099ce <__sflush_r+0xea>
 8009990:	602f      	str	r7, [r5, #0]
 8009992:	2000      	movs	r0, #0
 8009994:	e022      	b.n	80099dc <__sflush_r+0xf8>
 8009996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800999a:	b21b      	sxth	r3, r3
 800999c:	e01b      	b.n	80099d6 <__sflush_r+0xf2>
 800999e:	690f      	ldr	r7, [r1, #16]
 80099a0:	2f00      	cmp	r7, #0
 80099a2:	d0f6      	beq.n	8009992 <__sflush_r+0xae>
 80099a4:	0793      	lsls	r3, r2, #30
 80099a6:	680e      	ldr	r6, [r1, #0]
 80099a8:	bf08      	it	eq
 80099aa:	694b      	ldreq	r3, [r1, #20]
 80099ac:	600f      	str	r7, [r1, #0]
 80099ae:	bf18      	it	ne
 80099b0:	2300      	movne	r3, #0
 80099b2:	eba6 0807 	sub.w	r8, r6, r7
 80099b6:	608b      	str	r3, [r1, #8]
 80099b8:	f1b8 0f00 	cmp.w	r8, #0
 80099bc:	dde9      	ble.n	8009992 <__sflush_r+0xae>
 80099be:	6a21      	ldr	r1, [r4, #32]
 80099c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80099c2:	4643      	mov	r3, r8
 80099c4:	463a      	mov	r2, r7
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	2800      	cmp	r0, #0
 80099cc:	dc08      	bgt.n	80099e0 <__sflush_r+0xfc>
 80099ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e0:	4407      	add	r7, r0
 80099e2:	eba8 0800 	sub.w	r8, r8, r0
 80099e6:	e7e7      	b.n	80099b8 <__sflush_r+0xd4>
 80099e8:	dfbffffe 	.word	0xdfbffffe

080099ec <_fflush_r>:
 80099ec:	b538      	push	{r3, r4, r5, lr}
 80099ee:	690b      	ldr	r3, [r1, #16]
 80099f0:	4605      	mov	r5, r0
 80099f2:	460c      	mov	r4, r1
 80099f4:	b913      	cbnz	r3, 80099fc <_fflush_r+0x10>
 80099f6:	2500      	movs	r5, #0
 80099f8:	4628      	mov	r0, r5
 80099fa:	bd38      	pop	{r3, r4, r5, pc}
 80099fc:	b118      	cbz	r0, 8009a06 <_fflush_r+0x1a>
 80099fe:	6a03      	ldr	r3, [r0, #32]
 8009a00:	b90b      	cbnz	r3, 8009a06 <_fflush_r+0x1a>
 8009a02:	f7fe fa2f 	bl	8007e64 <__sinit>
 8009a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d0f3      	beq.n	80099f6 <_fflush_r+0xa>
 8009a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009a10:	07d0      	lsls	r0, r2, #31
 8009a12:	d404      	bmi.n	8009a1e <_fflush_r+0x32>
 8009a14:	0599      	lsls	r1, r3, #22
 8009a16:	d402      	bmi.n	8009a1e <_fflush_r+0x32>
 8009a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a1a:	f7fe fb3a 	bl	8008092 <__retarget_lock_acquire_recursive>
 8009a1e:	4628      	mov	r0, r5
 8009a20:	4621      	mov	r1, r4
 8009a22:	f7ff ff5f 	bl	80098e4 <__sflush_r>
 8009a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a28:	07da      	lsls	r2, r3, #31
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	d4e4      	bmi.n	80099f8 <_fflush_r+0xc>
 8009a2e:	89a3      	ldrh	r3, [r4, #12]
 8009a30:	059b      	lsls	r3, r3, #22
 8009a32:	d4e1      	bmi.n	80099f8 <_fflush_r+0xc>
 8009a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a36:	f7fe fb2d 	bl	8008094 <__retarget_lock_release_recursive>
 8009a3a:	e7dd      	b.n	80099f8 <_fflush_r+0xc>

08009a3c <memmove>:
 8009a3c:	4288      	cmp	r0, r1
 8009a3e:	b510      	push	{r4, lr}
 8009a40:	eb01 0402 	add.w	r4, r1, r2
 8009a44:	d902      	bls.n	8009a4c <memmove+0x10>
 8009a46:	4284      	cmp	r4, r0
 8009a48:	4623      	mov	r3, r4
 8009a4a:	d807      	bhi.n	8009a5c <memmove+0x20>
 8009a4c:	1e43      	subs	r3, r0, #1
 8009a4e:	42a1      	cmp	r1, r4
 8009a50:	d008      	beq.n	8009a64 <memmove+0x28>
 8009a52:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a56:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a5a:	e7f8      	b.n	8009a4e <memmove+0x12>
 8009a5c:	4402      	add	r2, r0
 8009a5e:	4601      	mov	r1, r0
 8009a60:	428a      	cmp	r2, r1
 8009a62:	d100      	bne.n	8009a66 <memmove+0x2a>
 8009a64:	bd10      	pop	{r4, pc}
 8009a66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a6e:	e7f7      	b.n	8009a60 <memmove+0x24>

08009a70 <_sbrk_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	@ (8009a8c <_sbrk_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f7 fe74 	bl	8001768 <_sbrk>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_sbrk_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_sbrk_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	20004494 	.word	0x20004494

08009a90 <memcpy>:
 8009a90:	440a      	add	r2, r1
 8009a92:	4291      	cmp	r1, r2
 8009a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8009a98:	d100      	bne.n	8009a9c <memcpy+0xc>
 8009a9a:	4770      	bx	lr
 8009a9c:	b510      	push	{r4, lr}
 8009a9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009aa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009aa6:	4291      	cmp	r1, r2
 8009aa8:	d1f9      	bne.n	8009a9e <memcpy+0xe>
 8009aaa:	bd10      	pop	{r4, pc}

08009aac <__assert_func>:
 8009aac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009aae:	4614      	mov	r4, r2
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	4b09      	ldr	r3, [pc, #36]	@ (8009ad8 <__assert_func+0x2c>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4605      	mov	r5, r0
 8009ab8:	68d8      	ldr	r0, [r3, #12]
 8009aba:	b954      	cbnz	r4, 8009ad2 <__assert_func+0x26>
 8009abc:	4b07      	ldr	r3, [pc, #28]	@ (8009adc <__assert_func+0x30>)
 8009abe:	461c      	mov	r4, r3
 8009ac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009ac4:	9100      	str	r1, [sp, #0]
 8009ac6:	462b      	mov	r3, r5
 8009ac8:	4905      	ldr	r1, [pc, #20]	@ (8009ae0 <__assert_func+0x34>)
 8009aca:	f000 f86f 	bl	8009bac <fiprintf>
 8009ace:	f000 f87f 	bl	8009bd0 <abort>
 8009ad2:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <__assert_func+0x38>)
 8009ad4:	e7f4      	b.n	8009ac0 <__assert_func+0x14>
 8009ad6:	bf00      	nop
 8009ad8:	20000018 	.word	0x20000018
 8009adc:	0801d446 	.word	0x0801d446
 8009ae0:	0801d418 	.word	0x0801d418
 8009ae4:	0801d40b 	.word	0x0801d40b

08009ae8 <_calloc_r>:
 8009ae8:	b570      	push	{r4, r5, r6, lr}
 8009aea:	fba1 5402 	umull	r5, r4, r1, r2
 8009aee:	b93c      	cbnz	r4, 8009b00 <_calloc_r+0x18>
 8009af0:	4629      	mov	r1, r5
 8009af2:	f7ff f991 	bl	8008e18 <_malloc_r>
 8009af6:	4606      	mov	r6, r0
 8009af8:	b928      	cbnz	r0, 8009b06 <_calloc_r+0x1e>
 8009afa:	2600      	movs	r6, #0
 8009afc:	4630      	mov	r0, r6
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	220c      	movs	r2, #12
 8009b02:	6002      	str	r2, [r0, #0]
 8009b04:	e7f9      	b.n	8009afa <_calloc_r+0x12>
 8009b06:	462a      	mov	r2, r5
 8009b08:	4621      	mov	r1, r4
 8009b0a:	f7fe fa44 	bl	8007f96 <memset>
 8009b0e:	e7f5      	b.n	8009afc <_calloc_r+0x14>

08009b10 <__ascii_mbtowc>:
 8009b10:	b082      	sub	sp, #8
 8009b12:	b901      	cbnz	r1, 8009b16 <__ascii_mbtowc+0x6>
 8009b14:	a901      	add	r1, sp, #4
 8009b16:	b142      	cbz	r2, 8009b2a <__ascii_mbtowc+0x1a>
 8009b18:	b14b      	cbz	r3, 8009b2e <__ascii_mbtowc+0x1e>
 8009b1a:	7813      	ldrb	r3, [r2, #0]
 8009b1c:	600b      	str	r3, [r1, #0]
 8009b1e:	7812      	ldrb	r2, [r2, #0]
 8009b20:	1e10      	subs	r0, r2, #0
 8009b22:	bf18      	it	ne
 8009b24:	2001      	movne	r0, #1
 8009b26:	b002      	add	sp, #8
 8009b28:	4770      	bx	lr
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	e7fb      	b.n	8009b26 <__ascii_mbtowc+0x16>
 8009b2e:	f06f 0001 	mvn.w	r0, #1
 8009b32:	e7f8      	b.n	8009b26 <__ascii_mbtowc+0x16>

08009b34 <_realloc_r>:
 8009b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b38:	4680      	mov	r8, r0
 8009b3a:	4615      	mov	r5, r2
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	b921      	cbnz	r1, 8009b4a <_realloc_r+0x16>
 8009b40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b44:	4611      	mov	r1, r2
 8009b46:	f7ff b967 	b.w	8008e18 <_malloc_r>
 8009b4a:	b92a      	cbnz	r2, 8009b58 <_realloc_r+0x24>
 8009b4c:	f7ff f8f0 	bl	8008d30 <_free_r>
 8009b50:	2400      	movs	r4, #0
 8009b52:	4620      	mov	r0, r4
 8009b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b58:	f000 f841 	bl	8009bde <_malloc_usable_size_r>
 8009b5c:	4285      	cmp	r5, r0
 8009b5e:	4606      	mov	r6, r0
 8009b60:	d802      	bhi.n	8009b68 <_realloc_r+0x34>
 8009b62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009b66:	d8f4      	bhi.n	8009b52 <_realloc_r+0x1e>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4640      	mov	r0, r8
 8009b6c:	f7ff f954 	bl	8008e18 <_malloc_r>
 8009b70:	4607      	mov	r7, r0
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d0ec      	beq.n	8009b50 <_realloc_r+0x1c>
 8009b76:	42b5      	cmp	r5, r6
 8009b78:	462a      	mov	r2, r5
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	bf28      	it	cs
 8009b7e:	4632      	movcs	r2, r6
 8009b80:	f7ff ff86 	bl	8009a90 <memcpy>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4640      	mov	r0, r8
 8009b88:	f7ff f8d2 	bl	8008d30 <_free_r>
 8009b8c:	463c      	mov	r4, r7
 8009b8e:	e7e0      	b.n	8009b52 <_realloc_r+0x1e>

08009b90 <__ascii_wctomb>:
 8009b90:	4603      	mov	r3, r0
 8009b92:	4608      	mov	r0, r1
 8009b94:	b141      	cbz	r1, 8009ba8 <__ascii_wctomb+0x18>
 8009b96:	2aff      	cmp	r2, #255	@ 0xff
 8009b98:	d904      	bls.n	8009ba4 <__ascii_wctomb+0x14>
 8009b9a:	228a      	movs	r2, #138	@ 0x8a
 8009b9c:	601a      	str	r2, [r3, #0]
 8009b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba2:	4770      	bx	lr
 8009ba4:	700a      	strb	r2, [r1, #0]
 8009ba6:	2001      	movs	r0, #1
 8009ba8:	4770      	bx	lr
	...

08009bac <fiprintf>:
 8009bac:	b40e      	push	{r1, r2, r3}
 8009bae:	b503      	push	{r0, r1, lr}
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	4805      	ldr	r0, [pc, #20]	@ (8009bcc <fiprintf+0x20>)
 8009bb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bba:	6800      	ldr	r0, [r0, #0]
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	f000 f83f 	bl	8009c40 <_vfiprintf_r>
 8009bc2:	b002      	add	sp, #8
 8009bc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bc8:	b003      	add	sp, #12
 8009bca:	4770      	bx	lr
 8009bcc:	20000018 	.word	0x20000018

08009bd0 <abort>:
 8009bd0:	b508      	push	{r3, lr}
 8009bd2:	2006      	movs	r0, #6
 8009bd4:	f000 fa08 	bl	8009fe8 <raise>
 8009bd8:	2001      	movs	r0, #1
 8009bda:	f7f7 fd4d 	bl	8001678 <_exit>

08009bde <_malloc_usable_size_r>:
 8009bde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009be2:	1f18      	subs	r0, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfbc      	itt	lt
 8009be8:	580b      	ldrlt	r3, [r1, r0]
 8009bea:	18c0      	addlt	r0, r0, r3
 8009bec:	4770      	bx	lr

08009bee <__sfputc_r>:
 8009bee:	6893      	ldr	r3, [r2, #8]
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	b410      	push	{r4}
 8009bf6:	6093      	str	r3, [r2, #8]
 8009bf8:	da08      	bge.n	8009c0c <__sfputc_r+0x1e>
 8009bfa:	6994      	ldr	r4, [r2, #24]
 8009bfc:	42a3      	cmp	r3, r4
 8009bfe:	db01      	blt.n	8009c04 <__sfputc_r+0x16>
 8009c00:	290a      	cmp	r1, #10
 8009c02:	d103      	bne.n	8009c0c <__sfputc_r+0x1e>
 8009c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c08:	f000 b932 	b.w	8009e70 <__swbuf_r>
 8009c0c:	6813      	ldr	r3, [r2, #0]
 8009c0e:	1c58      	adds	r0, r3, #1
 8009c10:	6010      	str	r0, [r2, #0]
 8009c12:	7019      	strb	r1, [r3, #0]
 8009c14:	4608      	mov	r0, r1
 8009c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c1a:	4770      	bx	lr

08009c1c <__sfputs_r>:
 8009c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c1e:	4606      	mov	r6, r0
 8009c20:	460f      	mov	r7, r1
 8009c22:	4614      	mov	r4, r2
 8009c24:	18d5      	adds	r5, r2, r3
 8009c26:	42ac      	cmp	r4, r5
 8009c28:	d101      	bne.n	8009c2e <__sfputs_r+0x12>
 8009c2a:	2000      	movs	r0, #0
 8009c2c:	e007      	b.n	8009c3e <__sfputs_r+0x22>
 8009c2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c32:	463a      	mov	r2, r7
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7ff ffda 	bl	8009bee <__sfputc_r>
 8009c3a:	1c43      	adds	r3, r0, #1
 8009c3c:	d1f3      	bne.n	8009c26 <__sfputs_r+0xa>
 8009c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009c40 <_vfiprintf_r>:
 8009c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c44:	460d      	mov	r5, r1
 8009c46:	b09d      	sub	sp, #116	@ 0x74
 8009c48:	4614      	mov	r4, r2
 8009c4a:	4698      	mov	r8, r3
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	b118      	cbz	r0, 8009c58 <_vfiprintf_r+0x18>
 8009c50:	6a03      	ldr	r3, [r0, #32]
 8009c52:	b90b      	cbnz	r3, 8009c58 <_vfiprintf_r+0x18>
 8009c54:	f7fe f906 	bl	8007e64 <__sinit>
 8009c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c5a:	07d9      	lsls	r1, r3, #31
 8009c5c:	d405      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c5e:	89ab      	ldrh	r3, [r5, #12]
 8009c60:	059a      	lsls	r2, r3, #22
 8009c62:	d402      	bmi.n	8009c6a <_vfiprintf_r+0x2a>
 8009c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c66:	f7fe fa14 	bl	8008092 <__retarget_lock_acquire_recursive>
 8009c6a:	89ab      	ldrh	r3, [r5, #12]
 8009c6c:	071b      	lsls	r3, r3, #28
 8009c6e:	d501      	bpl.n	8009c74 <_vfiprintf_r+0x34>
 8009c70:	692b      	ldr	r3, [r5, #16]
 8009c72:	b99b      	cbnz	r3, 8009c9c <_vfiprintf_r+0x5c>
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f938 	bl	8009eec <__swsetup_r>
 8009c7c:	b170      	cbz	r0, 8009c9c <_vfiprintf_r+0x5c>
 8009c7e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c80:	07dc      	lsls	r4, r3, #31
 8009c82:	d504      	bpl.n	8009c8e <_vfiprintf_r+0x4e>
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	b01d      	add	sp, #116	@ 0x74
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	89ab      	ldrh	r3, [r5, #12]
 8009c90:	0598      	lsls	r0, r3, #22
 8009c92:	d4f7      	bmi.n	8009c84 <_vfiprintf_r+0x44>
 8009c94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c96:	f7fe f9fd 	bl	8008094 <__retarget_lock_release_recursive>
 8009c9a:	e7f3      	b.n	8009c84 <_vfiprintf_r+0x44>
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009caa:	2330      	movs	r3, #48	@ 0x30
 8009cac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e5c <_vfiprintf_r+0x21c>
 8009cb0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cb4:	f04f 0901 	mov.w	r9, #1
 8009cb8:	4623      	mov	r3, r4
 8009cba:	469a      	mov	sl, r3
 8009cbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cc0:	b10a      	cbz	r2, 8009cc6 <_vfiprintf_r+0x86>
 8009cc2:	2a25      	cmp	r2, #37	@ 0x25
 8009cc4:	d1f9      	bne.n	8009cba <_vfiprintf_r+0x7a>
 8009cc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009cca:	d00b      	beq.n	8009ce4 <_vfiprintf_r+0xa4>
 8009ccc:	465b      	mov	r3, fp
 8009cce:	4622      	mov	r2, r4
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4630      	mov	r0, r6
 8009cd4:	f7ff ffa2 	bl	8009c1c <__sfputs_r>
 8009cd8:	3001      	adds	r0, #1
 8009cda:	f000 80a7 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ce0:	445a      	add	r2, fp
 8009ce2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ce4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 809f 	beq.w	8009e2c <_vfiprintf_r+0x1ec>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8009cf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cf8:	f10a 0a01 	add.w	sl, sl, #1
 8009cfc:	9304      	str	r3, [sp, #16]
 8009cfe:	9307      	str	r3, [sp, #28]
 8009d00:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d04:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d06:	4654      	mov	r4, sl
 8009d08:	2205      	movs	r2, #5
 8009d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d0e:	4853      	ldr	r0, [pc, #332]	@ (8009e5c <_vfiprintf_r+0x21c>)
 8009d10:	f7f6 fa5e 	bl	80001d0 <memchr>
 8009d14:	9a04      	ldr	r2, [sp, #16]
 8009d16:	b9d8      	cbnz	r0, 8009d50 <_vfiprintf_r+0x110>
 8009d18:	06d1      	lsls	r1, r2, #27
 8009d1a:	bf44      	itt	mi
 8009d1c:	2320      	movmi	r3, #32
 8009d1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d22:	0713      	lsls	r3, r2, #28
 8009d24:	bf44      	itt	mi
 8009d26:	232b      	movmi	r3, #43	@ 0x2b
 8009d28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d32:	d015      	beq.n	8009d60 <_vfiprintf_r+0x120>
 8009d34:	9a07      	ldr	r2, [sp, #28]
 8009d36:	4654      	mov	r4, sl
 8009d38:	2000      	movs	r0, #0
 8009d3a:	f04f 0c0a 	mov.w	ip, #10
 8009d3e:	4621      	mov	r1, r4
 8009d40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d44:	3b30      	subs	r3, #48	@ 0x30
 8009d46:	2b09      	cmp	r3, #9
 8009d48:	d94b      	bls.n	8009de2 <_vfiprintf_r+0x1a2>
 8009d4a:	b1b0      	cbz	r0, 8009d7a <_vfiprintf_r+0x13a>
 8009d4c:	9207      	str	r2, [sp, #28]
 8009d4e:	e014      	b.n	8009d7a <_vfiprintf_r+0x13a>
 8009d50:	eba0 0308 	sub.w	r3, r0, r8
 8009d54:	fa09 f303 	lsl.w	r3, r9, r3
 8009d58:	4313      	orrs	r3, r2
 8009d5a:	9304      	str	r3, [sp, #16]
 8009d5c:	46a2      	mov	sl, r4
 8009d5e:	e7d2      	b.n	8009d06 <_vfiprintf_r+0xc6>
 8009d60:	9b03      	ldr	r3, [sp, #12]
 8009d62:	1d19      	adds	r1, r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	9103      	str	r1, [sp, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	bfbb      	ittet	lt
 8009d6c:	425b      	neglt	r3, r3
 8009d6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009d72:	9307      	strge	r3, [sp, #28]
 8009d74:	9307      	strlt	r3, [sp, #28]
 8009d76:	bfb8      	it	lt
 8009d78:	9204      	strlt	r2, [sp, #16]
 8009d7a:	7823      	ldrb	r3, [r4, #0]
 8009d7c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d7e:	d10a      	bne.n	8009d96 <_vfiprintf_r+0x156>
 8009d80:	7863      	ldrb	r3, [r4, #1]
 8009d82:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d84:	d132      	bne.n	8009dec <_vfiprintf_r+0x1ac>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d1a      	adds	r2, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9203      	str	r2, [sp, #12]
 8009d8e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d92:	3402      	adds	r4, #2
 8009d94:	9305      	str	r3, [sp, #20]
 8009d96:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e6c <_vfiprintf_r+0x22c>
 8009d9a:	7821      	ldrb	r1, [r4, #0]
 8009d9c:	2203      	movs	r2, #3
 8009d9e:	4650      	mov	r0, sl
 8009da0:	f7f6 fa16 	bl	80001d0 <memchr>
 8009da4:	b138      	cbz	r0, 8009db6 <_vfiprintf_r+0x176>
 8009da6:	9b04      	ldr	r3, [sp, #16]
 8009da8:	eba0 000a 	sub.w	r0, r0, sl
 8009dac:	2240      	movs	r2, #64	@ 0x40
 8009dae:	4082      	lsls	r2, r0
 8009db0:	4313      	orrs	r3, r2
 8009db2:	3401      	adds	r4, #1
 8009db4:	9304      	str	r3, [sp, #16]
 8009db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dba:	4829      	ldr	r0, [pc, #164]	@ (8009e60 <_vfiprintf_r+0x220>)
 8009dbc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dc0:	2206      	movs	r2, #6
 8009dc2:	f7f6 fa05 	bl	80001d0 <memchr>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d03f      	beq.n	8009e4a <_vfiprintf_r+0x20a>
 8009dca:	4b26      	ldr	r3, [pc, #152]	@ (8009e64 <_vfiprintf_r+0x224>)
 8009dcc:	bb1b      	cbnz	r3, 8009e16 <_vfiprintf_r+0x1d6>
 8009dce:	9b03      	ldr	r3, [sp, #12]
 8009dd0:	3307      	adds	r3, #7
 8009dd2:	f023 0307 	bic.w	r3, r3, #7
 8009dd6:	3308      	adds	r3, #8
 8009dd8:	9303      	str	r3, [sp, #12]
 8009dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ddc:	443b      	add	r3, r7
 8009dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8009de0:	e76a      	b.n	8009cb8 <_vfiprintf_r+0x78>
 8009de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009de6:	460c      	mov	r4, r1
 8009de8:	2001      	movs	r0, #1
 8009dea:	e7a8      	b.n	8009d3e <_vfiprintf_r+0xfe>
 8009dec:	2300      	movs	r3, #0
 8009dee:	3401      	adds	r4, #1
 8009df0:	9305      	str	r3, [sp, #20]
 8009df2:	4619      	mov	r1, r3
 8009df4:	f04f 0c0a 	mov.w	ip, #10
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dfe:	3a30      	subs	r2, #48	@ 0x30
 8009e00:	2a09      	cmp	r2, #9
 8009e02:	d903      	bls.n	8009e0c <_vfiprintf_r+0x1cc>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d0c6      	beq.n	8009d96 <_vfiprintf_r+0x156>
 8009e08:	9105      	str	r1, [sp, #20]
 8009e0a:	e7c4      	b.n	8009d96 <_vfiprintf_r+0x156>
 8009e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e10:	4604      	mov	r4, r0
 8009e12:	2301      	movs	r3, #1
 8009e14:	e7f0      	b.n	8009df8 <_vfiprintf_r+0x1b8>
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	462a      	mov	r2, r5
 8009e1c:	4b12      	ldr	r3, [pc, #72]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e1e:	a904      	add	r1, sp, #16
 8009e20:	4630      	mov	r0, r6
 8009e22:	f7fd fbdb 	bl	80075dc <_printf_float>
 8009e26:	4607      	mov	r7, r0
 8009e28:	1c78      	adds	r0, r7, #1
 8009e2a:	d1d6      	bne.n	8009dda <_vfiprintf_r+0x19a>
 8009e2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e2e:	07d9      	lsls	r1, r3, #31
 8009e30:	d405      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e32:	89ab      	ldrh	r3, [r5, #12]
 8009e34:	059a      	lsls	r2, r3, #22
 8009e36:	d402      	bmi.n	8009e3e <_vfiprintf_r+0x1fe>
 8009e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e3a:	f7fe f92b 	bl	8008094 <__retarget_lock_release_recursive>
 8009e3e:	89ab      	ldrh	r3, [r5, #12]
 8009e40:	065b      	lsls	r3, r3, #25
 8009e42:	f53f af1f 	bmi.w	8009c84 <_vfiprintf_r+0x44>
 8009e46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e48:	e71e      	b.n	8009c88 <_vfiprintf_r+0x48>
 8009e4a:	ab03      	add	r3, sp, #12
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	462a      	mov	r2, r5
 8009e50:	4b05      	ldr	r3, [pc, #20]	@ (8009e68 <_vfiprintf_r+0x228>)
 8009e52:	a904      	add	r1, sp, #16
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7fd fe59 	bl	8007b0c <_printf_i>
 8009e5a:	e7e4      	b.n	8009e26 <_vfiprintf_r+0x1e6>
 8009e5c:	0801d3f0 	.word	0x0801d3f0
 8009e60:	0801d3fa 	.word	0x0801d3fa
 8009e64:	080075dd 	.word	0x080075dd
 8009e68:	08009c1d 	.word	0x08009c1d
 8009e6c:	0801d3f6 	.word	0x0801d3f6

08009e70 <__swbuf_r>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	460e      	mov	r6, r1
 8009e74:	4614      	mov	r4, r2
 8009e76:	4605      	mov	r5, r0
 8009e78:	b118      	cbz	r0, 8009e82 <__swbuf_r+0x12>
 8009e7a:	6a03      	ldr	r3, [r0, #32]
 8009e7c:	b90b      	cbnz	r3, 8009e82 <__swbuf_r+0x12>
 8009e7e:	f7fd fff1 	bl	8007e64 <__sinit>
 8009e82:	69a3      	ldr	r3, [r4, #24]
 8009e84:	60a3      	str	r3, [r4, #8]
 8009e86:	89a3      	ldrh	r3, [r4, #12]
 8009e88:	071a      	lsls	r2, r3, #28
 8009e8a:	d501      	bpl.n	8009e90 <__swbuf_r+0x20>
 8009e8c:	6923      	ldr	r3, [r4, #16]
 8009e8e:	b943      	cbnz	r3, 8009ea2 <__swbuf_r+0x32>
 8009e90:	4621      	mov	r1, r4
 8009e92:	4628      	mov	r0, r5
 8009e94:	f000 f82a 	bl	8009eec <__swsetup_r>
 8009e98:	b118      	cbz	r0, 8009ea2 <__swbuf_r+0x32>
 8009e9a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	6922      	ldr	r2, [r4, #16]
 8009ea6:	1a98      	subs	r0, r3, r2
 8009ea8:	6963      	ldr	r3, [r4, #20]
 8009eaa:	b2f6      	uxtb	r6, r6
 8009eac:	4283      	cmp	r3, r0
 8009eae:	4637      	mov	r7, r6
 8009eb0:	dc05      	bgt.n	8009ebe <__swbuf_r+0x4e>
 8009eb2:	4621      	mov	r1, r4
 8009eb4:	4628      	mov	r0, r5
 8009eb6:	f7ff fd99 	bl	80099ec <_fflush_r>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	d1ed      	bne.n	8009e9a <__swbuf_r+0x2a>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	60a3      	str	r3, [r4, #8]
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	1c5a      	adds	r2, r3, #1
 8009ec8:	6022      	str	r2, [r4, #0]
 8009eca:	701e      	strb	r6, [r3, #0]
 8009ecc:	6962      	ldr	r2, [r4, #20]
 8009ece:	1c43      	adds	r3, r0, #1
 8009ed0:	429a      	cmp	r2, r3
 8009ed2:	d004      	beq.n	8009ede <__swbuf_r+0x6e>
 8009ed4:	89a3      	ldrh	r3, [r4, #12]
 8009ed6:	07db      	lsls	r3, r3, #31
 8009ed8:	d5e1      	bpl.n	8009e9e <__swbuf_r+0x2e>
 8009eda:	2e0a      	cmp	r6, #10
 8009edc:	d1df      	bne.n	8009e9e <__swbuf_r+0x2e>
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4628      	mov	r0, r5
 8009ee2:	f7ff fd83 	bl	80099ec <_fflush_r>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d0d9      	beq.n	8009e9e <__swbuf_r+0x2e>
 8009eea:	e7d6      	b.n	8009e9a <__swbuf_r+0x2a>

08009eec <__swsetup_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4b29      	ldr	r3, [pc, #164]	@ (8009f94 <__swsetup_r+0xa8>)
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	6818      	ldr	r0, [r3, #0]
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	b118      	cbz	r0, 8009f00 <__swsetup_r+0x14>
 8009ef8:	6a03      	ldr	r3, [r0, #32]
 8009efa:	b90b      	cbnz	r3, 8009f00 <__swsetup_r+0x14>
 8009efc:	f7fd ffb2 	bl	8007e64 <__sinit>
 8009f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f04:	0719      	lsls	r1, r3, #28
 8009f06:	d422      	bmi.n	8009f4e <__swsetup_r+0x62>
 8009f08:	06da      	lsls	r2, r3, #27
 8009f0a:	d407      	bmi.n	8009f1c <__swsetup_r+0x30>
 8009f0c:	2209      	movs	r2, #9
 8009f0e:	602a      	str	r2, [r5, #0]
 8009f10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f14:	81a3      	strh	r3, [r4, #12]
 8009f16:	f04f 30ff 	mov.w	r0, #4294967295
 8009f1a:	e033      	b.n	8009f84 <__swsetup_r+0x98>
 8009f1c:	0758      	lsls	r0, r3, #29
 8009f1e:	d512      	bpl.n	8009f46 <__swsetup_r+0x5a>
 8009f20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f22:	b141      	cbz	r1, 8009f36 <__swsetup_r+0x4a>
 8009f24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f28:	4299      	cmp	r1, r3
 8009f2a:	d002      	beq.n	8009f32 <__swsetup_r+0x46>
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	f7fe feff 	bl	8008d30 <_free_r>
 8009f32:	2300      	movs	r3, #0
 8009f34:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009f3c:	81a3      	strh	r3, [r4, #12]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6923      	ldr	r3, [r4, #16]
 8009f44:	6023      	str	r3, [r4, #0]
 8009f46:	89a3      	ldrh	r3, [r4, #12]
 8009f48:	f043 0308 	orr.w	r3, r3, #8
 8009f4c:	81a3      	strh	r3, [r4, #12]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	b94b      	cbnz	r3, 8009f66 <__swsetup_r+0x7a>
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009f58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f5c:	d003      	beq.n	8009f66 <__swsetup_r+0x7a>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	f000 f883 	bl	800a06c <__smakebuf_r>
 8009f66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f6a:	f013 0201 	ands.w	r2, r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <__swsetup_r+0x9a>
 8009f70:	2200      	movs	r2, #0
 8009f72:	60a2      	str	r2, [r4, #8]
 8009f74:	6962      	ldr	r2, [r4, #20]
 8009f76:	4252      	negs	r2, r2
 8009f78:	61a2      	str	r2, [r4, #24]
 8009f7a:	6922      	ldr	r2, [r4, #16]
 8009f7c:	b942      	cbnz	r2, 8009f90 <__swsetup_r+0xa4>
 8009f7e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009f82:	d1c5      	bne.n	8009f10 <__swsetup_r+0x24>
 8009f84:	bd38      	pop	{r3, r4, r5, pc}
 8009f86:	0799      	lsls	r1, r3, #30
 8009f88:	bf58      	it	pl
 8009f8a:	6962      	ldrpl	r2, [r4, #20]
 8009f8c:	60a2      	str	r2, [r4, #8]
 8009f8e:	e7f4      	b.n	8009f7a <__swsetup_r+0x8e>
 8009f90:	2000      	movs	r0, #0
 8009f92:	e7f7      	b.n	8009f84 <__swsetup_r+0x98>
 8009f94:	20000018 	.word	0x20000018

08009f98 <_raise_r>:
 8009f98:	291f      	cmp	r1, #31
 8009f9a:	b538      	push	{r3, r4, r5, lr}
 8009f9c:	4605      	mov	r5, r0
 8009f9e:	460c      	mov	r4, r1
 8009fa0:	d904      	bls.n	8009fac <_raise_r+0x14>
 8009fa2:	2316      	movs	r3, #22
 8009fa4:	6003      	str	r3, [r0, #0]
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009fae:	b112      	cbz	r2, 8009fb6 <_raise_r+0x1e>
 8009fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009fb4:	b94b      	cbnz	r3, 8009fca <_raise_r+0x32>
 8009fb6:	4628      	mov	r0, r5
 8009fb8:	f000 f830 	bl	800a01c <_getpid_r>
 8009fbc:	4622      	mov	r2, r4
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc6:	f000 b817 	b.w	8009ff8 <_kill_r>
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d00a      	beq.n	8009fe4 <_raise_r+0x4c>
 8009fce:	1c59      	adds	r1, r3, #1
 8009fd0:	d103      	bne.n	8009fda <_raise_r+0x42>
 8009fd2:	2316      	movs	r3, #22
 8009fd4:	6003      	str	r3, [r0, #0]
 8009fd6:	2001      	movs	r0, #1
 8009fd8:	e7e7      	b.n	8009faa <_raise_r+0x12>
 8009fda:	2100      	movs	r1, #0
 8009fdc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	4798      	blx	r3
 8009fe4:	2000      	movs	r0, #0
 8009fe6:	e7e0      	b.n	8009faa <_raise_r+0x12>

08009fe8 <raise>:
 8009fe8:	4b02      	ldr	r3, [pc, #8]	@ (8009ff4 <raise+0xc>)
 8009fea:	4601      	mov	r1, r0
 8009fec:	6818      	ldr	r0, [r3, #0]
 8009fee:	f7ff bfd3 	b.w	8009f98 <_raise_r>
 8009ff2:	bf00      	nop
 8009ff4:	20000018 	.word	0x20000018

08009ff8 <_kill_r>:
 8009ff8:	b538      	push	{r3, r4, r5, lr}
 8009ffa:	4d07      	ldr	r5, [pc, #28]	@ (800a018 <_kill_r+0x20>)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	4604      	mov	r4, r0
 800a000:	4608      	mov	r0, r1
 800a002:	4611      	mov	r1, r2
 800a004:	602b      	str	r3, [r5, #0]
 800a006:	f7f7 fb27 	bl	8001658 <_kill>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	d102      	bne.n	800a014 <_kill_r+0x1c>
 800a00e:	682b      	ldr	r3, [r5, #0]
 800a010:	b103      	cbz	r3, 800a014 <_kill_r+0x1c>
 800a012:	6023      	str	r3, [r4, #0]
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	bf00      	nop
 800a018:	20004494 	.word	0x20004494

0800a01c <_getpid_r>:
 800a01c:	f7f7 bb14 	b.w	8001648 <_getpid>

0800a020 <__swhatbuf_r>:
 800a020:	b570      	push	{r4, r5, r6, lr}
 800a022:	460c      	mov	r4, r1
 800a024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a028:	2900      	cmp	r1, #0
 800a02a:	b096      	sub	sp, #88	@ 0x58
 800a02c:	4615      	mov	r5, r2
 800a02e:	461e      	mov	r6, r3
 800a030:	da0d      	bge.n	800a04e <__swhatbuf_r+0x2e>
 800a032:	89a3      	ldrh	r3, [r4, #12]
 800a034:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a038:	f04f 0100 	mov.w	r1, #0
 800a03c:	bf14      	ite	ne
 800a03e:	2340      	movne	r3, #64	@ 0x40
 800a040:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a044:	2000      	movs	r0, #0
 800a046:	6031      	str	r1, [r6, #0]
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	b016      	add	sp, #88	@ 0x58
 800a04c:	bd70      	pop	{r4, r5, r6, pc}
 800a04e:	466a      	mov	r2, sp
 800a050:	f000 f848 	bl	800a0e4 <_fstat_r>
 800a054:	2800      	cmp	r0, #0
 800a056:	dbec      	blt.n	800a032 <__swhatbuf_r+0x12>
 800a058:	9901      	ldr	r1, [sp, #4]
 800a05a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a05e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a062:	4259      	negs	r1, r3
 800a064:	4159      	adcs	r1, r3
 800a066:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a06a:	e7eb      	b.n	800a044 <__swhatbuf_r+0x24>

0800a06c <__smakebuf_r>:
 800a06c:	898b      	ldrh	r3, [r1, #12]
 800a06e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a070:	079d      	lsls	r5, r3, #30
 800a072:	4606      	mov	r6, r0
 800a074:	460c      	mov	r4, r1
 800a076:	d507      	bpl.n	800a088 <__smakebuf_r+0x1c>
 800a078:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a07c:	6023      	str	r3, [r4, #0]
 800a07e:	6123      	str	r3, [r4, #16]
 800a080:	2301      	movs	r3, #1
 800a082:	6163      	str	r3, [r4, #20]
 800a084:	b003      	add	sp, #12
 800a086:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a088:	ab01      	add	r3, sp, #4
 800a08a:	466a      	mov	r2, sp
 800a08c:	f7ff ffc8 	bl	800a020 <__swhatbuf_r>
 800a090:	9f00      	ldr	r7, [sp, #0]
 800a092:	4605      	mov	r5, r0
 800a094:	4639      	mov	r1, r7
 800a096:	4630      	mov	r0, r6
 800a098:	f7fe febe 	bl	8008e18 <_malloc_r>
 800a09c:	b948      	cbnz	r0, 800a0b2 <__smakebuf_r+0x46>
 800a09e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0a2:	059a      	lsls	r2, r3, #22
 800a0a4:	d4ee      	bmi.n	800a084 <__smakebuf_r+0x18>
 800a0a6:	f023 0303 	bic.w	r3, r3, #3
 800a0aa:	f043 0302 	orr.w	r3, r3, #2
 800a0ae:	81a3      	strh	r3, [r4, #12]
 800a0b0:	e7e2      	b.n	800a078 <__smakebuf_r+0xc>
 800a0b2:	89a3      	ldrh	r3, [r4, #12]
 800a0b4:	6020      	str	r0, [r4, #0]
 800a0b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	9b01      	ldr	r3, [sp, #4]
 800a0be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0c2:	b15b      	cbz	r3, 800a0dc <__smakebuf_r+0x70>
 800a0c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	f000 f81d 	bl	800a108 <_isatty_r>
 800a0ce:	b128      	cbz	r0, 800a0dc <__smakebuf_r+0x70>
 800a0d0:	89a3      	ldrh	r3, [r4, #12]
 800a0d2:	f023 0303 	bic.w	r3, r3, #3
 800a0d6:	f043 0301 	orr.w	r3, r3, #1
 800a0da:	81a3      	strh	r3, [r4, #12]
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	431d      	orrs	r5, r3
 800a0e0:	81a5      	strh	r5, [r4, #12]
 800a0e2:	e7cf      	b.n	800a084 <__smakebuf_r+0x18>

0800a0e4 <_fstat_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	@ (800a104 <_fstat_r+0x20>)
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	4608      	mov	r0, r1
 800a0ee:	4611      	mov	r1, r2
 800a0f0:	602b      	str	r3, [r5, #0]
 800a0f2:	f7f7 fb11 	bl	8001718 <_fstat>
 800a0f6:	1c43      	adds	r3, r0, #1
 800a0f8:	d102      	bne.n	800a100 <_fstat_r+0x1c>
 800a0fa:	682b      	ldr	r3, [r5, #0]
 800a0fc:	b103      	cbz	r3, 800a100 <_fstat_r+0x1c>
 800a0fe:	6023      	str	r3, [r4, #0]
 800a100:	bd38      	pop	{r3, r4, r5, pc}
 800a102:	bf00      	nop
 800a104:	20004494 	.word	0x20004494

0800a108 <_isatty_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d06      	ldr	r5, [pc, #24]	@ (800a124 <_isatty_r+0x1c>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f7 fb10 	bl	8001738 <_isatty>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_isatty_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_isatty_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20004494 	.word	0x20004494

0800a128 <sqrtf>:
 800a128:	b508      	push	{r3, lr}
 800a12a:	ed2d 8b02 	vpush	{d8}
 800a12e:	eeb0 8a40 	vmov.f32	s16, s0
 800a132:	f000 f817 	bl	800a164 <__ieee754_sqrtf>
 800a136:	eeb4 8a48 	vcmp.f32	s16, s16
 800a13a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13e:	d60c      	bvs.n	800a15a <sqrtf+0x32>
 800a140:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a160 <sqrtf+0x38>
 800a144:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a14c:	d505      	bpl.n	800a15a <sqrtf+0x32>
 800a14e:	f7fd ff75 	bl	800803c <__errno>
 800a152:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a156:	2321      	movs	r3, #33	@ 0x21
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	ecbd 8b02 	vpop	{d8}
 800a15e:	bd08      	pop	{r3, pc}
 800a160:	00000000 	.word	0x00000000

0800a164 <__ieee754_sqrtf>:
 800a164:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a168:	4770      	bx	lr
	...

0800a16c <_init>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	bf00      	nop
 800a170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a172:	bc08      	pop	{r3}
 800a174:	469e      	mov	lr, r3
 800a176:	4770      	bx	lr

0800a178 <_fini>:
 800a178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a17a:	bf00      	nop
 800a17c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17e:	bc08      	pop	{r3}
 800a180:	469e      	mov	lr, r3
 800a182:	4770      	bx	lr
